var Module;
if (!Module)
    Module = (typeof Module !== "undefined" ? Module : null) || {};
var moduleOverrides = {};
for (var key in Module) {
    if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key];
    }
}
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
if (Module["ENVIRONMENT"]) {
    if (Module["ENVIRONMENT"] === "WEB") {
        ENVIRONMENT_IS_WEB = true;
    } else if (Module["ENVIRONMENT"] === "WORKER") {
        ENVIRONMENT_IS_WORKER = true;
    } else if (Module["ENVIRONMENT"] === "NODE") {
        ENVIRONMENT_IS_NODE = true;
    } else if (Module["ENVIRONMENT"] === "SHELL") {
        ENVIRONMENT_IS_SHELL = true;
    } else {
        throw new Error("The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.");
    }
} else {
    ENVIRONMENT_IS_WEB = typeof window === "object";
    ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
    ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
    ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}
if (ENVIRONMENT_IS_NODE) {
    if (!Module["print"])
        Module["print"] = console.log;
    if (!Module["printErr"])
        Module["printErr"] = console.warn;
    var nodeFS;
    var nodePath;
    Module["read"] = function read(filename, binary) {
        if (!nodeFS)
            nodeFS = require("fs");
        if (!nodePath)
            nodePath = require("path");
        filename = nodePath["normalize"](filename);
        var ret = nodeFS["readFileSync"](filename);
        if (!ret && filename != nodePath["resolve"](filename)) {
            filename = path.join(__dirname, "..", "src", filename);
            ret = nodeFS["readFileSync"](filename);
        }
        if (ret && !binary)
            ret = ret.toString();
        return ret;
    };
    Module["readBinary"] = function readBinary(filename) {
        var ret = Module["read"](filename, true);
        if (!ret.buffer) {
            ret = new Uint8Array(ret);
        }
        assert(ret.buffer);
        return ret;
    };
    Module["load"] = function load(f) {
        globalEval(read(f));
    };
    if (!Module["thisProgram"]) {
        if (process["argv"].length > 1) {
            Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
        } else {
            Module["thisProgram"] = "unknown-program";
        }
    }
    Module["arguments"] = process["argv"].slice(2);
    if (typeof module !== "undefined") {
        module["exports"] = Module;
    }
    process["on"]("uncaughtException", function (ex) {
        if (!(ex instanceof ExitStatus)) {
            throw ex;
        }
    });
    Module["inspect"] = function () {
        return "[Emscripten Module object]";
    };
} else if (ENVIRONMENT_IS_SHELL) {
    if (!Module["print"])
        Module["print"] = print;
    if (typeof printErr != "undefined")
        Module["printErr"] = printErr;
    if (typeof read != "undefined") {
        Module["read"] = read;
    } else {
        Module["read"] = function read() {
            throw "no read() available (jsc?)";
        };
    }
    Module["readBinary"] = function readBinary(f) {
        if (typeof readbuffer === "function") {
            return new Uint8Array(readbuffer(f));
        }
        var data = read(f, "binary");
        assert(typeof data === "object");
        return data;
    };
    if (typeof scriptArgs != "undefined") {
        Module["arguments"] = scriptArgs;
    } else if (typeof arguments != "undefined") {
        Module["arguments"] = arguments;
    }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module["read"] = function read(url) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, false);
        xhr.send(null);
        return xhr.responseText;
    };
    Module["readAsync"] = function readAsync(url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", url, true);
        xhr.responseType = "arraybuffer";
        xhr.onload = function xhr_onload() {
            if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                onload(xhr.response);
            } else {
                onerror();
            }
        };
        xhr.onerror = onerror;
        xhr.send(null);
    };
    if (typeof arguments != "undefined") {
        Module["arguments"] = arguments;
    }
    if (typeof console !== "undefined") {
        if (!Module["print"])
            Module["print"] = function print(x) {
                console.log(x);
            };
        if (!Module["printErr"])
            Module["printErr"] = function printErr(x) {
                console.warn(x);
            };
    } else {
        var TRY_USE_DUMP = false;
        if (!Module["print"])
            Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? function (x) {
                dump(x);
            } : function (x) {
            };
    }
    if (ENVIRONMENT_IS_WORKER) {
        Module["load"] = importScripts;
    }
    if (typeof Module["setWindowTitle"] === "undefined") {
        Module["setWindowTitle"] = function (title) {
            document.title = title;
        };
    }
} else {
    throw "Unknown runtime environment. Where are we?";
}
function globalEval(x) {
    eval.call(null, x);
}
if (!Module["load"] && Module["read"]) {
    Module["load"] = function load(f) {
        globalEval(Module["read"](f));
    };
}
if (!Module["print"]) {
    Module["print"] = function () {
    };
}
if (!Module["printErr"]) {
    Module["printErr"] = Module["print"];
}
if (!Module["arguments"]) {
    Module["arguments"] = [];
}
if (!Module["thisProgram"]) {
    Module["thisProgram"] = "./this.program";
}
Module.print = Module["print"];
Module.printErr = Module["printErr"];
Module["preRun"] = [];
Module["postRun"] = [];
for (var key in moduleOverrides) {
    if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key];
    }
}
moduleOverrides = undefined;
var Runtime = {
    setTempRet0: function (value) {
        tempRet0 = value;
    },
    getTempRet0: function () {
        return tempRet0;
    },
    stackSave: function () {
        return STACKTOP;
    },
    stackRestore: function (stackTop) {
        STACKTOP = stackTop;
    },
    getNativeTypeSize: function (type) {
        switch (type) {
        case "i1":
        case "i8":
            return 1;
        case "i16":
            return 2;
        case "i32":
            return 4;
        case "i64":
            return 8;
        case "float":
            return 4;
        case "double":
            return 8;
        default: {
                if (type[type.length - 1] === "*") {
                    return Runtime.QUANTUM_SIZE;
                } else if (type[0] === "i") {
                    var bits = parseInt(type.substr(1));
                    assert(bits % 8 === 0);
                    return bits / 8;
                } else {
                    return 0;
                }
            }
        }
    },
    getNativeFieldSize: function (type) {
        return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
    },
    STACK_ALIGN: 16,
    prepVararg: function (ptr, type) {
        if (type === "double" || type === "i64") {
            if (ptr & 7) {
                assert((ptr & 7) === 4);
                ptr += 4;
            }
        } else {
            assert((ptr & 3) === 0);
        }
        return ptr;
    },
    getAlignSize: function (type, size, vararg) {
        if (!vararg && (type == "i64" || type == "double"))
            return 8;
        if (!type)
            return Math.min(size, 8);
        return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
    },
    dynCall: function (sig, ptr, args) {
        if (args && args.length) {
            if (!args.splice)
                args = Array.prototype.slice.call(args);
            args.splice(0, 0, ptr);
            return Module["dynCall_" + sig].apply(null, args);
        } else {
            return Module["dynCall_" + sig].call(null, ptr);
        }
    },
    functionPointers: [],
    addFunction: function (func) {
        for (var i = 0; i < Runtime.functionPointers.length; i++) {
            if (!Runtime.functionPointers[i]) {
                Runtime.functionPointers[i] = func;
                return 2 * (1 + i);
            }
        }
        throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
    },
    removeFunction: function (index) {
        Runtime.functionPointers[(index - 2) / 2] = null;
    },
    warnOnce: function (text) {
        if (!Runtime.warnOnce.shown)
            Runtime.warnOnce.shown = {};
        if (!Runtime.warnOnce.shown[text]) {
            Runtime.warnOnce.shown[text] = 1;
            Module.printErr(text);
        }
    },
    funcWrappers: {},
    getFuncWrapper: function (func, sig) {
        assert(sig);
        if (!Runtime.funcWrappers[sig]) {
            Runtime.funcWrappers[sig] = {};
        }
        var sigCache = Runtime.funcWrappers[sig];
        if (!sigCache[func]) {
            sigCache[func] = function dynCall_wrapper() {
                return Runtime.dynCall(sig, func, arguments);
            };
        }
        return sigCache[func];
    },
    getCompilerSetting: function (name) {
        throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
    },
    stackAlloc: function (size) {
        var ret = STACKTOP;
        STACKTOP = STACKTOP + size | 0;
        STACKTOP = STACKTOP + 15 & -16;
        return ret;
    },
    staticAlloc: function (size) {
        var ret = STATICTOP;
        STATICTOP = STATICTOP + size | 0;
        STATICTOP = STATICTOP + 15 & -16;
        return ret;
    },
    dynamicAlloc: function (size) {
        var ret = DYNAMICTOP;
        DYNAMICTOP = DYNAMICTOP + size | 0;
        DYNAMICTOP = DYNAMICTOP + 15 & -16;
        if (DYNAMICTOP >= TOTAL_MEMORY) {
            var success = enlargeMemory();
            if (!success) {
                DYNAMICTOP = ret;
                return 0;
            }
        }
        return ret;
    },
    alignMemory: function (size, quantum) {
        var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
        return ret;
    },
    makeBigInt: function (low, high, unsigned) {
        var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296;
        return ret;
    },
    GLOBAL_BASE: 8,
    QUANTUM_SIZE: 4,
    __dummy__: 0
};
Module["Runtime"] = Runtime;
var ABORT = false;
var EXITSTATUS = 0;
function assert(condition, text) {
    if (!condition) {
        abort("Assertion failed: " + text);
    }
}
function getCFunc(ident) {
    var func = Module["_" + ident];
    if (!func) {
        try {
            func = eval("_" + ident);
        } catch (e) {
        }
    }
    assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
    return func;
}
var cwrap, ccall;
(function () {
    var JSfuncs = {
        "stackSave": function () {
            Runtime.stackSave();
        },
        "stackRestore": function () {
            Runtime.stackRestore();
        },
        "arrayToC": function (arr) {
            var ret = Runtime.stackAlloc(arr.length);
            writeArrayToMemory(arr, ret);
            return ret;
        },
        "stringToC": function (str) {
            var ret = 0;
            if (str !== null && str !== undefined && str !== 0) {
                ret = Runtime.stackAlloc((str.length << 2) + 1);
                writeStringToMemory(str, ret);
            }
            return ret;
        }
    };
    var toC = {
        "string": JSfuncs["stringToC"],
        "array": JSfuncs["arrayToC"]
    };
    ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
        var func = getCFunc(ident);
        var cArgs = [];
        var stack = 0;
        if (args) {
            for (var i = 0; i < args.length; i++) {
                var converter = toC[argTypes[i]];
                if (converter) {
                    if (stack === 0)
                        stack = Runtime.stackSave();
                    cArgs[i] = converter(args[i]);
                } else {
                    cArgs[i] = args[i];
                }
            }
        }
        var ret = func.apply(null, cArgs);
        if (returnType === "string")
            ret = Pointer_stringify(ret);
        if (stack !== 0) {
            if (opts && opts.async) {
                EmterpreterAsync.asyncFinalizers.push(function () {
                    Runtime.stackRestore(stack);
                });
                return;
            }
            Runtime.stackRestore(stack);
        }
        return ret;
    };
    var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
    function parseJSFunc(jsfunc) {
        var parsed = jsfunc.toString().match(sourceRegex).slice(1);
        return {
            arguments: parsed[0],
            body: parsed[1],
            returnValue: parsed[2]
        };
    }
    var JSsource = null;
    function ensureJSsource() {
        if (!JSsource) {
            JSsource = {};
            for (var fun in JSfuncs) {
                if (JSfuncs.hasOwnProperty(fun)) {
                    JSsource[fun] = parseJSFunc(JSfuncs[fun]);
                }
            }
        }
    }
    cwrap = function cwrap(ident, returnType, argTypes) {
        argTypes = argTypes || [];
        var cfunc = getCFunc(ident);
        var numericArgs = argTypes.every(function (type) {
            return type === "number";
        });
        var numericRet = returnType !== "string";
        if (numericRet && numericArgs) {
            return cfunc;
        }
        var argNames = argTypes.map(function (x, i) {
            return "$" + i;
        });
        var funcstr = "(function(" + argNames.join(",") + ") {";
        var nargs = argTypes.length;
        if (!numericArgs) {
            ensureJSsource();
            funcstr += "var stack = " + JSsource["stackSave"].body + ";";
            for (var i = 0; i < nargs; i++) {
                var arg = argNames[i], type = argTypes[i];
                if (type === "number")
                    continue;
                var convertCode = JSsource[type + "ToC"];
                funcstr += "var " + convertCode.arguments + " = " + arg + ";";
                funcstr += convertCode.body + ";";
                funcstr += arg + "=(" + convertCode.returnValue + ");";
            }
        }
        var cfuncname = parseJSFunc(function () {
            return cfunc;
        }).returnValue;
        funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
        if (!numericRet) {
            var strgfy = parseJSFunc(function () {
                return Pointer_stringify;
            }).returnValue;
            funcstr += "ret = " + strgfy + "(ret);";
        }
        if (!numericArgs) {
            ensureJSsource();
            funcstr += JSsource["stackRestore"].body.replace("()", "(stack)") + ";";
        }
        funcstr += "return ret})";
        return eval(funcstr);
    };
}());
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
function setValue(ptr, value, type, noSafe) {
    type = type || "i8";
    if (type.charAt(type.length - 1) === "*")
        type = "i32";
    switch (type) {
    case "i1":
        HEAP8[ptr >> 0] = value;
        break;
    case "i8":
        HEAP8[ptr >> 0] = value;
        break;
    case "i16":
        HEAP16[ptr >> 1] = value;
        break;
    case "i32":
        HEAP32[ptr >> 2] = value;
        break;
    case "i64":
        tempI64 = [
            value >>> 0,
            (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0)
        ], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
        break;
    case "float":
        HEAPF32[ptr >> 2] = value;
        break;
    case "double":
        HEAPF64[ptr >> 3] = value;
        break;
    default:
        abort("invalid type for setValue: " + type);
    }
}
Module["setValue"] = setValue;
function getValue(ptr, type, noSafe) {
    type = type || "i8";
    if (type.charAt(type.length - 1) === "*")
        type = "i32";
    switch (type) {
    case "i1":
        return HEAP8[ptr >> 0];
    case "i8":
        return HEAP8[ptr >> 0];
    case "i16":
        return HEAP16[ptr >> 1];
    case "i32":
        return HEAP32[ptr >> 2];
    case "i64":
        return HEAP32[ptr >> 2];
    case "float":
        return HEAPF32[ptr >> 2];
    case "double":
        return HEAPF64[ptr >> 3];
    default:
        abort("invalid type for setValue: " + type);
    }
    return null;
}
Module["getValue"] = getValue;
var ALLOC_NORMAL = 0;
var ALLOC_STACK = 1;
var ALLOC_STATIC = 2;
var ALLOC_DYNAMIC = 3;
var ALLOC_NONE = 4;
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;
function allocate(slab, types, allocator, ptr) {
    var zeroinit, size;
    if (typeof slab === "number") {
        zeroinit = true;
        size = slab;
    } else {
        zeroinit = false;
        size = slab.length;
    }
    var singleType = typeof types === "string" ? types : null;
    var ret;
    if (allocator == ALLOC_NONE) {
        ret = ptr;
    } else {
        ret = [
            typeof _malloc === "function" ? _malloc : Runtime.staticAlloc,
            Runtime.stackAlloc,
            Runtime.staticAlloc,
            Runtime.dynamicAlloc
        ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
    }
    if (zeroinit) {
        var ptr = ret, stop;
        assert((ret & 3) == 0);
        stop = ret + (size & ~3);
        for (; ptr < stop; ptr += 4) {
            HEAP32[ptr >> 2] = 0;
        }
        stop = ret + size;
        while (ptr < stop) {
            HEAP8[ptr++ >> 0] = 0;
        }
        return ret;
    }
    if (singleType === "i8") {
        if (slab.subarray || slab.slice) {
            HEAPU8.set(slab, ret);
        } else {
            HEAPU8.set(new Uint8Array(slab), ret);
        }
        return ret;
    }
    var i = 0, type, typeSize, previousType;
    while (i < size) {
        var curr = slab[i];
        if (typeof curr === "function") {
            curr = Runtime.getFunctionIndex(curr);
        }
        type = singleType || types[i];
        if (type === 0) {
            i++;
            continue;
        }
        if (type == "i64")
            type = "i32";
        setValue(ret + i, curr, type);
        if (previousType !== type) {
            typeSize = Runtime.getNativeTypeSize(type);
            previousType = type;
        }
        i += typeSize;
    }
    return ret;
}
Module["allocate"] = allocate;
function getMemory(size) {
    if (!staticSealed)
        return Runtime.staticAlloc(size);
    if (typeof _sbrk !== "undefined" && !_sbrk.called || !runtimeInitialized)
        return Runtime.dynamicAlloc(size);
    return _malloc(size);
}
Module["getMemory"] = getMemory;
function Pointer_stringify(ptr, length) {
    if (length === 0 || !ptr)
        return "";
    var hasUtf = 0;
    var t;
    var i = 0;
    while (1) {
        t = HEAPU8[ptr + i >> 0];
        hasUtf |= t;
        if (t == 0 && !length)
            break;
        i++;
        if (length && i == length)
            break;
    }
    if (!length)
        length = i;
    var ret = "";
    if (hasUtf < 128) {
        var MAX_CHUNK = 1024;
        var curr;
        while (length > 0) {
            curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
            ret = ret ? ret + curr : curr;
            ptr += MAX_CHUNK;
            length -= MAX_CHUNK;
        }
        return ret;
    }
    return Module["UTF8ToString"](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;
function AsciiToString(ptr) {
    var str = "";
    while (1) {
        var ch = HEAP8[ptr++ >> 0];
        if (!ch)
            return str;
        str += String.fromCharCode(ch);
    }
}
Module["AsciiToString"] = AsciiToString;
function stringToAscii(str, outPtr) {
    return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;
function UTF8ArrayToString(u8Array, idx) {
    var u0, u1, u2, u3, u4, u5;
    var str = "";
    while (1) {
        u0 = u8Array[idx++];
        if (!u0)
            return str;
        if (!(u0 & 128)) {
            str += String.fromCharCode(u0);
            continue;
        }
        u1 = u8Array[idx++] & 63;
        if ((u0 & 224) == 192) {
            str += String.fromCharCode((u0 & 31) << 6 | u1);
            continue;
        }
        u2 = u8Array[idx++] & 63;
        if ((u0 & 240) == 224) {
            u0 = (u0 & 15) << 12 | u1 << 6 | u2;
        } else {
            u3 = u8Array[idx++] & 63;
            if ((u0 & 248) == 240) {
                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;
            } else {
                u4 = u8Array[idx++] & 63;
                if ((u0 & 252) == 248) {
                    u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;
                } else {
                    u5 = u8Array[idx++] & 63;
                    u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
                }
            }
        }
        if (u0 < 65536) {
            str += String.fromCharCode(u0);
        } else {
            var ch = u0 - 65536;
            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        }
    }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;
function UTF8ToString(ptr) {
    return UTF8ArrayToString(HEAPU8, ptr);
}
Module["UTF8ToString"] = UTF8ToString;
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
    if (!(maxBytesToWrite > 0))
        return 0;
    var startIdx = outIdx;
    var endIdx = outIdx + maxBytesToWrite - 1;
    for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343)
            u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        if (u <= 127) {
            if (outIdx >= endIdx)
                break;
            outU8Array[outIdx++] = u;
        } else if (u <= 2047) {
            if (outIdx + 1 >= endIdx)
                break;
            outU8Array[outIdx++] = 192 | u >> 6;
            outU8Array[outIdx++] = 128 | u & 63;
        } else if (u <= 65535) {
            if (outIdx + 2 >= endIdx)
                break;
            outU8Array[outIdx++] = 224 | u >> 12;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63;
        } else if (u <= 2097151) {
            if (outIdx + 3 >= endIdx)
                break;
            outU8Array[outIdx++] = 240 | u >> 18;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63;
        } else if (u <= 67108863) {
            if (outIdx + 4 >= endIdx)
                break;
            outU8Array[outIdx++] = 248 | u >> 24;
            outU8Array[outIdx++] = 128 | u >> 18 & 63;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63;
        } else {
            if (outIdx + 5 >= endIdx)
                break;
            outU8Array[outIdx++] = 252 | u >> 30;
            outU8Array[outIdx++] = 128 | u >> 24 & 63;
            outU8Array[outIdx++] = 128 | u >> 18 & 63;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63;
        }
    }
    outU8Array[outIdx] = 0;
    return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;
function stringToUTF8(str, outPtr, maxBytesToWrite) {
    return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;
function lengthBytesUTF8(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343)
            u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        if (u <= 127) {
            ++len;
        } else if (u <= 2047) {
            len += 2;
        } else if (u <= 65535) {
            len += 3;
        } else if (u <= 2097151) {
            len += 4;
        } else if (u <= 67108863) {
            len += 5;
        } else {
            len += 6;
        }
    }
    return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;
function demangle(func) {
    var hasLibcxxabi = !!Module["___cxa_demangle"];
    if (hasLibcxxabi) {
        try {
            var buf = _malloc(func.length);
            writeStringToMemory(func.substr(1), buf);
            var status = _malloc(4);
            var ret = Module["___cxa_demangle"](buf, 0, 0, status);
            if (getValue(status, "i32") === 0 && ret) {
                return Pointer_stringify(ret);
            }
        } catch (e) {
            return func;
        } finally {
            if (buf)
                _free(buf);
            if (status)
                _free(status);
            if (ret)
                _free(ret);
        }
    }
    Runtime.warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
    return func;
}
function demangleAll(text) {
    return text.replace(/__Z[\w\d_]+/g, function (x) {
        var y = demangle(x);
        return x === y ? x : x + " [" + y + "]";
    });
}
function jsStackTrace() {
    var err = new Error();
    if (!err.stack) {
        try {
            throw new Error(0);
        } catch (e) {
            err = e;
        }
        if (!err.stack) {
            return "(no stack trace available)";
        }
    }
    return err.stack.toString();
}
function stackTrace() {
    return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
    if (x % 4096 > 0) {
        x += 4096 - x % 4096;
    }
    return x;
}
var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
function updateGlobalBufferViews() {
    Module["HEAP8"] = HEAP8 = new Int8Array(buffer);
    Module["HEAP16"] = HEAP16 = new Int16Array(buffer);
    Module["HEAP32"] = HEAP32 = new Int32Array(buffer);
    Module["HEAPU8"] = HEAPU8 = new Uint8Array(buffer);
    Module["HEAPU16"] = HEAPU16 = new Uint16Array(buffer);
    Module["HEAPU32"] = HEAPU32 = new Uint32Array(buffer);
    Module["HEAPF32"] = HEAPF32 = new Float32Array(buffer);
    Module["HEAPF64"] = HEAPF64 = new Float64Array(buffer);
}
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false;
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0;
var DYNAMIC_BASE = 0, DYNAMICTOP = 0;
function abortOnCannotGrowMemory() {
    abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");
}
function enlargeMemory() {
    abortOnCannotGrowMemory();
}
var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 16777216;
var totalMemory = 64 * 1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
    if (totalMemory < 16 * 1024 * 1024) {
        totalMemory *= 2;
    } else {
        totalMemory += 16 * 1024 * 1024;
    }
}
if (totalMemory !== TOTAL_MEMORY) {
    TOTAL_MEMORY = totalMemory;
}
if (Module["buffer"]) {
    buffer = Module["buffer"];
} else {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0)
    throw "Typed arrays 2 must be run on a little-endian system";
Module["HEAP"] = HEAP;
Module["buffer"] = buffer;
Module["HEAP8"] = HEAP8;
Module["HEAP16"] = HEAP16;
Module["HEAP32"] = HEAP32;
Module["HEAPU8"] = HEAPU8;
Module["HEAPU16"] = HEAPU16;
Module["HEAPU32"] = HEAPU32;
Module["HEAPF32"] = HEAPF32;
Module["HEAPF64"] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
    while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == "function") {
            callback();
            continue;
        }
        var func = callback.func;
        if (typeof func === "number") {
            if (callback.arg === undefined) {
                Runtime.dynCall("v", func);
            } else {
                Runtime.dynCall("vi", func, [callback.arg]);
            }
        } else {
            func(callback.arg === undefined ? null : callback.arg);
        }
    }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
    if (Module["preRun"]) {
        if (typeof Module["preRun"] == "function")
            Module["preRun"] = [Module["preRun"]];
        while (Module["preRun"].length) {
            addOnPreRun(Module["preRun"].shift());
        }
    }
    callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
    if (runtimeInitialized)
        return;
    runtimeInitialized = true;
    callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
    callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
    callRuntimeCallbacks(__ATEXIT__);
    runtimeExited = true;
}
function postRun() {
    if (Module["postRun"]) {
        if (typeof Module["postRun"] == "function")
            Module["postRun"] = [Module["postRun"]];
        while (Module["postRun"].length) {
            addOnPostRun(Module["postRun"].shift());
        }
    }
    callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;
function addOnInit(cb) {
    __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;
function addOnPreMain(cb) {
    __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;
function addOnExit(cb) {
    __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;
function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;
function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull)
        u8array.length = numBytesWritten;
    return u8array;
}
Module["intArrayFromString"] = intArrayFromString;
function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
        var chr = array[i];
        if (chr > 255) {
            chr &= 255;
        }
        ret.push(String.fromCharCode(chr));
    }
    return ret.join("");
}
Module["intArrayToString"] = intArrayToString;
function writeStringToMemory(string, buffer, dontAddNull) {
    var array = intArrayFromString(string, dontAddNull);
    var i = 0;
    while (i < array.length) {
        var chr = array[i];
        HEAP8[buffer + i >> 0] = chr;
        i = i + 1;
    }
}
Module["writeStringToMemory"] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
    for (var i = 0; i < array.length; i++) {
        HEAP8[buffer++ >> 0] = array[i];
    }
}
Module["writeArrayToMemory"] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
    for (var i = 0; i < str.length; ++i) {
        HEAP8[buffer++ >> 0] = str.charCodeAt(i);
    }
    if (!dontAddNull)
        HEAP8[buffer >> 0] = 0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;
if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5)
    Math["imul"] = function imul(a, b) {
        var ah = a >>> 16;
        var al = a & 65535;
        var bh = b >>> 16;
        var bl = b & 65535;
        return al * bl + (ah * bl + al * bh << 16) | 0;
    };
Math.imul = Math["imul"];
if (!Math["clz32"])
    Math["clz32"] = function (x) {
        x = x >>> 0;
        for (var i = 0; i < 32; i++) {
            if (x & 1 << 31 - i)
                return i;
        }
        return 32;
    };
Math.clz32 = Math["clz32"];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
function getUniqueRunDependency(id) {
    return id;
}
function addRunDependency(id) {
    runDependencies++;
    if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
    }
}
Module["addRunDependency"] = addRunDependency;
function removeRunDependency(id) {
    runDependencies--;
    if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
    }
    if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null;
        }
        if (dependenciesFulfilled) {
            var callback = dependenciesFulfilled;
            dependenciesFulfilled = null;
            callback();
        }
    }
}
Module["removeRunDependency"] = removeRunDependency;
Module["preloadedImages"] = {};
Module["preloadedAudios"] = {};
var ASM_CONSTS = [];
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 23904;
__ATINIT__.push();
allocate([
    197,
    39,
    0,
    0,
    0,
    0,
    0,
    0,
    92,
    82,
    0,
    0,
    1,
    0,
    0,
    0,
    205,
    39,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    104,
    0,
    0,
    0,
    210,
    39,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    105,
    0,
    0,
    0,
    222,
    39,
    0,
    0,
    0,
    0,
    0,
    0,
    96,
    82,
    0,
    0,
    1,
    0,
    0,
    0,
    230,
    39,
    0,
    0,
    0,
    0,
    0,
    0,
    108,
    82,
    0,
    0,
    1,
    0,
    0,
    0,
    236,
    39,
    0,
    0,
    0,
    0,
    0,
    0,
    104,
    82,
    0,
    0,
    1,
    0,
    0,
    0,
    245,
    39,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    118,
    0,
    0,
    0,
    253,
    39,
    0,
    0,
    0,
    0,
    0,
    0,
    100,
    82,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    255,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    6,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    7,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    11,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    13,
    0,
    0,
    0,
    14,
    0,
    0,
    0,
    15,
    0,
    0,
    0,
    16,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    18,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    20,
    0,
    0,
    0,
    21,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    22,
    0,
    0,
    0,
    22,
    0,
    0,
    0,
    22,
    0,
    0,
    0,
    22,
    0,
    0,
    0,
    22,
    0,
    0,
    0,
    22,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    23,
    0,
    0,
    0,
    24,
    0,
    0,
    0,
    25,
    0,
    0,
    0,
    26,
    0,
    0,
    0,
    27,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    28,
    0,
    0,
    0,
    29,
    0,
    0,
    0,
    30,
    0,
    0,
    0,
    31,
    0,
    0,
    0,
    32,
    0,
    0,
    0,
    33,
    0,
    0,
    0,
    34,
    0,
    0,
    0,
    35,
    0,
    0,
    0,
    36,
    0,
    0,
    0,
    37,
    0,
    0,
    0,
    38,
    0,
    0,
    0,
    39,
    0,
    0,
    0,
    40,
    0,
    0,
    0,
    41,
    0,
    0,
    0,
    42,
    0,
    0,
    0,
    43,
    0,
    0,
    0,
    44,
    0,
    0,
    0,
    45,
    0,
    0,
    0,
    46,
    0,
    0,
    0,
    47,
    0,
    0,
    0,
    48,
    0,
    0,
    0,
    49,
    0,
    0,
    0,
    50,
    0,
    0,
    0,
    37,
    0,
    0,
    0,
    51,
    0,
    0,
    0,
    37,
    0,
    0,
    0,
    52,
    0,
    0,
    0,
    53,
    0,
    0,
    0,
    54,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    176,
    57,
    0,
    0,
    189,
    57,
    0,
    0,
    255,
    57,
    0,
    0,
    61,
    58,
    0,
    0,
    124,
    58,
    0,
    0,
    188,
    58,
    0,
    0,
    252,
    58,
    0,
    0,
    58,
    59,
    0,
    0,
    97,
    59,
    0,
    0,
    159,
    59,
    0,
    0,
    222,
    59,
    0,
    0,
    29,
    60,
    0,
    0,
    94,
    60,
    0,
    0,
    159,
    60,
    0,
    0,
    227,
    60,
    0,
    0,
    233,
    60,
    0,
    0,
    39,
    61,
    0,
    0,
    101,
    61,
    0,
    0,
    164,
    61,
    0,
    0,
    228,
    61,
    0,
    0,
    34,
    62,
    0,
    0,
    96,
    62,
    0,
    0,
    108,
    62,
    0,
    0,
    172,
    62,
    0,
    0,
    234,
    62,
    0,
    0,
    243,
    62,
    0,
    0,
    49,
    63,
    0,
    0,
    111,
    63,
    0,
    0,
    175,
    63,
    0,
    0,
    239,
    63,
    0,
    0,
    46,
    64,
    0,
    0,
    109,
    64,
    0,
    0,
    173,
    64,
    0,
    0,
    2,
    65,
    0,
    0,
    66,
    65,
    0,
    0,
    128,
    65,
    0,
    0,
    192,
    65,
    0,
    0,
    0,
    66,
    0,
    0,
    43,
    66,
    0,
    0,
    108,
    66,
    0,
    0,
    171,
    66,
    0,
    0,
    233,
    66,
    0,
    0,
    39,
    67,
    0,
    0,
    104,
    67,
    0,
    0,
    168,
    67,
    0,
    0,
    230,
    67,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    0,
    192,
    3,
    0,
    0,
    192,
    4,
    0,
    0,
    192,
    5,
    0,
    0,
    192,
    6,
    0,
    0,
    192,
    7,
    0,
    0,
    192,
    8,
    0,
    0,
    192,
    9,
    0,
    0,
    192,
    10,
    0,
    0,
    192,
    11,
    0,
    0,
    192,
    12,
    0,
    0,
    192,
    13,
    0,
    0,
    192,
    14,
    0,
    0,
    192,
    15,
    0,
    0,
    192,
    16,
    0,
    0,
    192,
    17,
    0,
    0,
    192,
    18,
    0,
    0,
    192,
    19,
    0,
    0,
    192,
    20,
    0,
    0,
    192,
    21,
    0,
    0,
    192,
    22,
    0,
    0,
    192,
    23,
    0,
    0,
    192,
    24,
    0,
    0,
    192,
    25,
    0,
    0,
    192,
    26,
    0,
    0,
    192,
    27,
    0,
    0,
    192,
    28,
    0,
    0,
    192,
    29,
    0,
    0,
    192,
    30,
    0,
    0,
    192,
    31,
    0,
    0,
    192,
    0,
    0,
    0,
    179,
    1,
    0,
    0,
    195,
    2,
    0,
    0,
    195,
    3,
    0,
    0,
    195,
    4,
    0,
    0,
    195,
    5,
    0,
    0,
    195,
    6,
    0,
    0,
    195,
    7,
    0,
    0,
    195,
    8,
    0,
    0,
    195,
    9,
    0,
    0,
    195,
    10,
    0,
    0,
    195,
    11,
    0,
    0,
    195,
    12,
    0,
    0,
    195,
    13,
    0,
    0,
    211,
    14,
    0,
    0,
    195,
    15,
    0,
    0,
    195,
    0,
    0,
    12,
    187,
    1,
    0,
    12,
    195,
    2,
    0,
    12,
    195,
    3,
    0,
    12,
    195,
    4,
    0,
    12,
    211,
    8,
    7,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    66,
    85,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    255,
    255,
    255,
    255,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    7,
    0,
    0,
    128,
    7,
    0,
    0,
    9,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    74,
    89,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    255,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    244,
    7,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    82,
    93,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    255,
    255,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    255,
    255,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    45,
    244,
    81,
    88,
    207,
    140,
    177,
    192,
    70,
    246,
    181,
    203,
    41,
    49,
    3,
    199,
    4,
    91,
    112,
    48,
    180,
    93,
    253,
    32,
    120,
    127,
    139,
    154,
    216,
    89,
    41,
    80,
    104,
    72,
    137,
    171,
    167,
    86,
    3,
    108,
    255,
    183,
    205,
    136,
    63,
    212,
    119,
    180,
    43,
    165,
    163,
    112,
    241,
    186,
    228,
    168,
    252,
    65,
    131,
    253,
    217,
    111,
    225,
    138,
    122,
    47,
    45,
    116,
    150,
    7,
    31,
    13,
    9,
    94,
    3,
    118,
    44,
    112,
    247,
    64,
    165,
    44,
    167,
    111,
    87,
    65,
    168,
    170,
    116,
    223,
    160,
    88,
    100,
    3,
    74,
    199,
    196,
    60,
    83,
    174,
    175,
    95,
    24,
    4,
    21,
    177,
    227,
    109,
    40,
    134,
    171,
    12,
    164,
    191,
    67,
    240,
    233,
    80,
    129,
    57,
    87,
    22,
    82,
    55,
    3,
    0,
    0,
    0,
    112,
    255,
    188,
    0,
    112,
    255,
    136,
    1,
    83,
    2,
    112,
    255,
    220,
    255,
    112,
    255,
    228,
    1,
    225,
    255,
    112,
    255,
    112,
    255,
    224,
    255,
    83,
    2,
    112,
    255,
    245,
    255,
    112,
    255,
    246,
    255,
    249,
    255,
    112,
    255,
    112,
    255,
    250,
    255,
    251,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    83,
    2,
    83,
    2,
    222,
    0,
    112,
    255,
    2,
    0,
    112,
    255,
    112,
    255,
    112,
    255,
    164,
    2,
    14,
    0,
    112,
    255,
    112,
    255,
    131,
    0,
    109,
    2,
    83,
    2,
    229,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    54,
    0,
    83,
    2,
    112,
    255,
    164,
    2,
    20,
    0,
    83,
    2,
    21,
    0,
    83,
    2,
    83,
    2,
    13,
    0,
    37,
    0,
    57,
    2,
    112,
    255,
    169,
    1,
    23,
    2,
    1,
    0,
    112,
    255,
    112,
    255,
    62,
    1,
    112,
    255,
    112,
    255,
    83,
    2,
    83,
    2,
    83,
    2,
    83,
    2,
    83,
    2,
    83,
    2,
    83,
    2,
    112,
    255,
    112,
    255,
    233,
    255,
    41,
    0,
    36,
    0,
    164,
    2,
    39,
    0,
    43,
    0,
    180,
    1,
    83,
    2,
    189,
    1,
    83,
    2,
    229,
    1,
    238,
    1,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    40,
    0,
    164,
    2,
    112,
    255,
    14,
    1,
    23,
    2,
    112,
    255,
    112,
    255,
    83,
    2,
    83,
    2,
    234,
    255,
    51,
    0,
    51,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    4,
    0,
    83,
    2,
    105,
    0,
    112,
    255,
    135,
    2,
    112,
    255,
    23,
    0,
    112,
    255,
    53,
    0,
    164,
    2,
    112,
    255,
    164,
    2,
    112,
    255,
    112,
    255,
    57,
    2,
    112,
    255,
    112,
    255,
    131,
    0,
    123,
    0,
    234,
    255,
    112,
    255,
    236,
    255,
    164,
    2,
    45,
    0,
    91,
    0,
    94,
    0,
    57,
    0,
    55,
    0,
    112,
    255,
    102,
    0,
    60,
    0,
    112,
    255,
    96,
    1,
    56,
    0,
    58,
    0,
    65,
    0,
    102,
    0,
    24,
    0,
    83,
    2,
    112,
    255,
    23,
    2,
    102,
    0,
    112,
    255,
    112,
    255,
    67,
    0,
    68,
    0,
    69,
    0,
    70,
    0,
    115,
    0,
    116,
    0,
    81,
    0,
    109,
    0,
    23,
    2,
    112,
    255,
    112,
    255,
    132,
    0,
    86,
    0,
    88,
    0,
    89,
    0,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    7,
    0,
    112,
    255,
    92,
    0,
    97,
    0,
    83,
    2,
    102,
    0,
    112,
    255,
    23,
    0,
    112,
    255,
    112,
    255,
    112,
    255,
    99,
    0,
    23,
    2,
    12,
    0,
    222,
    0,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    9,
    0,
    102,
    0,
    112,
    255,
    23,
    2,
    112,
    255,
    3,
    0,
    1,
    0,
    4,
    0,
    146,
    0,
    3,
    0,
    3,
    0,
    37,
    0,
    148,
    0,
    151,
    0,
    45,
    0,
    3,
    0,
    13,
    0,
    3,
    0,
    45,
    0,
    50,
    0,
    3,
    0,
    38,
    0,
    39,
    0,
    40,
    0,
    41,
    0,
    42,
    0,
    43,
    0,
    45,
    0,
    50,
    0,
    10,
    0,
    45,
    0,
    12,
    0,
    50,
    0,
    30,
    0,
    31,
    0,
    50,
    0,
    8,
    0,
    8,
    0,
    26,
    0,
    45,
    0,
    45,
    0,
    179,
    0,
    178,
    0,
    45,
    0,
    45,
    0,
    45,
    0,
    43,
    0,
    44,
    0,
    4,
    0,
    5,
    0,
    44,
    0,
    44,
    0,
    43,
    0,
    50,
    0,
    48,
    0,
    11,
    0,
    194,
    0,
    54,
    0,
    44,
    0,
    56,
    0,
    57,
    0,
    44,
    0,
    48,
    0,
    60,
    0,
    46,
    0,
    63,
    0,
    49,
    0,
    8,
    0,
    40,
    0,
    40,
    0,
    45,
    0,
    45,
    0,
    67,
    0,
    70,
    0,
    71,
    0,
    72,
    0,
    73,
    0,
    74,
    0,
    75,
    0,
    76,
    0,
    52,
    0,
    52,
    0,
    38,
    0,
    39,
    0,
    40,
    0,
    41,
    0,
    42,
    0,
    43,
    0,
    46,
    0,
    86,
    0,
    49,
    0,
    88,
    0,
    46,
    0,
    45,
    0,
    49,
    0,
    51,
    0,
    40,
    0,
    41,
    0,
    42,
    0,
    43,
    0,
    50,
    0,
    99,
    0,
    44,
    0,
    98,
    0,
    8,
    0,
    102,
    0,
    103,
    0,
    8,
    0,
    46,
    0,
    49,
    0,
    3,
    0,
    46,
    0,
    51,
    0,
    50,
    0,
    111,
    0,
    112,
    0,
    6,
    0,
    114,
    0,
    8,
    0,
    9,
    0,
    50,
    0,
    47,
    0,
    12,
    0,
    51,
    0,
    51,
    0,
    50,
    0,
    16,
    0,
    124,
    0,
    8,
    0,
    8,
    0,
    44,
    0,
    21,
    0,
    4,
    0,
    23,
    0,
    24,
    0,
    25,
    0,
    22,
    0,
    27,
    0,
    28,
    0,
    11,
    0,
    3,
    0,
    31,
    0,
    51,
    0,
    50,
    0,
    50,
    0,
    142,
    0,
    36,
    0,
    11,
    0,
    51,
    0,
    39,
    0,
    46,
    0,
    148,
    0,
    150,
    0,
    51,
    0,
    188,
    0,
    45,
    0,
    124,
    0,
    181,
    0,
    8,
    0,
    255,
    255,
    255,
    255,
    51,
    0,
    255,
    255,
    255,
    255,
    162,
    0,
    255,
    255,
    38,
    0,
    39,
    0,
    40,
    0,
    41,
    0,
    42,
    0,
    43,
    0,
    255,
    255,
    255,
    255,
    38,
    0,
    39,
    0,
    40,
    0,
    41,
    0,
    42,
    0,
    43,
    0,
    255,
    255,
    178,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    186,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    0,
    0,
    1,
    0,
    255,
    255,
    3,
    0,
    255,
    255,
    196,
    0,
    6,
    0,
    7,
    0,
    8,
    0,
    9,
    0,
    255,
    255,
    255,
    255,
    12,
    0,
    13,
    0,
    14,
    0,
    15,
    0,
    16,
    0,
    17,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    21,
    0,
    255,
    255,
    23,
    0,
    24,
    0,
    25,
    0,
    255,
    255,
    27,
    0,
    28,
    0,
    29,
    0,
    30,
    0,
    31,
    0,
    32,
    0,
    33,
    0,
    34,
    0,
    1,
    0,
    36,
    0,
    3,
    0,
    255,
    255,
    39,
    0,
    6,
    0,
    7,
    0,
    8,
    0,
    9,
    0,
    44,
    0,
    45,
    0,
    12,
    0,
    47,
    0,
    14,
    0,
    15,
    0,
    16,
    0,
    17,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    21,
    0,
    255,
    255,
    23,
    0,
    24,
    0,
    25,
    0,
    255,
    255,
    27,
    0,
    28,
    0,
    29,
    0,
    30,
    0,
    31,
    0,
    32,
    0,
    33,
    0,
    34,
    0,
    255,
    255,
    36,
    0,
    255,
    255,
    255,
    255,
    39,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    44,
    0,
    45,
    0,
    255,
    255,
    47,
    0,
    48,
    0,
    1,
    0,
    255,
    255,
    3,
    0,
    255,
    255,
    255,
    255,
    6,
    0,
    7,
    0,
    8,
    0,
    9,
    0,
    255,
    255,
    255,
    255,
    12,
    0,
    255,
    255,
    14,
    0,
    15,
    0,
    16,
    0,
    17,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    21,
    0,
    255,
    255,
    23,
    0,
    24,
    0,
    25,
    0,
    255,
    255,
    27,
    0,
    28,
    0,
    29,
    0,
    30,
    0,
    31,
    0,
    32,
    0,
    33,
    0,
    34,
    0,
    255,
    255,
    36,
    0,
    255,
    255,
    255,
    255,
    39,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    44,
    0,
    45,
    0,
    255,
    255,
    47,
    0,
    48,
    0,
    1,
    0,
    255,
    255,
    3,
    0,
    255,
    255,
    255,
    255,
    6,
    0,
    7,
    0,
    8,
    0,
    9,
    0,
    255,
    255,
    255,
    255,
    12,
    0,
    255,
    255,
    14,
    0,
    15,
    0,
    16,
    0,
    17,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    21,
    0,
    255,
    255,
    23,
    0,
    24,
    0,
    25,
    0,
    255,
    255,
    27,
    0,
    28,
    0,
    29,
    0,
    30,
    0,
    31,
    0,
    32,
    0,
    33,
    0,
    34,
    0,
    255,
    255,
    36,
    0,
    255,
    255,
    255,
    255,
    39,
    0,
    6,
    0,
    255,
    255,
    8,
    0,
    9,
    0,
    44,
    0,
    45,
    0,
    12,
    0,
    47,
    0,
    255,
    255,
    255,
    255,
    16,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    21,
    0,
    255,
    255,
    23,
    0,
    24,
    0,
    25,
    0,
    255,
    255,
    27,
    0,
    28,
    0,
    255,
    255,
    255,
    255,
    31,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    36,
    0,
    255,
    255,
    255,
    255,
    39,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    3,
    0,
    255,
    255,
    45,
    0,
    6,
    0,
    7,
    0,
    8,
    0,
    9,
    0,
    255,
    255,
    51,
    0,
    12,
    0,
    255,
    255,
    14,
    0,
    15,
    0,
    16,
    0,
    17,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    21,
    0,
    255,
    255,
    23,
    0,
    24,
    0,
    25,
    0,
    255,
    255,
    27,
    0,
    28,
    0,
    29,
    0,
    30,
    0,
    31,
    0,
    32,
    0,
    33,
    0,
    34,
    0,
    255,
    255,
    36,
    0,
    4,
    0,
    5,
    0,
    39,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    11,
    0,
    45,
    0,
    255,
    255,
    47,
    0,
    4,
    0,
    5,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    11,
    0,
    255,
    255,
    4,
    0,
    5,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    11,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    38,
    0,
    39,
    0,
    40,
    0,
    41,
    0,
    42,
    0,
    43,
    0,
    255,
    255,
    255,
    255,
    46,
    0,
    255,
    255,
    255,
    255,
    38,
    0,
    39,
    0,
    40,
    0,
    41,
    0,
    42,
    0,
    43,
    0,
    255,
    255,
    255,
    255,
    46,
    0,
    38,
    0,
    39,
    0,
    40,
    0,
    41,
    0,
    42,
    0,
    43,
    0,
    4,
    0,
    5,
    0,
    46,
    0,
    8,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    11,
    0,
    255,
    255,
    4,
    0,
    5,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    11,
    0,
    255,
    255,
    23,
    0,
    24,
    0,
    25,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    31,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    36,
    0,
    255,
    255,
    255,
    255,
    38,
    0,
    39,
    0,
    40,
    0,
    41,
    0,
    42,
    0,
    43,
    0,
    255,
    255,
    255,
    255,
    46,
    0,
    38,
    0,
    39,
    0,
    40,
    0,
    41,
    0,
    42,
    0,
    43,
    0,
    255,
    255,
    255,
    255,
    46,
    0,
    6,
    0,
    7,
    0,
    8,
    0,
    9,
    0,
    255,
    255,
    255,
    255,
    12,
    0,
    255,
    255,
    14,
    0,
    15,
    0,
    16,
    0,
    17,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    21,
    0,
    255,
    255,
    23,
    0,
    24,
    0,
    25,
    0,
    255,
    255,
    27,
    0,
    28,
    0,
    29,
    0,
    30,
    0,
    31,
    0,
    32,
    0,
    33,
    0,
    34,
    0,
    255,
    255,
    36,
    0,
    255,
    255,
    255,
    255,
    39,
    0,
    6,
    0,
    7,
    0,
    8,
    0,
    9,
    0,
    255,
    255,
    45,
    0,
    12,
    0,
    47,
    0,
    255,
    255,
    255,
    255,
    16,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    21,
    0,
    255,
    255,
    23,
    0,
    24,
    0,
    25,
    0,
    255,
    255,
    27,
    0,
    28,
    0,
    255,
    255,
    255,
    255,
    31,
    0,
    6,
    0,
    255,
    255,
    8,
    0,
    9,
    0,
    36,
    0,
    255,
    255,
    12,
    0,
    39,
    0,
    255,
    255,
    255,
    255,
    16,
    0,
    255,
    255,
    255,
    255,
    45,
    0,
    255,
    255,
    21,
    0,
    255,
    255,
    23,
    0,
    24,
    0,
    25,
    0,
    255,
    255,
    27,
    0,
    28,
    0,
    255,
    255,
    255,
    255,
    31,
    0,
    6,
    0,
    255,
    255,
    8,
    0,
    9,
    0,
    36,
    0,
    255,
    255,
    12,
    0,
    39,
    0,
    255,
    255,
    255,
    255,
    16,
    0,
    255,
    255,
    255,
    255,
    45,
    0,
    255,
    255,
    21,
    0,
    255,
    255,
    23,
    0,
    24,
    0,
    25,
    0,
    255,
    255,
    27,
    0,
    28,
    0,
    255,
    255,
    255,
    255,
    31,
    0,
    6,
    0,
    255,
    255,
    8,
    0,
    9,
    0,
    36,
    0,
    255,
    255,
    12,
    0,
    39,
    0,
    255,
    255,
    255,
    255,
    16,
    0,
    255,
    255,
    255,
    255,
    45,
    0,
    255,
    255,
    21,
    0,
    255,
    255,
    23,
    0,
    24,
    0,
    25,
    0,
    255,
    255,
    27,
    0,
    28,
    0,
    255,
    255,
    255,
    255,
    31,
    0,
    255,
    255,
    4,
    0,
    5,
    0,
    255,
    255,
    36,
    0,
    255,
    255,
    255,
    255,
    39,
    0,
    11,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    45,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    38,
    0,
    39,
    0,
    40,
    0,
    41,
    0,
    42,
    0,
    43,
    0,
    41,
    0,
    35,
    0,
    42,
    0,
    156,
    0,
    98,
    0,
    66,
    0,
    48,
    0,
    160,
    0,
    162,
    0,
    43,
    0,
    180,
    0,
    52,
    0,
    98,
    0,
    50,
    0,
    44,
    0,
    191,
    0,
    71,
    0,
    72,
    0,
    73,
    0,
    74,
    0,
    75,
    0,
    76,
    0,
    43,
    0,
    44,
    0,
    77,
    0,
    43,
    0,
    78,
    0,
    112,
    0,
    61,
    0,
    62,
    0,
    142,
    0,
    133,
    0,
    157,
    0,
    181,
    0,
    54,
    0,
    56,
    0,
    186,
    0,
    185,
    0,
    57,
    0,
    58,
    0,
    59,
    0,
    82,
    0,
    83,
    0,
    68,
    0,
    69,
    0,
    99,
    0,
    67,
    0,
    76,
    0,
    85,
    0,
    100,
    0,
    70,
    0,
    196,
    0,
    87,
    0,
    99,
    0,
    89,
    0,
    90,
    0,
    192,
    0,
    195,
    0,
    96,
    0,
    91,
    0,
    41,
    0,
    147,
    0,
    84,
    0,
    134,
    0,
    158,
    0,
    86,
    0,
    88,
    0,
    101,
    0,
    104,
    0,
    105,
    0,
    106,
    0,
    107,
    0,
    108,
    0,
    109,
    0,
    110,
    0,
    135,
    0,
    159,
    0,
    71,
    0,
    72,
    0,
    73,
    0,
    74,
    0,
    75,
    0,
    76,
    0,
    92,
    0,
    119,
    0,
    114,
    0,
    121,
    0,
    113,
    0,
    116,
    0,
    124,
    0,
    115,
    0,
    73,
    0,
    74,
    0,
    75,
    0,
    76,
    0,
    143,
    0,
    126,
    0,
    138,
    0,
    125,
    0,
    144,
    0,
    127,
    0,
    128,
    0,
    145,
    0,
    146,
    0,
    147,
    0,
    149,
    0,
    151,
    0,
    153,
    0,
    154,
    0,
    129,
    0,
    83,
    0,
    4,
    0,
    132,
    0,
    6,
    0,
    7,
    0,
    155,
    0,
    165,
    0,
    8,
    0,
    163,
    0,
    164,
    0,
    166,
    0,
    12,
    0,
    96,
    0,
    167,
    0,
    168,
    0,
    169,
    0,
    17,
    0,
    68,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    170,
    0,
    21,
    0,
    22,
    0,
    70,
    0,
    173,
    0,
    25,
    0,
    175,
    0,
    176,
    0,
    177,
    0,
    83,
    0,
    29,
    0,
    70,
    0,
    183,
    0,
    30,
    0,
    189,
    0,
    119,
    0,
    161,
    0,
    184,
    0,
    193,
    0,
    31,
    0,
    141,
    0,
    187,
    0,
    47,
    0,
    0,
    0,
    0,
    0,
    130,
    0,
    0,
    0,
    0,
    0,
    172,
    0,
    0,
    0,
    71,
    0,
    72,
    0,
    73,
    0,
    74,
    0,
    75,
    0,
    76,
    0,
    0,
    0,
    0,
    0,
    71,
    0,
    72,
    0,
    73,
    0,
    74,
    0,
    75,
    0,
    76,
    0,
    0,
    0,
    119,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    190,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    3,
    0,
    0,
    0,
    247,
    255,
    0,
    0,
    197,
    0,
    4,
    0,
    5,
    0,
    6,
    0,
    7,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    9,
    0,
    10,
    0,
    11,
    0,
    12,
    0,
    13,
    0,
    14,
    0,
    15,
    0,
    16,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    0,
    0,
    21,
    0,
    22,
    0,
    23,
    0,
    24,
    0,
    25,
    0,
    26,
    0,
    27,
    0,
    28,
    0,
    63,
    0,
    29,
    0,
    243,
    255,
    0,
    0,
    30,
    0,
    4,
    0,
    5,
    0,
    6,
    0,
    7,
    0,
    247,
    255,
    31,
    0,
    8,
    0,
    32,
    0,
    10,
    0,
    11,
    0,
    12,
    0,
    13,
    0,
    14,
    0,
    15,
    0,
    16,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    0,
    0,
    21,
    0,
    22,
    0,
    23,
    0,
    24,
    0,
    25,
    0,
    26,
    0,
    27,
    0,
    28,
    0,
    0,
    0,
    29,
    0,
    0,
    0,
    0,
    0,
    30,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    243,
    255,
    31,
    0,
    0,
    0,
    32,
    0,
    243,
    255,
    63,
    0,
    0,
    0,
    241,
    255,
    0,
    0,
    0,
    0,
    4,
    0,
    5,
    0,
    6,
    0,
    7,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    10,
    0,
    11,
    0,
    12,
    0,
    13,
    0,
    14,
    0,
    15,
    0,
    16,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    0,
    0,
    21,
    0,
    22,
    0,
    23,
    0,
    24,
    0,
    25,
    0,
    26,
    0,
    27,
    0,
    28,
    0,
    0,
    0,
    29,
    0,
    0,
    0,
    0,
    0,
    30,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    241,
    255,
    31,
    0,
    0,
    0,
    32,
    0,
    241,
    255,
    63,
    0,
    0,
    0,
    244,
    255,
    0,
    0,
    0,
    0,
    4,
    0,
    5,
    0,
    6,
    0,
    7,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    10,
    0,
    11,
    0,
    12,
    0,
    13,
    0,
    14,
    0,
    15,
    0,
    16,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    0,
    0,
    21,
    0,
    22,
    0,
    23,
    0,
    24,
    0,
    25,
    0,
    26,
    0,
    27,
    0,
    28,
    0,
    0,
    0,
    29,
    0,
    0,
    0,
    0,
    0,
    30,
    0,
    4,
    0,
    0,
    0,
    6,
    0,
    7,
    0,
    244,
    255,
    31,
    0,
    8,
    0,
    32,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    0,
    0,
    21,
    0,
    22,
    0,
    0,
    0,
    0,
    0,
    25,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    29,
    0,
    0,
    0,
    0,
    0,
    30,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    40,
    0,
    0,
    0,
    31,
    0,
    4,
    0,
    5,
    0,
    6,
    0,
    7,
    0,
    0,
    0,
    152,
    0,
    8,
    0,
    0,
    0,
    10,
    0,
    11,
    0,
    12,
    0,
    13,
    0,
    14,
    0,
    15,
    0,
    16,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    0,
    0,
    21,
    0,
    22,
    0,
    23,
    0,
    24,
    0,
    25,
    0,
    26,
    0,
    27,
    0,
    28,
    0,
    0,
    0,
    29,
    0,
    68,
    0,
    69,
    0,
    30,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    70,
    0,
    31,
    0,
    0,
    0,
    32,
    0,
    68,
    0,
    69,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    70,
    0,
    0,
    0,
    68,
    0,
    69,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    70,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    71,
    0,
    72,
    0,
    73,
    0,
    74,
    0,
    75,
    0,
    76,
    0,
    0,
    0,
    0,
    0,
    97,
    0,
    0,
    0,
    0,
    0,
    71,
    0,
    72,
    0,
    73,
    0,
    74,
    0,
    75,
    0,
    76,
    0,
    0,
    0,
    0,
    0,
    117,
    0,
    71,
    0,
    72,
    0,
    73,
    0,
    74,
    0,
    75,
    0,
    76,
    0,
    68,
    0,
    69,
    0,
    120,
    0,
    45,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    70,
    0,
    0,
    0,
    68,
    0,
    69,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    70,
    0,
    0,
    0,
    46,
    0,
    19,
    0,
    20,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    25,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    29,
    0,
    0,
    0,
    0,
    0,
    71,
    0,
    72,
    0,
    73,
    0,
    74,
    0,
    75,
    0,
    76,
    0,
    0,
    0,
    0,
    0,
    122,
    0,
    71,
    0,
    72,
    0,
    73,
    0,
    74,
    0,
    75,
    0,
    76,
    0,
    0,
    0,
    0,
    0,
    123,
    0,
    4,
    0,
    5,
    0,
    6,
    0,
    7,
    0,
    0,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    10,
    0,
    11,
    0,
    12,
    0,
    13,
    0,
    14,
    0,
    15,
    0,
    16,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    0,
    0,
    21,
    0,
    22,
    0,
    23,
    0,
    24,
    0,
    25,
    0,
    26,
    0,
    27,
    0,
    28,
    0,
    0,
    0,
    29,
    0,
    0,
    0,
    0,
    0,
    30,
    0,
    4,
    0,
    93,
    0,
    6,
    0,
    7,
    0,
    0,
    0,
    31,
    0,
    8,
    0,
    32,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    0,
    0,
    21,
    0,
    22,
    0,
    0,
    0,
    0,
    0,
    25,
    0,
    4,
    0,
    0,
    0,
    6,
    0,
    7,
    0,
    29,
    0,
    0,
    0,
    8,
    0,
    30,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    0,
    31,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    0,
    0,
    21,
    0,
    22,
    0,
    0,
    0,
    0,
    0,
    25,
    0,
    4,
    0,
    0,
    0,
    79,
    0,
    7,
    0,
    29,
    0,
    0,
    0,
    8,
    0,
    30,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    0,
    31,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    0,
    0,
    21,
    0,
    22,
    0,
    0,
    0,
    0,
    0,
    25,
    0,
    4,
    0,
    0,
    0,
    131,
    0,
    7,
    0,
    29,
    0,
    0,
    0,
    8,
    0,
    30,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    0,
    31,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    0,
    0,
    21,
    0,
    22,
    0,
    0,
    0,
    0,
    0,
    25,
    0,
    0,
    0,
    68,
    0,
    69,
    0,
    0,
    0,
    29,
    0,
    0,
    0,
    0,
    0,
    30,
    0,
    70,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    31,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    71,
    0,
    72,
    0,
    73,
    0,
    74,
    0,
    75,
    0,
    76,
    0,
    112,
    255,
    112,
    255,
    112,
    255,
    113,
    255,
    112,
    255,
    217,
    255,
    0,
    0,
    253,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    27,
    0,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    227,
    255,
    112,
    255,
    112,
    255,
    115,
    255,
    112,
    255,
    254,
    255,
    112,
    255,
    112,
    255,
    112,
    255,
    145,
    0,
    112,
    255,
    255,
    255,
    1,
    0,
    33,
    0,
    150,
    0,
    34,
    0,
    64,
    0,
    65,
    0,
    36,
    0,
    53,
    0,
    148,
    0,
    178,
    0,
    194,
    0,
    139,
    0,
    55,
    0,
    140,
    0,
    60,
    0,
    94,
    0,
    95,
    0,
    171,
    0,
    179,
    0,
    37,
    0,
    188,
    0,
    49,
    0,
    136,
    0,
    182,
    0,
    137,
    0,
    80,
    0,
    81,
    0,
    118,
    0,
    51,
    0,
    38,
    0,
    111,
    0,
    102,
    0,
    103,
    0,
    39,
    0,
    174,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    47,
    0,
    45,
    0,
    40,
    0,
    38,
    0,
    32,
    0,
    45,
    0,
    1,
    0,
    33,
    0,
    33,
    0,
    29,
    0,
    33,
    0,
    29,
    0,
    29,
    0,
    28,
    0,
    33,
    0,
    44,
    0,
    36,
    0,
    34,
    0,
    36,
    0,
    45,
    0,
    29,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    45,
    0,
    2,
    0,
    2,
    0,
    3,
    0,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    40,
    0,
    36,
    0,
    0,
    0,
    43,
    0,
    34,
    0,
    30,
    0,
    37,
    0,
    44,
    0,
    0,
    0,
    41,
    0,
    44,
    0,
    44,
    0,
    0,
    0,
    35,
    0,
    39,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    10,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    31,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    44,
    0,
    0,
    0,
    0,
    0,
    44,
    0,
    0,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    9,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    16,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    17,
    0,
    20,
    0,
    42,
    0,
    42,
    0,
    21,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    6,
    0,
    42,
    0,
    18,
    0,
    42,
    0,
    42,
    0,
    12,
    0,
    22,
    0,
    42,
    0,
    42,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    5,
    0,
    42,
    0,
    42,
    0,
    42,
    0,
    14,
    0,
    42,
    0,
    42,
    0,
    15,
    0,
    26,
    0,
    42,
    0,
    42,
    0,
    13,
    0,
    42,
    0,
    11,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    42,
    0,
    4,
    0,
    42,
    0,
    7,
    0,
    27,
    0,
    19,
    0,
    8,
    0,
    42,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    42,
    0,
    23,
    0,
    42,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    25,
    0,
    24,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    54,
    0,
    0,
    0,
    41,
    2,
    42,
    2,
    38,
    2,
    42,
    2,
    19,
    2,
    33,
    2,
    42,
    2,
    17,
    2,
    28,
    2,
    42,
    2,
    15,
    2,
    97,
    0,
    96,
    0,
    96,
    0,
    101,
    0,
    107,
    0,
    14,
    2,
    116,
    0,
    13,
    2,
    29,
    2,
    11,
    2,
    238,
    1,
    240,
    1,
    242,
    1,
    251,
    1,
    243,
    1,
    239,
    1,
    0,
    0,
    83,
    0,
    104,
    0,
    107,
    0,
    251,
    1,
    234,
    1,
    230,
    1,
    106,
    0,
    96,
    0,
    235,
    1,
    113,
    0,
    223,
    1,
    0,
    0,
    17,
    2,
    42,
    2,
    254,
    1,
    141,
    0,
    0,
    0,
    253,
    1,
    8,
    2,
    0,
    0,
    251,
    1,
    133,
    0,
    135,
    0,
    130,
    0,
    139,
    0,
    141,
    0,
    250,
    1,
    150,
    0,
    249,
    1,
    9,
    2,
    247,
    1,
    160,
    0,
    123,
    0,
    125,
    0,
    137,
    0,
    112,
    0,
    130,
    0,
    218,
    1,
    184,
    0,
    185,
    0,
    187,
    0,
    188,
    0,
    134,
    0,
    217,
    1,
    193,
    0,
    183,
    0,
    132,
    0,
    194,
    0,
    211,
    1,
    5,
    2,
    42,
    2,
    1,
    2,
    42,
    2,
    42,
    2,
    42,
    2,
    42,
    2,
    221,
    0,
    2,
    2,
    42,
    2,
    222,
    0,
    232,
    0,
    1,
    2,
    42,
    2,
    42,
    2,
    0,
    0,
    212,
    1,
    226,
    1,
    216,
    1,
    223,
    1,
    209,
    1,
    209,
    1,
    214,
    1,
    206,
    1,
    223,
    1,
    0,
    0,
    204,
    1,
    208,
    1,
    208,
    1,
    219,
    1,
    210,
    1,
    209,
    1,
    203,
    1,
    206,
    0,
    215,
    1,
    197,
    1,
    205,
    1,
    195,
    1,
    203,
    1,
    42,
    2,
    0,
    0,
    236,
    1,
    0,
    0,
    178,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    233,
    0,
    234,
    1,
    0,
    0,
    241,
    0,
    244,
    0,
    233,
    1,
    0,
    0,
    187,
    1,
    67,
    0,
    192,
    0,
    189,
    0,
    219,
    0,
    138,
    0,
    203,
    0,
    221,
    0,
    180,
    0,
    234,
    0,
    186,
    1,
    224,
    0,
    223,
    0,
    233,
    0,
    246,
    0,
    239,
    0,
    240,
    0,
    236,
    0,
    250,
    0,
    251,
    0,
    235,
    0,
    253,
    0,
    245,
    0,
    255,
    0,
    0,
    0,
    22,
    1,
    230,
    1,
    31,
    1,
    32,
    1,
    229,
    1,
    189,
    1,
    202,
    1,
    182,
    1,
    192,
    1,
    195,
    1,
    0,
    0,
    179,
    1,
    178,
    1,
    178,
    1,
    176,
    1,
    188,
    1,
    185,
    1,
    174,
    1,
    178,
    1,
    171,
    1,
    186,
    1,
    185,
    1,
    167,
    1,
    175,
    1,
    166,
    1,
    181,
    1,
    166,
    1,
    171,
    1,
    35,
    1,
    206,
    1,
    41,
    1,
    205,
    1,
    244,
    0,
    12,
    1,
    3,
    1,
    25,
    1,
    30,
    1,
    159,
    1,
    19,
    1,
    21,
    1,
    24,
    1,
    27,
    1,
    37,
    1,
    28,
    1,
    31,
    1,
    39,
    1,
    34,
    1,
    52,
    1,
    53,
    1,
    158,
    1,
    47,
    1,
    41,
    1,
    59,
    1,
    46,
    1,
    54,
    1,
    0,
    0,
    167,
    1,
    168,
    1,
    162,
    1,
    0,
    0,
    0,
    0,
    160,
    1,
    169,
    1,
    0,
    0,
    153,
    1,
    152,
    1,
    166,
    1,
    150,
    1,
    0,
    0,
    154,
    1,
    0,
    0,
    150,
    1,
    162,
    1,
    0,
    0,
    0,
    0,
    165,
    1,
    160,
    1,
    143,
    1,
    58,
    1,
    56,
    1,
    57,
    1,
    142,
    1,
    141,
    1,
    55,
    1,
    67,
    1,
    140,
    1,
    61,
    1,
    63,
    1,
    80,
    1,
    66,
    1,
    139,
    1,
    74,
    1,
    138,
    1,
    72,
    1,
    86,
    1,
    137,
    1,
    136,
    1,
    91,
    1,
    89,
    1,
    0,
    0,
    142,
    1,
    150,
    1,
    136,
    1,
    0,
    0,
    145,
    1,
    133,
    1,
    0,
    0,
    0,
    0,
    138,
    1,
    136,
    1,
    0,
    0,
    135,
    1,
    0,
    0,
    127,
    1,
    82,
    1,
    92,
    1,
    81,
    1,
    126,
    1,
    90,
    1,
    85,
    1,
    125,
    1,
    124,
    1,
    87,
    1,
    95,
    1,
    123,
    1,
    100,
    1,
    122,
    1,
    117,
    1,
    0,
    0,
    108,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    111,
    1,
    109,
    1,
    108,
    1,
    94,
    1,
    107,
    1,
    106,
    1,
    105,
    1,
    103,
    1,
    99,
    1,
    118,
    1,
    0,
    0,
    81,
    1,
    112,
    1,
    237,
    0,
    101,
    1,
    0,
    0,
    0,
    0,
    168,
    0,
    127,
    0,
    42,
    2,
    160,
    1,
    122,
    0,
    163,
    1,
    166,
    1,
    0,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    3,
    0,
    16,
    0,
    17,
    0,
    33,
    0,
    19,
    0,
    18,
    0,
    138,
    0,
    138,
    0,
    17,
    0,
    16,
    0,
    18,
    0,
    33,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    22,
    0,
    20,
    0,
    61,
    1,
    40,
    0,
    22,
    0,
    22,
    0,
    20,
    0,
    22,
    0,
    20,
    0,
    22,
    0,
    34,
    0,
    39,
    0,
    35,
    0,
    22,
    0,
    34,
    0,
    39,
    0,
    35,
    0,
    40,
    0,
    42,
    0,
    22,
    0,
    35,
    0,
    48,
    0,
    54,
    0,
    48,
    0,
    56,
    0,
    42,
    0,
    55,
    0,
    57,
    0,
    68,
    0,
    56,
    0,
    54,
    0,
    56,
    0,
    55,
    0,
    58,
    0,
    60,
    0,
    58,
    0,
    57,
    0,
    68,
    0,
    60,
    0,
    60,
    0,
    58,
    0,
    60,
    0,
    58,
    0,
    60,
    0,
    66,
    0,
    65,
    0,
    67,
    0,
    60,
    0,
    65,
    0,
    69,
    0,
    66,
    0,
    79,
    0,
    58,
    1,
    60,
    0,
    64,
    0,
    69,
    0,
    75,
    0,
    79,
    0,
    125,
    0,
    75,
    0,
    125,
    0,
    142,
    0,
    67,
    0,
    142,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    71,
    0,
    78,
    0,
    72,
    0,
    73,
    0,
    57,
    1,
    74,
    0,
    72,
    0,
    73,
    0,
    71,
    0,
    77,
    0,
    80,
    0,
    73,
    0,
    139,
    0,
    77,
    0,
    145,
    0,
    78,
    0,
    145,
    0,
    80,
    0,
    140,
    0,
    78,
    0,
    71,
    0,
    72,
    0,
    115,
    0,
    73,
    0,
    74,
    0,
    140,
    0,
    89,
    0,
    92,
    0,
    139,
    0,
    77,
    0,
    80,
    0,
    89,
    0,
    92,
    0,
    89,
    0,
    92,
    0,
    93,
    0,
    143,
    0,
    93,
    0,
    130,
    0,
    143,
    0,
    141,
    0,
    115,
    0,
    93,
    0,
    130,
    0,
    93,
    0,
    130,
    0,
    133,
    0,
    134,
    0,
    144,
    0,
    134,
    0,
    146,
    0,
    133,
    0,
    149,
    0,
    133,
    0,
    134,
    0,
    141,
    0,
    134,
    0,
    144,
    0,
    148,
    0,
    149,
    0,
    148,
    0,
    150,
    0,
    151,
    0,
    152,
    0,
    153,
    0,
    154,
    0,
    155,
    0,
    156,
    0,
    157,
    0,
    150,
    0,
    146,
    0,
    157,
    0,
    154,
    0,
    53,
    1,
    194,
    0,
    152,
    0,
    153,
    0,
    158,
    0,
    159,
    0,
    160,
    0,
    194,
    0,
    159,
    0,
    151,
    0,
    162,
    0,
    195,
    0,
    155,
    0,
    155,
    0,
    156,
    0,
    162,
    0,
    158,
    0,
    162,
    0,
    160,
    0,
    164,
    0,
    165,
    0,
    196,
    0,
    196,
    0,
    190,
    0,
    164,
    0,
    165,
    0,
    164,
    0,
    165,
    0,
    190,
    0,
    192,
    0,
    190,
    0,
    195,
    0,
    197,
    0,
    198,
    0,
    192,
    0,
    205,
    0,
    192,
    0,
    200,
    0,
    200,
    0,
    201,
    0,
    201,
    0,
    202,
    0,
    204,
    0,
    202,
    0,
    197,
    0,
    203,
    0,
    203,
    0,
    205,
    0,
    206,
    0,
    198,
    0,
    206,
    0,
    207,
    0,
    208,
    0,
    208,
    0,
    209,
    0,
    210,
    0,
    204,
    0,
    212,
    0,
    207,
    0,
    213,
    0,
    213,
    0,
    214,
    0,
    215,
    0,
    241,
    0,
    216,
    0,
    215,
    0,
    212,
    0,
    240,
    0,
    245,
    0,
    242,
    0,
    246,
    0,
    209,
    0,
    210,
    0,
    216,
    0,
    245,
    0,
    241,
    0,
    242,
    0,
    240,
    0,
    214,
    0,
    248,
    0,
    248,
    0,
    249,
    0,
    249,
    0,
    250,
    0,
    251,
    0,
    251,
    0,
    246,
    0,
    253,
    0,
    255,
    0,
    0,
    1,
    3,
    1,
    255,
    0,
    4,
    1,
    253,
    0,
    20,
    1,
    21,
    1,
    24,
    1,
    22,
    1,
    28,
    1,
    250,
    0,
    22,
    1,
    20,
    1,
    25,
    1,
    51,
    1,
    25,
    1,
    0,
    1,
    28,
    1,
    29,
    1,
    4,
    1,
    24,
    1,
    3,
    1,
    21,
    1,
    31,
    1,
    43,
    1,
    29,
    1,
    52,
    1,
    43,
    1,
    48,
    1,
    48,
    1,
    31,
    1,
    54,
    1,
    49,
    1,
    47,
    1,
    54,
    1,
    46,
    1,
    45,
    1,
    44,
    1,
    42,
    1,
    41,
    1,
    40,
    1,
    35,
    1,
    52,
    1,
    60,
    1,
    60,
    1,
    60,
    1,
    62,
    1,
    33,
    1,
    62,
    1,
    63,
    1,
    63,
    1,
    63,
    1,
    32,
    1,
    30,
    1,
    27,
    1,
    26,
    1,
    23,
    1,
    19,
    1,
    17,
    1,
    15,
    1,
    14,
    1,
    11,
    1,
    10,
    1,
    8,
    1,
    7,
    1,
    6,
    1,
    2,
    1,
    1,
    1,
    254,
    0,
    252,
    0,
    247,
    0,
    244,
    0,
    243,
    0,
    239,
    0,
    238,
    0,
    237,
    0,
    234,
    0,
    233,
    0,
    231,
    0,
    229,
    0,
    228,
    0,
    227,
    0,
    226,
    0,
    224,
    0,
    223,
    0,
    220,
    0,
    219,
    0,
    218,
    0,
    211,
    0,
    199,
    0,
    193,
    0,
    191,
    0,
    189,
    0,
    188,
    0,
    187,
    0,
    186,
    0,
    185,
    0,
    184,
    0,
    183,
    0,
    182,
    0,
    181,
    0,
    180,
    0,
    179,
    0,
    178,
    0,
    177,
    0,
    176,
    0,
    175,
    0,
    174,
    0,
    173,
    0,
    171,
    0,
    170,
    0,
    169,
    0,
    168,
    0,
    167,
    0,
    166,
    0,
    163,
    0,
    147,
    0,
    137,
    0,
    135,
    0,
    131,
    0,
    123,
    0,
    120,
    0,
    119,
    0,
    118,
    0,
    117,
    0,
    116,
    0,
    114,
    0,
    113,
    0,
    112,
    0,
    111,
    0,
    110,
    0,
    109,
    0,
    108,
    0,
    106,
    0,
    105,
    0,
    104,
    0,
    103,
    0,
    102,
    0,
    101,
    0,
    100,
    0,
    99,
    0,
    98,
    0,
    94,
    0,
    90,
    0,
    84,
    0,
    82,
    0,
    81,
    0,
    76,
    0,
    70,
    0,
    63,
    0,
    62,
    0,
    61,
    0,
    59,
    0,
    53,
    0,
    51,
    0,
    50,
    0,
    47,
    0,
    45,
    0,
    43,
    0,
    41,
    0,
    38,
    0,
    37,
    0,
    36,
    0,
    31,
    0,
    30,
    0,
    29,
    0,
    28,
    0,
    27,
    0,
    26,
    0,
    25,
    0,
    24,
    0,
    23,
    0,
    21,
    0,
    15,
    0,
    13,
    0,
    12,
    0,
    10,
    0,
    9,
    0,
    7,
    0,
    5,
    0,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    0,
    0,
    59,
    1,
    1,
    0,
    59,
    1,
    3,
    0,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    60,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    59,
    1,
    62,
    1,
    62,
    1,
    59,
    1,
    62,
    1,
    63,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    62,
    1,
    59,
    1,
    59,
    1,
    60,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    59,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    63,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    62,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    62,
    1,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    61,
    1,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    64,
    0,
    61,
    1,
    61,
    1,
    61,
    1,
    64,
    0,
    64,
    0,
    64,
    0,
    61,
    1,
    61,
    1,
    64,
    0,
    64,
    0,
    0,
    0,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    0,
    0,
    6,
    0,
    7,
    0,
    8,
    0,
    9,
    0,
    10,
    0,
    11,
    0,
    12,
    0,
    13,
    0,
    14,
    0,
    14,
    0,
    15,
    0,
    16,
    0,
    14,
    0,
    17,
    0,
    18,
    0,
    19,
    0,
    20,
    0,
    14,
    0,
    21,
    0,
    22,
    0,
    23,
    0,
    20,
    0,
    14,
    0,
    24,
    0,
    14,
    0,
    25,
    0,
    6,
    0,
    26,
    0,
    27,
    0,
    28,
    0,
    29,
    0,
    30,
    0,
    31,
    0,
    32,
    0,
    33,
    0,
    34,
    0,
    32,
    0,
    32,
    0,
    35,
    0,
    32,
    0,
    32,
    0,
    36,
    0,
    37,
    0,
    38,
    0,
    39,
    0,
    40,
    0,
    32,
    0,
    32,
    0,
    41,
    0,
    42,
    0,
    32,
    0,
    14,
    0,
    43,
    0,
    14,
    0,
    44,
    0,
    45,
    0,
    46,
    0,
    47,
    0,
    48,
    0,
    49,
    0,
    50,
    0,
    51,
    0,
    52,
    0,
    52,
    0,
    53,
    0,
    54,
    0,
    52,
    0,
    55,
    0,
    56,
    0,
    57,
    0,
    58,
    0,
    52,
    0,
    59,
    0,
    60,
    0,
    61,
    0,
    58,
    0,
    52,
    0,
    62,
    0,
    52,
    0,
    63,
    0,
    44,
    0,
    64,
    0,
    65,
    0,
    66,
    0,
    67,
    0,
    68,
    0,
    69,
    0,
    70,
    0,
    71,
    0,
    72,
    0,
    70,
    0,
    70,
    0,
    73,
    0,
    70,
    0,
    70,
    0,
    74,
    0,
    75,
    0,
    76,
    0,
    77,
    0,
    78,
    0,
    70,
    0,
    70,
    0,
    79,
    0,
    80,
    0,
    70,
    0,
    52,
    0,
    81,
    0,
    52,
    0,
    88,
    0,
    88,
    0,
    104,
    0,
    91,
    0,
    89,
    0,
    194,
    0,
    137,
    0,
    86,
    0,
    86,
    0,
    89,
    0,
    105,
    0,
    90,
    0,
    86,
    0,
    92,
    0,
    95,
    0,
    93,
    0,
    97,
    0,
    116,
    0,
    95,
    0,
    95,
    0,
    93,
    0,
    95,
    0,
    94,
    0,
    95,
    0,
    106,
    0,
    114,
    0,
    108,
    0,
    83,
    0,
    107,
    0,
    115,
    0,
    109,
    0,
    117,
    0,
    119,
    0,
    95,
    0,
    110,
    0,
    84,
    0,
    129,
    0,
    126,
    0,
    130,
    0,
    120,
    0,
    129,
    0,
    132,
    0,
    142,
    0,
    130,
    0,
    127,
    0,
    131,
    0,
    127,
    0,
    133,
    0,
    136,
    0,
    134,
    0,
    127,
    0,
    137,
    0,
    136,
    0,
    136,
    0,
    134,
    0,
    136,
    0,
    135,
    0,
    136,
    0,
    140,
    0,
    139,
    0,
    141,
    0,
    124,
    0,
    137,
    0,
    143,
    0,
    137,
    0,
    158,
    0,
    137,
    0,
    136,
    0,
    137,
    0,
    137,
    0,
    152,
    0,
    137,
    0,
    84,
    0,
    137,
    0,
    126,
    0,
    198,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    138,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    144,
    0,
    156,
    0,
    146,
    0,
    148,
    0,
    137,
    0,
    151,
    0,
    147,
    0,
    149,
    0,
    145,
    0,
    154,
    0,
    159,
    0,
    150,
    0,
    195,
    0,
    155,
    0,
    201,
    0,
    157,
    0,
    137,
    0,
    160,
    0,
    196,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    183,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    162,
    0,
    165,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    162,
    0,
    165,
    0,
    163,
    0,
    166,
    0,
    92,
    0,
    199,
    0,
    93,
    0,
    190,
    0,
    137,
    0,
    197,
    0,
    184,
    0,
    93,
    0,
    190,
    0,
    94,
    0,
    191,
    0,
    192,
    0,
    133,
    0,
    200,
    0,
    134,
    0,
    202,
    0,
    192,
    0,
    204,
    0,
    193,
    0,
    134,
    0,
    137,
    0,
    135,
    0,
    137,
    0,
    203,
    0,
    137,
    0,
    137,
    0,
    205,
    0,
    206,
    0,
    207,
    0,
    208,
    0,
    209,
    0,
    210,
    0,
    212,
    0,
    213,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    239,
    0,
    137,
    0,
    137,
    0,
    214,
    0,
    215,
    0,
    216,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    162,
    0,
    240,
    0,
    211,
    0,
    137,
    0,
    137,
    0,
    162,
    0,
    137,
    0,
    163,
    0,
    137,
    0,
    89,
    0,
    165,
    0,
    241,
    0,
    137,
    0,
    190,
    0,
    89,
    0,
    165,
    0,
    90,
    0,
    166,
    0,
    190,
    0,
    192,
    0,
    191,
    0,
    137,
    0,
    242,
    0,
    243,
    0,
    192,
    0,
    249,
    0,
    193,
    0,
    244,
    0,
    137,
    0,
    245,
    0,
    137,
    0,
    246,
    0,
    248,
    0,
    137,
    0,
    137,
    0,
    247,
    0,
    137,
    0,
    137,
    0,
    250,
    0,
    137,
    0,
    137,
    0,
    251,
    0,
    252,
    0,
    137,
    0,
    253,
    0,
    254,
    0,
    137,
    0,
    0,
    1,
    137,
    0,
    1,
    1,
    137,
    0,
    2,
    1,
    3,
    1,
    20,
    1,
    4,
    1,
    137,
    0,
    137,
    0,
    19,
    1,
    22,
    1,
    21,
    1,
    23,
    1,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    24,
    1,
    137,
    0,
    25,
    1,
    137,
    0,
    26,
    1,
    27,
    1,
    137,
    0,
    137,
    0,
    28,
    1,
    29,
    1,
    30,
    1,
    31,
    1,
    137,
    0,
    32,
    1,
    137,
    0,
    41,
    1,
    42,
    1,
    44,
    1,
    43,
    1,
    46,
    1,
    137,
    0,
    137,
    0,
    137,
    0,
    45,
    1,
    56,
    1,
    137,
    0,
    137,
    0,
    137,
    0,
    47,
    1,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    48,
    1,
    137,
    0,
    137,
    0,
    57,
    1,
    53,
    1,
    54,
    1,
    137,
    0,
    137,
    0,
    137,
    0,
    55,
    1,
    137,
    0,
    58,
    1,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    52,
    1,
    51,
    1,
    50,
    1,
    137,
    0,
    84,
    0,
    84,
    0,
    84,
    0,
    122,
    0,
    49,
    1,
    122,
    0,
    125,
    0,
    125,
    0,
    125,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    40,
    1,
    39,
    1,
    38,
    1,
    37,
    1,
    36,
    1,
    35,
    1,
    34,
    1,
    33,
    1,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    137,
    0,
    18,
    1,
    17,
    1,
    16,
    1,
    15,
    1,
    14,
    1,
    13,
    1,
    12,
    1,
    11,
    1,
    10,
    1,
    9,
    1,
    8,
    1,
    7,
    1,
    6,
    1,
    5,
    1,
    255,
    0,
    137,
    0,
    165,
    0,
    162,
    0,
    238,
    0,
    237,
    0,
    236,
    0,
    235,
    0,
    234,
    0,
    233,
    0,
    232,
    0,
    231,
    0,
    230,
    0,
    229,
    0,
    228,
    0,
    227,
    0,
    226,
    0,
    225,
    0,
    224,
    0,
    223,
    0,
    222,
    0,
    221,
    0,
    220,
    0,
    219,
    0,
    218,
    0,
    217,
    0,
    165,
    0,
    162,
    0,
    137,
    0,
    137,
    0,
    93,
    0,
    164,
    0,
    123,
    0,
    189,
    0,
    188,
    0,
    187,
    0,
    186,
    0,
    185,
    0,
    182,
    0,
    181,
    0,
    180,
    0,
    179,
    0,
    178,
    0,
    177,
    0,
    176,
    0,
    175,
    0,
    174,
    0,
    173,
    0,
    172,
    0,
    171,
    0,
    170,
    0,
    169,
    0,
    168,
    0,
    167,
    0,
    93,
    0,
    164,
    0,
    85,
    0,
    82,
    0,
    161,
    0,
    153,
    0,
    137,
    0,
    127,
    0,
    96,
    0,
    124,
    0,
    124,
    0,
    127,
    0,
    128,
    0,
    127,
    0,
    124,
    0,
    123,
    0,
    121,
    0,
    118,
    0,
    113,
    0,
    112,
    0,
    111,
    0,
    103,
    0,
    102,
    0,
    101,
    0,
    100,
    0,
    99,
    0,
    98,
    0,
    86,
    0,
    96,
    0,
    83,
    0,
    83,
    0,
    86,
    0,
    87,
    0,
    86,
    0,
    85,
    0,
    83,
    0,
    82,
    0,
    59,
    1,
    5,
    0,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    59,
    1,
    66,
    67,
    95,
    69,
    78,
    86,
    95,
    65,
    82,
    71,
    83,
    0,
    99,
    104,
    105,
    108,
    113,
    115,
    119,
    118,
    0,
    99,
    111,
    109,
    112,
    105,
    108,
    101,
    0,
    104,
    101,
    108,
    112,
    0,
    105,
    110,
    116,
    101,
    114,
    97,
    99,
    116,
    105,
    118,
    101,
    0,
    109,
    97,
    116,
    104,
    108,
    105,
    98,
    0,
    113,
    117,
    105,
    101,
    116,
    0,
    115,
    116,
    97,
    110,
    100,
    97,
    114,
    100,
    0,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    0,
    119,
    97,
    114,
    110,
    0,
    117,
    115,
    97,
    103,
    101,
    58
], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
allocate([
    32,
    37,
    115,
    32,
    91,
    111,
    112,
    116,
    105,
    111,
    110,
    115,
    93,
    32,
    91,
    102,
    105,
    108,
    101,
    32,
    46,
    46,
    46,
    93,
    10,
    37,
    115,
    37,
    115,
    37,
    115,
    37,
    115,
    37,
    115,
    37,
    115,
    37,
    115,
    0,
    32,
    32,
    45,
    104,
    32,
    32,
    45,
    45,
    104,
    101,
    108,
    112,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    112,
    114,
    105,
    110,
    116,
    32,
    116,
    104,
    105,
    115,
    32,
    117,
    115,
    97,
    103,
    101,
    32,
    97,
    110,
    100,
    32,
    101,
    120,
    105,
    116,
    10,
    0,
    32,
    32,
    45,
    105,
    32,
    32,
    45,
    45,
    105,
    110,
    116,
    101,
    114,
    97,
    99,
    116,
    105,
    118,
    101,
    32,
    32,
    102,
    111,
    114,
    99,
    101,
    32,
    105,
    110,
    116,
    101,
    114,
    97,
    99,
    116,
    105,
    118,
    101,
    32,
    109,
    111,
    100,
    101,
    10,
    0,
    32,
    32,
    45,
    108,
    32,
    32,
    45,
    45,
    109,
    97,
    116,
    104,
    108,
    105,
    98,
    32,
    32,
    32,
    32,
    32,
    32,
    117,
    115,
    101,
    32,
    116,
    104,
    101,
    32,
    112,
    114,
    101,
    100,
    101,
    102,
    105,
    110,
    101,
    100,
    32,
    109,
    97,
    116,
    104,
    32,
    114,
    111,
    117,
    116,
    105,
    110,
    101,
    115,
    10,
    0,
    32,
    32,
    45,
    113,
    32,
    32,
    45,
    45,
    113,
    117,
    105,
    101,
    116,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    100,
    111,
    110,
    39,
    116,
    32,
    112,
    114,
    105,
    110,
    116,
    32,
    105,
    110,
    105,
    116,
    105,
    97,
    108,
    32,
    98,
    97,
    110,
    110,
    101,
    114,
    10,
    0,
    32,
    32,
    45,
    115,
    32,
    32,
    45,
    45,
    115,
    116,
    97,
    110,
    100,
    97,
    114,
    100,
    32,
    32,
    32,
    32,
    32,
    110,
    111,
    110,
    45,
    115,
    116,
    97,
    110,
    100,
    97,
    114,
    100,
    32,
    98,
    99,
    32,
    99,
    111,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    115,
    32,
    97,
    114,
    101,
    32,
    101,
    114,
    114,
    111,
    114,
    115,
    10,
    0,
    32,
    32,
    45,
    119,
    32,
    32,
    45,
    45,
    119,
    97,
    114,
    110,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    119,
    97,
    114,
    110,
    32,
    97,
    98,
    111,
    117,
    116,
    32,
    110,
    111,
    110,
    45,
    115,
    116,
    97,
    110,
    100,
    97,
    114,
    100,
    32,
    98,
    99,
    32,
    99,
    111,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    115,
    10,
    0,
    32,
    32,
    45,
    118,
    32,
    32,
    45,
    45,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    32,
    32,
    32,
    32,
    32,
    32,
    112,
    114,
    105,
    110,
    116,
    32,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    32,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    32,
    97,
    110,
    100,
    32,
    101,
    120,
    105,
    116,
    10,
    0,
    80,
    79,
    83,
    73,
    88,
    76,
    89,
    95,
    67,
    79,
    82,
    82,
    69,
    67,
    84,
    0,
    66,
    67,
    95,
    76,
    73,
    78,
    69,
    95,
    76,
    69,
    78,
    71,
    84,
    72,
    0,
    10,
    40,
    105,
    110,
    116,
    101,
    114,
    114,
    117,
    112,
    116,
    41,
    32,
    69,
    120,
    105,
    116,
    105,
    110,
    103,
    32,
    98,
    99,
    46,
    10,
    0,
    101,
    0,
    108,
    0,
    115,
    0,
    97,
    0,
    99,
    0,
    106,
    0,
    114,
    0,
    70,
    105,
    108,
    101,
    32,
    37,
    115,
    32,
    105,
    115,
    32,
    117,
    110,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    46,
    10,
    0,
    0,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    42,
    52,
    2,
    45,
    46,
    40,
    38,
    49,
    39,
    2,
    41,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    44,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    50,
    2,
    51,
    43,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    47,
    2,
    48,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    2,
    0,
    1,
    0,
    0,
    24,
    103,
    93,
    0,
    52,
    25,
    27,
    0,
    75,
    30,
    0,
    37,
    0,
    107,
    105,
    106,
    0,
    0,
    21,
    28,
    109,
    26,
    41,
    22,
    108,
    0,
    0,
    0,
    3,
    0,
    10,
    19,
    5,
    23,
    92,
    6,
    20,
    83,
    67,
    0,
    103,
    107,
    96,
    53,
    0,
    0,
    29,
    76,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    91,
    0,
    0,
    0,
    14,
    4,
    0,
    79,
    81,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    77,
    97,
    103,
    0,
    68,
    69,
    0,
    0,
    0,
    73,
    0,
    0,
    0,
    0,
    101,
    102,
    45,
    42,
    43,
    46,
    94,
    0,
    17,
    40,
    11,
    0,
    0,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    0,
    0,
    95,
    0,
    104,
    54,
    98,
    0,
    74,
    35,
    38,
    99,
    100,
    0,
    16,
    18,
    80,
    82,
    78,
    70,
    103,
    71,
    59,
    0,
    0,
    0,
    55,
    31,
    7,
    0,
    44,
    0,
    0,
    0,
    0,
    7,
    0,
    73,
    8,
    0,
    7,
    72,
    60,
    0,
    0,
    0,
    63,
    0,
    0,
    0,
    47,
    0,
    61,
    62,
    110,
    0,
    0,
    0,
    32,
    48,
    36,
    39,
    111,
    56,
    64,
    0,
    0,
    73,
    7,
    112,
    0,
    50,
    65,
    66,
    0,
    0,
    0,
    0,
    33,
    49,
    57,
    58,
    0,
    7,
    51,
    0,
    34,
    0,
    2,
    0,
    2,
    2,
    1,
    2,
    0,
    1,
    0,
    1,
    3,
    2,
    0,
    1,
    2,
    3,
    2,
    3,
    1,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    0,
    0,
    0,
    0,
    14,
    0,
    8,
    0,
    0,
    8,
    3,
    0,
    3,
    1,
    3,
    1,
    1,
    0,
    0,
    4,
    0,
    13,
    0,
    1,
    0,
    1,
    0,
    3,
    3,
    1,
    3,
    4,
    4,
    3,
    5,
    6,
    6,
    0,
    1,
    1,
    3,
    3,
    5,
    0,
    1,
    0,
    1,
    0,
    4,
    0,
    4,
    0,
    4,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    2,
    1,
    1,
    3,
    4,
    2,
    2,
    4,
    4,
    4,
    3,
    3,
    1,
    4,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    2,
    110,
    101,
    119,
    108,
    105,
    110,
    101,
    32,
    110,
    111,
    116,
    32,
    97,
    108,
    108,
    111,
    119,
    101,
    100,
    0,
    99,
    111,
    109,
    112,
    97,
    114,
    105,
    115,
    111,
    110,
    32,
    105,
    110,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    0,
    87,
    0,
    112,
    0,
    119,
    0,
    66,
    114,
    101,
    97,
    107,
    32,
    111,
    117,
    116,
    115,
    105,
    100,
    101,
    32,
    97,
    32,
    102,
    111,
    114,
    47,
    119,
    104,
    105,
    108,
    101,
    0,
    74,
    37,
    49,
    100,
    58,
    0,
    67,
    111,
    110,
    116,
    105,
    110,
    117,
    101,
    32,
    115,
    116,
    97,
    116,
    101,
    109,
    101,
    110,
    116,
    0,
    67,
    111,
    110,
    116,
    105,
    110,
    117,
    101,
    32,
    111,
    117,
    116,
    115,
    105,
    100,
    101,
    32,
    97,
    32,
    102,
    111,
    114,
    0,
    104,
    0,
    82,
    0,
    67,
    111,
    109,
    112,
    97,
    114,
    105,
    115,
    111,
    110,
    32,
    105,
    110,
    32,
    102,
    105,
    114,
    115,
    116,
    32,
    102,
    111,
    114,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    0,
    102,
    105,
    114,
    115,
    116,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    105,
    115,
    32,
    118,
    111,
    105,
    100,
    0,
    78,
    37,
    49,
    100,
    58,
    0,
    115,
    101,
    99,
    111,
    110,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    105,
    115,
    32,
    118,
    111,
    105,
    100,
    0,
    49,
    0,
    66,
    37,
    49,
    100,
    58,
    74,
    37,
    49,
    100,
    58,
    0,
    67,
    111,
    109,
    112,
    97,
    114,
    105,
    115,
    111,
    110,
    32,
    105,
    110,
    32,
    116,
    104,
    105,
    114,
    100,
    32,
    102,
    111,
    114,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    0,
    116,
    104,
    105,
    114,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    105,
    115,
    32,
    118,
    111,
    105,
    100,
    0,
    74,
    37,
    49,
    100,
    58,
    78,
    37,
    49,
    100,
    58,
    0,
    112,
    74,
    37,
    49,
    100,
    58,
    78,
    37,
    49,
    100,
    58,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    0,
    90,
    37,
    49,
    100,
    58,
    0,
    112,
    114,
    105,
    110,
    116,
    32,
    115,
    116,
    97,
    116,
    101,
    109,
    101,
    110,
    116,
    0,
    79,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    105,
    110,
    32,
    112,
    114,
    105,
    110,
    116,
    0,
    80,
    0,
    101,
    108,
    115,
    101,
    32,
    99,
    108,
    97,
    117,
    115,
    101,
    32,
    105,
    110,
    32,
    105,
    102,
    32,
    115,
    116,
    97,
    116,
    101,
    109,
    101,
    110,
    116,
    0,
    74,
    37,
    100,
    58,
    78,
    37,
    49,
    100,
    58,
    0,
    70,
    37,
    100,
    44,
    37,
    115,
    46,
    37,
    115,
    91,
    0,
    48,
    82,
    93,
    0,
    118,
    111,
    105,
    100,
    32,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    115,
    0,
    67,
    97,
    108,
    108,
    32,
    98,
    121,
    32,
    118,
    97,
    114,
    105,
    97,
    98,
    108,
    101,
    32,
    97,
    114,
    114,
    97,
    121,
    115,
    0,
    99,
    111,
    109,
    112,
    97,
    114,
    105,
    115,
    111,
    110,
    32,
    105,
    110,
    32,
    97,
    114,
    103,
    117,
    109,
    101,
    110,
    116,
    0,
    118,
    111,
    105,
    100,
    32,
    97,
    114,
    103,
    117,
    109,
    101,
    110,
    116,
    0,
    75,
    37,
    100,
    58,
    0,
    77,
    105,
    115,
    115,
    105,
    110,
    103,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    105,
    110,
    32,
    102,
    111,
    114,
    32,
    115,
    116,
    97,
    116,
    101,
    109,
    101,
    110,
    116,
    0,
    48,
    0,
    82,
    101,
    116,
    117,
    114,
    110,
    32,
    111,
    117,
    116,
    115,
    105,
    100,
    101,
    32,
    111,
    102,
    32,
    97,
    32,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    46,
    0,
    99,
    111,
    109,
    112,
    97,
    114,
    105,
    115,
    111,
    110,
    32,
    105,
    110,
    32,
    114,
    101,
    116,
    117,
    114,
    110,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    105,
    111,
    110,
    0,
    114,
    101,
    116,
    117,
    114,
    110,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    115,
    32,
    112,
    97,
    114,
    101,
    110,
    116,
    104,
    101,
    115,
    105,
    115,
    0,
    114,
    101,
    116,
    117,
    114,
    110,
    32,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    115,
    32,
    110,
    111,
    110,
    45,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    0,
    82,
    101,
    116,
    117,
    114,
    110,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    105,
    110,
    32,
    97,
    32,
    118,
    111,
    105,
    100,
    32,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    46,
    0,
    68,
    76,
    37,
    100,
    58,
    0,
    108,
    37,
    100,
    58,
    0,
    65,
    115,
    115,
    105,
    103,
    110,
    109,
    101,
    110,
    116,
    32,
    111,
    102,
    32,
    97,
    32,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    0,
    83,
    37,
    100,
    58,
    0,
    115,
    37,
    100,
    58,
    0,
    38,
    38,
    32,
    111,
    112,
    101,
    114,
    97,
    116,
    111,
    114,
    0,
    68,
    90,
    37,
    100,
    58,
    112,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    32,
    38,
    38,
    0,
    68,
    90,
    37,
    100,
    58,
    112,
    49,
    78,
    37,
    100,
    58,
    0,
    124,
    124,
    32,
    111,
    112,
    101,
    114,
    97,
    116,
    111,
    114,
    0,
    66,
    37,
    100,
    58,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    32,
    124,
    124,
    0,
    66,
    37,
    100,
    58,
    48,
    74,
    37,
    100,
    58,
    78,
    37,
    100,
    58,
    49,
    78,
    37,
    100,
    58,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    32,
    33,
    0,
    33,
    32,
    111,
    112,
    101,
    114,
    97,
    116,
    111,
    114,
    0,
    33,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    32,
    99,
    111,
    109,
    112,
    97,
    114,
    105,
    115,
    111,
    110,
    0,
    61,
    0,
    35,
    0,
    123,
    0,
    60,
    0,
    125,
    0,
    62,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    32,
    43,
    0,
    43,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    32,
    45,
    0,
    45,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    32,
    42,
    0,
    42,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    32,
    47,
    0,
    47,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    32,
    37,
    0,
    37,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    32,
    94,
    0,
    94,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    119,
    105,
    116,
    104,
    32,
    117,
    110,
    97,
    114,
    121,
    32,
    45,
    0,
    110,
    0,
    76,
    37,
    100,
    58,
    0,
    75,
    0,
    58,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    105,
    110,
    32,
    112,
    97,
    114,
    101,
    110,
    116,
    104,
    101,
    115,
    105,
    115,
    0,
    67,
    37,
    100,
    44,
    37,
    115,
    58,
    0,
    67,
    37,
    100,
    58,
    0,
    68,
    65,
    37,
    100,
    58,
    76,
    37,
    100,
    58,
    0,
    68,
    77,
    37,
    100,
    58,
    76,
    37,
    100,
    58,
    0,
    105,
    37,
    100,
    58,
    108,
    37,
    100,
    58,
    0,
    100,
    37,
    100,
    58,
    108,
    37,
    100,
    58,
    0,
    68,
    76,
    37,
    100,
    58,
    120,
    0,
    65,
    37,
    100,
    58,
    0,
    77,
    37,
    100,
    58,
    0,
    105,
    37,
    100,
    58,
    0,
    100,
    37,
    100,
    58,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    105,
    110,
    32,
    108,
    101,
    110,
    103,
    116,
    104,
    40,
    41,
    0,
    99,
    76,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    105,
    110,
    32,
    115,
    113,
    114,
    116,
    40,
    41,
    0,
    99,
    82,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    105,
    110,
    32,
    115,
    99,
    97,
    108,
    101,
    40,
    41,
    0,
    99,
    83,
    0,
    114,
    101,
    97,
    100,
    32,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    0,
    99,
    73,
    0,
    114,
    97,
    110,
    100,
    111,
    109,
    32,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    0,
    99,
    88,
    0,
    118,
    111,
    105,
    100,
    32,
    101,
    120,
    112,
    114,
    101,
    115,
    115,
    105,
    111,
    110,
    32,
    97,
    115,
    32,
    115,
    117,
    98,
    115,
    99,
    114,
    105,
    112,
    116,
    0,
    99,
    111,
    109,
    112,
    97,
    114,
    105,
    115,
    111,
    110,
    32,
    105,
    110,
    32,
    115,
    117,
    98,
    115,
    99,
    114,
    105,
    112,
    116,
    0,
    72,
    105,
    115,
    116,
    111,
    114,
    121,
    32,
    118,
    97,
    114,
    105,
    97,
    98,
    108,
    101,
    0,
    76,
    97,
    115,
    116,
    32,
    118,
    97,
    114,
    105,
    97,
    98,
    108,
    101,
    0,
    69,
    110,
    100,
    32,
    111,
    102,
    32,
    108,
    105,
    110,
    101,
    32,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    100,
    0,
    84,
    111,
    111,
    32,
    109,
    97,
    110,
    121,
    32,
    101,
    110,
    100,
    32,
    111,
    102,
    32,
    108,
    105,
    110,
    101,
    115,
    0,
    0,
    53,
    54,
    54,
    55,
    55,
    55,
    56,
    56,
    57,
    57,
    57,
    57,
    58,
    58,
    58,
    58,
    58,
    58,
    59,
    59,
    60,
    60,
    60,
    60,
    60,
    60,
    60,
    60,
    60,
    61,
    62,
    63,
    64,
    60,
    65,
    60,
    66,
    67,
    60,
    60,
    68,
    60,
    69,
    69,
    70,
    70,
    71,
    72,
    71,
    74,
    73,
    75,
    75,
    76,
    76,
    77,
    77,
    77,
    78,
    78,
    78,
    78,
    78,
    78,
    78,
    78,
    79,
    79,
    80,
    80,
    80,
    80,
    81,
    81,
    82,
    82,
    84,
    83,
    85,
    83,
    86,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    83,
    87,
    87,
    87,
    87,
    87,
    87,
    87,
    88,
    88,
    88,
    115,
    121,
    110,
    116,
    97,
    120,
    32,
    101,
    114,
    114,
    111,
    114,
    0,
    109,
    101,
    109,
    111,
    114,
    121,
    32,
    101,
    120,
    104,
    97,
    117,
    115,
    116,
    101,
    100,
    0,
    111,
    117,
    116,
    32,
    111,
    102,
    32,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    32,
    109,
    101,
    109,
    111,
    114,
    121,
    32,
    105,
    110,
    32,
    121,
    121,
    95,
    99,
    114,
    101,
    97,
    116,
    101,
    95,
    98,
    117,
    102,
    102,
    101,
    114,
    40,
    41,
    0,
    37,
    115,
    10,
    0,
    105,
    108,
    108,
    101,
    103,
    97,
    108,
    32,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    58,
    32,
    35,
    0,
    102,
    97,
    116,
    97,
    108,
    32,
    102,
    108,
    101,
    120,
    32,
    115,
    99,
    97,
    110,
    110,
    101,
    114,
    32,
    105,
    110,
    116,
    101,
    114,
    110,
    97,
    108,
    32,
    101,
    114,
    114,
    111,
    114,
    45,
    45,
    101,
    110,
    100,
    32,
    111,
    102,
    32,
    98,
    117,
    102,
    102,
    101,
    114,
    32,
    109,
    105,
    115,
    115,
    101,
    100,
    0,
    102,
    97,
    116,
    97,
    108,
    32,
    101,
    114,
    114,
    111,
    114,
    32,
    45,
    32,
    115,
    99,
    97,
    110,
    110,
    101,
    114,
    32,
    105,
    110,
    112,
    117,
    116,
    32,
    98,
    117,
    102,
    102,
    101,
    114,
    32,
    111,
    118,
    101,
    114,
    102,
    108,
    111,
    119,
    0,
    114,
    101,
    97,
    100,
    40,
    41,
    32,
    105,
    110,
    32,
    102,
    108,
    101,
    120,
    32,
    115,
    99,
    97,
    110,
    110,
    101,
    114,
    32,
    102,
    97,
    105,
    108,
    101,
    100,
    0,
    69,
    79,
    70,
    32,
    101,
    110,
    99,
    111,
    117,
    110,
    116,
    101,
    114,
    101,
    100,
    32,
    105,
    110,
    32,
    97,
    32,
    99,
    111,
    109,
    109,
    101,
    110,
    116,
    46,
    10,
    0,
    78,
    85,
    76,
    32,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    32,
    105,
    110,
    32,
    115,
    116,
    114,
    105,
    110,
    103,
    46,
    0,
    105,
    108,
    108,
    101,
    103,
    97,
    108,
    32,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    58,
    32,
    94,
    37,
    99,
    0,
    105,
    108,
    108,
    101,
    103,
    97,
    108,
    32,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    58,
    32,
    92,
    37,
    48,
    51,
    111,
    0,
    105,
    108,
    108,
    101,
    103,
    97,
    108,
    32,
    99,
    104,
    97,
    114,
    97,
    99,
    116,
    101,
    114,
    58,
    32,
    37,
    115,
    0,
    102,
    97,
    116,
    97,
    108,
    32,
    102,
    108,
    101,
    120,
    32,
    115,
    99,
    97,
    110,
    110,
    101,
    114,
    32,
    105,
    110,
    116,
    101,
    114,
    110,
    97,
    108,
    32,
    101,
    114,
    114,
    111,
    114,
    45,
    45,
    110,
    111,
    32,
    97,
    99,
    116,
    105,
    111,
    110,
    32,
    102,
    111,
    117,
    110,
    100,
    0,
    70,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    32,
    37,
    115,
    32,
    110,
    111,
    116,
    32,
    100,
    101,
    102,
    105,
    110,
    101,
    100,
    46,
    0,
    82,
    101,
    116,
    117,
    114,
    110,
    32,
    102,
    114,
    111,
    109,
    32,
    109,
    97,
    105,
    110,
    32,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    46,
    0,
    83,
    113,
    117,
    97,
    114,
    101,
    32,
    114,
    111,
    111,
    116,
    32,
    111,
    102,
    32,
    97,
    32,
    110,
    101,
    103,
    97,
    116,
    105,
    118,
    101,
    32,
    110,
    117,
    109,
    98,
    101,
    114,
    0,
    68,
    105,
    118,
    105,
    100,
    101,
    32,
    98,
    121,
    32,
    122,
    101,
    114,
    111,
    0,
    77,
    111,
    100,
    117,
    108,
    111,
    32,
    98,
    121,
    32,
    122,
    101,
    114,
    111,
    0,
    100,
    105,
    118,
    105,
    100,
    101,
    32,
    98,
    121,
    32,
    122,
    101,
    114,
    111,
    0,
    98,
    97,
    100,
    32,
    105,
    110,
    115,
    116,
    114,
    117,
    99,
    116,
    105,
    111,
    110,
    58,
    32,
    105,
    110,
    115,
    116,
    61,
    37,
    99,
    0,
    10,
    105,
    110,
    116,
    101,
    114,
    114,
    117,
    112,
    116,
    101,
    100,
    32,
    101,
    120,
    101,
    99,
    117,
    116,
    105,
    111,
    110,
    46,
    0,
    80,
    114,
    111,
    103,
    114,
    97,
    109,
    32,
    116,
    111,
    111,
    32,
    98,
    105,
    103,
    46,
    10,
    0,
    40,
    109,
    97,
    105,
    110,
    41,
    0,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    32,
    115,
    116,
    97,
    99,
    107,
    32,
    117,
    110,
    100,
    101,
    114,
    102,
    108,
    111,
    119,
    44,
    32,
    99,
    111,
    110,
    116,
    97,
    99,
    116,
    32,
    109,
    97,
    105,
    110,
    116,
    97,
    105,
    110,
    101,
    114,
    46,
    0,
    83,
    116,
    97,
    99,
    107,
    32,
    101,
    114,
    114,
    111,
    114,
    46,
    0,
    110,
    101,
    103,
    97,
    116,
    105,
    118,
    101,
    32,
    105,
    98,
    97,
    115,
    101,
    44,
    32,
    115,
    101,
    116,
    32,
    116,
    111,
    32,
    50,
    0,
    110,
    101,
    103,
    97,
    116,
    105,
    118,
    101,
    32,
    111,
    98,
    97,
    115,
    101,
    44,
    32,
    115,
    101,
    116,
    32,
    116,
    111,
    32,
    50,
    0,
    110,
    101,
    103,
    97,
    116,
    105,
    118,
    101,
    32,
    115,
    99,
    97,
    108,
    101,
    44,
    32,
    115,
    101,
    116,
    32,
    116,
    111,
    32,
    48,
    0,
    105,
    98,
    97,
    115,
    101,
    32,
    116,
    111,
    111,
    32,
    115,
    109,
    97,
    108,
    108,
    44,
    32,
    115,
    101,
    116,
    32,
    116,
    111,
    32,
    50,
    0,
    105,
    98,
    97,
    115,
    101,
    32,
    116,
    111,
    111,
    32,
    108,
    97,
    114,
    103,
    101,
    44,
    32,
    115,
    101,
    116,
    32,
    116,
    111,
    32,
    49,
    54,
    0,
    111,
    98,
    97,
    115,
    101,
    32,
    116,
    111,
    111,
    32,
    115,
    109,
    97,
    108,
    108,
    44,
    32,
    115,
    101,
    116,
    32,
    116,
    111,
    32,
    50,
    0,
    111,
    98,
    97,
    115,
    101,
    32,
    116,
    111,
    111,
    32,
    108,
    97,
    114,
    103,
    101,
    44,
    32,
    115,
    101,
    116,
    32,
    116,
    111,
    32,
    37,
    100,
    0,
    115,
    99,
    97,
    108,
    101,
    32,
    116,
    111,
    111,
    32,
    108,
    97,
    114,
    103,
    101,
    44,
    32,
    115,
    101,
    116,
    32,
    116,
    111,
    32,
    37,
    100,
    0,
    65,
    114,
    114,
    97,
    121,
    32,
    37,
    115,
    32,
    115,
    117,
    98,
    115,
    99,
    114,
    105,
    112,
    116,
    32,
    111,
    117,
    116,
    32,
    111,
    102,
    32,
    98,
    111,
    117,
    110,
    100,
    115,
    46,
    0,
    105,
    98,
    97,
    115,
    101,
    32,
    116,
    111,
    111,
    32,
    115,
    109,
    97,
    108,
    108,
    32,
    105,
    110,
    32,
    45,
    45,
    0,
    111,
    98,
    97,
    115,
    101,
    32,
    116,
    111,
    111,
    32,
    115,
    109,
    97,
    108,
    108,
    32,
    105,
    110,
    32,
    45,
    45,
    0,
    115,
    99,
    97,
    108,
    101,
    32,
    99,
    97,
    110,
    32,
    110,
    111,
    116,
    32,
    98,
    101,
    32,
    110,
    101,
    103,
    97,
    116,
    105,
    118,
    101,
    32,
    105,
    110,
    32,
    45,
    45,
    32,
    0,
    105,
    98,
    97,
    115,
    101,
    32,
    116,
    111,
    111,
    32,
    98,
    105,
    103,
    32,
    105,
    110,
    32,
    43,
    43,
    0,
    111,
    98,
    97,
    115,
    101,
    32,
    116,
    111,
    111,
    32,
    98,
    105,
    103,
    32,
    105,
    110,
    32,
    43,
    43,
    0,
    83,
    99,
    97,
    108,
    101,
    32,
    116,
    111,
    111,
    32,
    98,
    105,
    103,
    32,
    105,
    110,
    32,
    43,
    43,
    0,
    80,
    97,
    114,
    97,
    109,
    101,
    116,
    101,
    114,
    32,
    116,
    121,
    112,
    101,
    32,
    109,
    105,
    115,
    109,
    97,
    116,
    99,
    104,
    32,
    112,
    97,
    114,
    97,
    109,
    101,
    116,
    101,
    114,
    32,
    37,
    115,
    46,
    0,
    80,
    97,
    114,
    97,
    109,
    101,
    116,
    101,
    114,
    32,
    116,
    121,
    112,
    101,
    32,
    109,
    105,
    115,
    109,
    97,
    116,
    99,
    104,
    44,
    32,
    112,
    97,
    114,
    97,
    109,
    101,
    116,
    101,
    114,
    32,
    37,
    115,
    46,
    0,
    80,
    97,
    114,
    97,
    109,
    101,
    116,
    101,
    114,
    32,
    110,
    117,
    109,
    98,
    101,
    114,
    32,
    109,
    105,
    115,
    109,
    97,
    116,
    99,
    104,
    0,
    70,
    97,
    116,
    97,
    108,
    32,
    101,
    114,
    114,
    111,
    114,
    58,
    32,
    79,
    117,
    116,
    32,
    111,
    102,
    32,
    109,
    101,
    109,
    111,
    114,
    121,
    32,
    102,
    111,
    114,
    32,
    109,
    97,
    108,
    108,
    111,
    99,
    46,
    10,
    0,
    42,
    37,
    100,
    44,
    0,
    42,
    37,
    100,
    0,
    37,
    100,
    44,
    0,
    37,
    100,
    0,
    100,
    117,
    112,
    108,
    105,
    99,
    97,
    116,
    101,
    32,
    112,
    97,
    114,
    97,
    109,
    101,
    116,
    101,
    114,
    32,
    110,
    97,
    109,
    101,
    115,
    0,
    40,
    115,
    116,
    97,
    110,
    100,
    97,
    114,
    100,
    95,
    105,
    110,
    41,
    0,
    37,
    115,
    32,
    37,
    100,
    58,
    32,
    0,
    86,
    97,
    114,
    105,
    97,
    98,
    108,
    101,
    32,
    97,
    114,
    114,
    97,
    121,
    32,
    112,
    97,
    114,
    97,
    109,
    101,
    116,
    101,
    114,
    0,
    37,
    115,
    32,
    37,
    100,
    58,
    32,
    69,
    114,
    114,
    111,
    114,
    58,
    32,
    0,
    37,
    115,
    32,
    37,
    100,
    58,
    32,
    40,
    87,
    97,
    114,
    110,
    105,
    110,
    103,
    41,
    32,
    0,
    100,
    117,
    112,
    108,
    105,
    99,
    97,
    116,
    101,
    32,
    97,
    117,
    116,
    111,
    32,
    118,
    97,
    114,
    105,
    97,
    98,
    108,
    101,
    32,
    110,
    97,
    109,
    101,
    115,
    0,
    42,
    32,
    110,
    111,
    116,
    32,
    97,
    108,
    108,
    111,
    119,
    101,
    100,
    32,
    104,
    101,
    114,
    101,
    0,
    118,
    97,
    114,
    105,
    97,
    98,
    108,
    101,
    32,
    105,
    110,
    32,
    98,
    111,
    116,
    104,
    32,
    112,
    97,
    114,
    97,
    109,
    101,
    116,
    101,
    114,
    32,
    97,
    110,
    100,
    32,
    97,
    117,
    116,
    111,
    32,
    108,
    105,
    115,
    116,
    115,
    0,
    64,
    105,
    0,
    37,
    115,
    0,
    64,
    114,
    0,
    109,
    117,
    108,
    116,
    105,
    112,
    108,
    101,
    32,
    108,
    101,
    116,
    116,
    101,
    114,
    32,
    110,
    97,
    109,
    101,
    32,
    45,
    32,
    37,
    115,
    0,
    84,
    111,
    111,
    32,
    109,
    97,
    110,
    121,
    32,
    97,
    114,
    114,
    97,
    121,
    32,
    118,
    97,
    114,
    105,
    97,
    98,
    108,
    101,
    115,
    0,
    84,
    111,
    111,
    32,
    109,
    97,
    110,
    121,
    32,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    115,
    0,
    84,
    111,
    111,
    32,
    109,
    97,
    110,
    121,
    32,
    118,
    97,
    114,
    105,
    97,
    98,
    108,
    101,
    115,
    0,
    69,
    110,
    100,
    32,
    111,
    102,
    32,
    117,
    116,
    105,
    108,
    46,
    99,
    47,
    108,
    111,
    111,
    107,
    117,
    112,
    40,
    41,
    32,
    114,
    101,
    97,
    99,
    104,
    101,
    100,
    46,
    32,
    32,
    80,
    108,
    101,
    97,
    115,
    101,
    32,
    114,
    101,
    112,
    111,
    114,
    116,
    32,
    116,
    104,
    105,
    115,
    32,
    98,
    117,
    103,
    46,
    0,
    66,
    67,
    95,
    66,
    65,
    83,
    69,
    95,
    77,
    65,
    88,
    32,
    32,
    32,
    32,
    32,
    61,
    32,
    37,
    100,
    10,
    0,
    66,
    67,
    95,
    68,
    73,
    77,
    95,
    77,
    65,
    88,
    32,
    32,
    32,
    32,
    32,
    32,
    61,
    32,
    37,
    108,
    100,
    10,
    0,
    66,
    67,
    95,
    83,
    67,
    65,
    76,
    69,
    95,
    77,
    65,
    88,
    32,
    32,
    32,
    32,
    61,
    32,
    37,
    100,
    10,
    0,
    66,
    67,
    95,
    83,
    84,
    82,
    73,
    78,
    71,
    95,
    77,
    65,
    88,
    32,
    32,
    32,
    61,
    32,
    37,
    100,
    10,
    0,
    77,
    65,
    88,
    32,
    69,
    120,
    112,
    111,
    110,
    101,
    110,
    116,
    32,
    32,
    32,
    32,
    61,
    32,
    37,
    108,
    100,
    10,
    0,
    78,
    117,
    109,
    98,
    101,
    114,
    32,
    111,
    102,
    32,
    118,
    97,
    114,
    115,
    32,
    32,
    61,
    32,
    37,
    108,
    100,
    10,
    0,
    82,
    117,
    110,
    116,
    105,
    109,
    101,
    32,
    101,
    114,
    114,
    111,
    114,
    32,
    40,
    102,
    117,
    110,
    99,
    61,
    37,
    115,
    44,
    32,
    97,
    100,
    114,
    61,
    37,
    100,
    41,
    58,
    32,
    0,
    82,
    117,
    110,
    116,
    105,
    109,
    101,
    32,
    119,
    97,
    114,
    110,
    105,
    110,
    103,
    32,
    40,
    102,
    117,
    110,
    99,
    61,
    37,
    115,
    44,
    32,
    97,
    100,
    114,
    61,
    37,
    100,
    41,
    58,
    32,
    0,
    64,
    105,
    75,
    50,
    48,
    58,
    115,
    50,
    58,
    112,
    64,
    114,
    0,
    64,
    105,
    70,
    49,
    44,
    53,
    46,
    54,
    44,
    55,
    44,
    56,
    44,
    57,
    44,
    49,
    48,
    44,
    49,
    49,
    44,
    49,
    50,
    44,
    49,
    51,
    44,
    49,
    52,
    44,
    49,
    53,
    91,
    108,
    48,
    58,
    75,
    65,
    58,
    35,
    90,
    49,
    58,
    108,
    48,
    58,
    115,
    55,
    58,
    112,
    75,
    65,
    58,
    115,
    48,
    58,
    112,
    108,
    53,
    58,
    67,
    49,
    44,
    48,
    58,
    0,
    115,
    49,
    52,
    58,
    112,
    108,
    55,
    58,
    115,
    48,
    58,
    112,
    108,
    49,
    52,
    58,
    82,
    78,
    49,
    58,
    108,
    53,
    58,
    48,
    60,
    90,
    50,
    58,
    49,
    115,
    49,
    50,
    58,
    112,
    108,
    53,
    58,
    110,
    115,
    53,
    58,
    112,
    78,
    50,
    58,
    108,
    50,
    58,
    115,
    49,
    53,
    58,
    112,
    75,
    54,
    58,
    108,
    49,
    53,
    58,
    43,
    0,
    75,
    46,
    52,
    52,
    58,
    108,
    53,
    58,
    42,
    43,
    115,
    49,
    51,
    58,
    112,
    108,
    53,
    58,
    99,
    83,
    49,
    43,
    115,
    50,
    58,
    112,
    78,
    51,
    58,
    108,
    53,
    58,
    49,
    62,
    90,
    52,
    58,
    108,
    49,
    48,
    58,
    49,
    43,
    115,
    49,
    48,
    58,
    112,
    108,
    53,
    58,
    75,
    50,
    58,
    47,
    115,
    53,
    58,
    112,
    108,
    50,
    58,
    0,
    49,
    43,
    115,
    50,
    58,
    112,
    74,
    51,
    58,
    78,
    52,
    58,
    108,
    49,
    51,
    58,
    115,
    50,
    58,
    112,
    49,
    108,
    53,
    58,
    43,
    115,
    49,
    52,
    58,
    112,
    108,
    53,
    58,
    115,
    54,
    58,
    112,
    49,
    115,
    56,
    58,
    112,
    75,
    50,
    58,
    115,
    49,
    49,
    58,
    112,
    78,
    54,
    58,
    49,
    66,
    55,
    58,
    74,
    53,
    58,
    78,
    56,
    58,
    0,
    108,
    49,
    49,
    58,
    105,
    49,
    49,
    58,
    112,
    74,
    54,
    58,
    78,
    55,
    58,
    108,
    54,
    58,
    108,
    53,
    58,
    42,
    115,
    54,
    58,
    108,
    56,
    58,
    108,
    49,
    49,
    58,
    42,
    115,
    56,
    58,
    47,
    115,
    57,
    58,
    112,
    108,
    57,
    58,
    48,
    61,
    90,
    57,
    58,
    108,
    49,
    48,
    58,
    48,
    62,
    90,
    49,
    48,
    58,
    78,
    49,
    49,
    58,
    0,
    108,
    49,
    48,
    58,
    100,
    49,
    48,
    58,
    90,
    49,
    50,
    58,
    108,
    49,
    52,
    58,
    108,
    49,
    52,
    58,
    42,
    115,
    49,
    52,
    58,
    112,
    74,
    49,
    49,
    58,
    78,
    49,
    50,
    58,
    78,
    49,
    48,
    58,
    108,
    49,
    53,
    58,
    115,
    50,
    58,
    112,
    108,
    49,
    50,
    58,
    90,
    49,
    51,
    58,
    49,
    108,
    49,
    52,
    58,
    47,
    82,
    0,
    78,
    49,
    51,
    58,
    108,
    49,
    52,
    58,
    49,
    47,
    82,
    78,
    57,
    58,
    108,
    49,
    52,
    58,
    108,
    57,
    58,
    43,
    115,
    49,
    52,
    58,
    112,
    74,
    56,
    58,
    78,
    53,
    58,
    48,
    82,
    93,
    64,
    114,
    0,
    64,
    105,
    70,
    50,
    44,
    53,
    46,
    55,
    44,
    57,
    44,
    49,
    48,
    44,
    49,
    49,
    44,
    49,
    50,
    44,
    49,
    51,
    44,
    49,
    52,
    44,
    49,
    53,
    91,
    108,
    48,
    58,
    75,
    65,
    58,
    35,
    90,
    49,
    58,
    108,
    48,
    58,
    115,
    55,
    58,
    112,
    75,
    65,
    58,
    115,
    48,
    58,
    112,
    108,
    53,
    58,
    67,
    50,
    44,
    48,
    58,
    0,
    115,
    49,
    52,
    58,
    112,
    108,
    55,
    58,
    115,
    48,
    58,
    112,
    108,
    49,
    52,
    58,
    82,
    78,
    49,
    58,
    108,
    53,
    58,
    48,
    123,
    90,
    50,
    58,
    49,
    75,
    49,
    48,
    58,
    108,
    50,
    58,
    94,
    45,
    49,
    47,
    82,
    78,
    50,
    58,
    108,
    50,
    58,
    115,
    49,
    53,
    58,
    112,
    75,
    54,
    58,
    108,
    50,
    58,
    43,
    115,
    50,
    58,
    0,
    112,
    75,
    50,
    58,
    115,
    49,
    48,
    58,
    112,
    48,
    115,
    49,
    49,
    58,
    112,
    78,
    51,
    58,
    108,
    53,
    58,
    75,
    50,
    58,
    125,
    90,
    52,
    58,
    108,
    49,
    48,
    58,
    75,
    50,
    58,
    42,
    115,
    49,
    48,
    58,
    112,
    108,
    53,
    58,
    99,
    82,
    115,
    53,
    58,
    112,
    74,
    51,
    58,
    78,
    52,
    58,
    78,
    53,
    58,
    108,
    53,
    58,
    0,
    75,
    46,
    53,
    58,
    123,
    90,
    54,
    58,
    108,
    49,
    48,
    58,
    75,
    50,
    58,
    42,
    115,
    49,
    48,
    58,
    112,
    108,
    53,
    58,
    99,
    82,
    115,
    53,
    58,
    112,
    74,
    53,
    58,
    78,
    54,
    58,
    108,
    53,
    58,
    49,
    45,
    108,
    53,
    58,
    49,
    43,
    47,
    115,
    49,
    51,
    58,
    115,
    49,
    52,
    58,
    112,
    108,
    49,
    51,
    58,
    108,
    49,
    51,
    58,
    0,
    42,
    115,
    49,
    50,
    58,
    112,
    75,
    51,
    58,
    115,
    49,
    49,
    58,
    112,
    78,
    56,
    58,
    49,
    66,
    57,
    58,
    74,
    55,
    58,
    78,
    49,
    48,
    58,
    108,
    49,
    49,
    58,
    75,
    50,
    58,
    43,
    115,
    49,
    49,
    58,
    112,
    74,
    56,
    58,
    78,
    57,
    58,
    108,
    49,
    51,
    58,
    108,
    49,
    50,
    58,
    42,
    115,
    49,
    51,
    58,
    108,
    49,
    49,
    58,
    0,
    47,
    115,
    57,
    58,
    112,
    108,
    57,
    58,
    48,
    61,
    90,
    49,
    49,
    58,
    108,
    49,
    48,
    58,
    108,
    49,
    52,
    58,
    42,
    115,
    49,
    52,
    58,
    112,
    108,
    49,
    53,
    58,
    115,
    50,
    58,
    112,
    108,
    49,
    52,
    58,
    49,
    47,
    82,
    78,
    49,
    49,
    58,
    108,
    49,
    52,
    58,
    108,
    57,
    58,
    43,
    115,
    49,
    52,
    58,
    112,
    74,
    49,
    48,
    58,
    78,
    55,
    58,
    0,
    48,
    82,
    93,
    64,
    114,
    0,
    64,
    105,
    70,
    51,
    44,
    53,
    46,
    55,
    44,
    57,
    44,
    49,
    49,
    44,
    49,
    50,
    44,
    49,
    51,
    44,
    49,
    54,
    44,
    49,
    52,
    44,
    49,
    53,
    91,
    108,
    48,
    58,
    75,
    65,
    58,
    35,
    90,
    49,
    58,
    108,
    48,
    58,
    115,
    55,
    58,
    112,
    75,
    65,
    58,
    115,
    48,
    58,
    112,
    108,
    53,
    58,
    67,
    51,
    44,
    48,
    58,
    0,
    115,
    49,
    52,
    58,
    112,
    108,
    55,
    58,
    115,
    48,
    58,
    112,
    108,
    49,
    52,
    58,
    82,
    78,
    49,
    58,
    108,
    50,
    58,
    115,
    49,
    53,
    58,
    112,
    75,
    49,
    46,
    49,
    58,
    108,
    49,
    53,
    58,
    42,
    75,
    50,
    58,
    43,
    115,
    50,
    58,
    112,
    49,
    67,
    52,
    44,
    48,
    58,
    115,
    49,
    52,
    58,
    112,
    108,
    53,
    58,
    48,
    0,
    60,
    90,
    50,
    58,
    49,
    115,
    49,
    50,
    58,
    112,
    108,
    53,
    58,
    110,
    115,
    53,
    58,
    112,
    78,
    50,
    58,
    48,
    115,
    50,
    58,
    112,
    108,
    53,
    58,
    108,
    49,
    52,
    58,
    47,
    75,
    50,
    58,
    43,
    75,
    52,
    58,
    47,
    115,
    49,
    51,
    58,
    112,
    108,
    53,
    58,
    75,
    52,
    58,
    108,
    49,
    51,
    58,
    42,
    108,
    49,
    52,
    58,
    0,
    42,
    45,
    115,
    53,
    58,
    112,
    108,
    49,
    51,
    58,
    75,
    50,
    58,
    37,
    90,
    51,
    58,
    108,
    53,
    58,
    110,
    115,
    53,
    58,
    112,
    78,
    51,
    58,
    108,
    49,
    53,
    58,
    75,
    50,
    58,
    43,
    115,
    50,
    58,
    112,
    108,
    53,
    58,
    115,
    57,
    58,
    115,
    49,
    52,
    58,
    112,
    108,
    53,
    58,
    110,
    108,
    53,
    58,
    42,
    115,
    49,
    54,
    58,
    0,
    112,
    75,
    51,
    58,
    115,
    49,
    49,
    58,
    112,
    78,
    53,
    58,
    49,
    66,
    54,
    58,
    74,
    52,
    58,
    78,
    55,
    58,
    108,
    49,
    49,
    58,
    75,
    50,
    58,
    43,
    115,
    49,
    49,
    58,
    112,
    74,
    53,
    58,
    78,
    54,
    58,
    108,
    57,
    58,
    108,
    49,
    54,
    58,
    108,
    49,
    49,
    58,
    108,
    49,
    49,
    58,
    49,
    45,
    42,
    47,
    42,
    0,
    115,
    57,
    58,
    112,
    108,
    57,
    58,
    48,
    61,
    90,
    56,
    58,
    108,
    49,
    53,
    58,
    115,
    50,
    58,
    112,
    108,
    49,
    50,
    58,
    90,
    57,
    58,
    108,
    49,
    52,
    58,
    110,
    49,
    47,
    82,
    78,
    57,
    58,
    108,
    49,
    52,
    58,
    49,
    47,
    82,
    78,
    56,
    58,
    108,
    49,
    52,
    58,
    108,
    57,
    58,
    43,
    115,
    49,
    52,
    58,
    112,
    0,
    74,
    55,
    58,
    78,
    52,
    58,
    48,
    82,
    93,
    64,
    114,
    0,
    64,
    105,
    70,
    53,
    44,
    53,
    46,
    55,
    44,
    49,
    52,
    44,
    49,
    53,
    91,
    108,
    48,
    58,
    75,
    65,
    58,
    35,
    90,
    49,
    58,
    108,
    48,
    58,
    115,
    55,
    58,
    112,
    75,
    65,
    58,
    115,
    48,
    58,
    112,
    108,
    53,
    58,
    67,
    53,
    44,
    48,
    58,
    115,
    49,
    52,
    58,
    112,
    108,
    55,
    58,
    115,
    48,
    58,
    112,
    108,
    49,
    52,
    58,
    0,
    82,
    78,
    49,
    58,
    108,
    50,
    58,
    115,
    49,
    53,
    58,
    112,
    108,
    50,
    58,
    75,
    49,
    46,
    50,
    58,
    42,
    115,
    50,
    58,
    112,
    108,
    53,
    58,
    49,
    67,
    52,
    44,
    48,
    58,
    75,
    50,
    58,
    42,
    43,
    67,
    51,
    44,
    48,
    58,
    115,
    49,
    52,
    58,
    112,
    108,
    49,
    53,
    58,
    115,
    50,
    58,
    112,
    108,
    49,
    52,
    58,
    0,
    49,
    47,
    82,
    48,
    82,
    93,
    64,
    114,
    0,
    64,
    105,
    70,
    52,
    44,
    53,
    46,
    54,
    44,
    55,
    44,
    57,
    44,
    49,
    48,
    44,
    49,
    49,
    44,
    49,
    50,
    44,
    49,
    51,
    44,
    49,
    54,
    44,
    49,
    52,
    44,
    49,
    53,
    91,
    108,
    48,
    58,
    75,
    65,
    58,
    35,
    90,
    49,
    58,
    108,
    48,
    58,
    115,
    55,
    58,
    112,
    75,
    65,
    58,
    115,
    48,
    58,
    112,
    108,
    53,
    58,
    0,
    67,
    52,
    44,
    48,
    58,
    115,
    49,
    52,
    58,
    112,
    108,
    55,
    58,
    115,
    48,
    58,
    112,
    108,
    49,
    52,
    58,
    82,
    78,
    49,
    58,
    49,
    115,
    49,
    50,
    58,
    112,
    108,
    53,
    58,
    48,
    60,
    90,
    50,
    58,
    49,
    110,
    115,
    49,
    50,
    58,
    112,
    108,
    53,
    58,
    110,
    115,
    53,
    58,
    112,
    78,
    50,
    58,
    108,
    53,
    58,
    49,
    0,
    61,
    90,
    51,
    58,
    108,
    50,
    58,
    75,
    50,
    53,
    58,
    123,
    90,
    52,
    58,
    75,
    46,
    55,
    56,
    53,
    51,
    57,
    56,
    49,
    54,
    51,
    51,
    57,
    55,
    52,
    52,
    56,
    51,
    48,
    57,
    54,
    49,
    53,
    54,
    54,
    48,
    56,
    58,
    108,
    49,
    50,
    58,
    47,
    82,
    78,
    52,
    58,
    108,
    50,
    58,
    75,
    52,
    48,
    58,
    123,
    90,
    53,
    58,
    0,
    75,
    46,
    55,
    56,
    53,
    51,
    57,
    56,
    49,
    54,
    51,
    51,
    57,
    55,
    52,
    52,
    56,
    51,
    48,
    57,
    54,
    49,
    53,
    54,
    54,
    48,
    56,
    52,
    53,
    56,
    49,
    57,
    56,
    55,
    53,
    55,
    50,
    49,
    48,
    52,
    57,
    50,
    58,
    108,
    49,
    50,
    58,
    47,
    82,
    78,
    53,
    58,
    108,
    50,
    58,
    75,
    54,
    48,
    58,
    123,
    90,
    54,
    58,
    0,
    75,
    46,
    55,
    56,
    53,
    51,
    57,
    56,
    49,
    54,
    51,
    51,
    57,
    55,
    52,
    52,
    56,
    51,
    48,
    57,
    54,
    49,
    53,
    54,
    54,
    48,
    56,
    52,
    53,
    56,
    49,
    57,
    56,
    55,
    53,
    55,
    50,
    49,
    48,
    52,
    57,
    50,
    57,
    50,
    51,
    52,
    57,
    56,
    52,
    51,
    55,
    55,
    54,
    52,
    53,
    53,
    50,
    52,
    51,
    55,
    51,
    54,
    0,
    58,
    108,
    49,
    50,
    58,
    47,
    82,
    78,
    54,
    58,
    78,
    51,
    58,
    108,
    53,
    58,
    75,
    46,
    50,
    58,
    61,
    90,
    55,
    58,
    108,
    50,
    58,
    75,
    50,
    53,
    58,
    123,
    90,
    56,
    58,
    75,
    46,
    49,
    57,
    55,
    51,
    57,
    53,
    53,
    53,
    57,
    56,
    52,
    57,
    56,
    56,
    48,
    55,
    53,
    56,
    51,
    55,
    48,
    48,
    52,
    57,
    55,
    0,
    58,
    108,
    49,
    50,
    58,
    47,
    82,
    78,
    56,
    58,
    108,
    50,
    58,
    75,
    52,
    48,
    58,
    123,
    90,
    57,
    58,
    75,
    46,
    49,
    57,
    55,
    51,
    57,
    53,
    53,
    53,
    57,
    56,
    52,
    57,
    56,
    56,
    48,
    55,
    53,
    56,
    51,
    55,
    48,
    48,
    52,
    57,
    55,
    54,
    53,
    49,
    57,
    52,
    55,
    57,
    48,
    50,
    57,
    51,
    52,
    52,
    55,
    53,
    0,
    58,
    108,
    49,
    50,
    58,
    47,
    82,
    78,
    57,
    58,
    108,
    50,
    58,
    75,
    54,
    48,
    58,
    123,
    90,
    49,
    48,
    58,
    75,
    46,
    49,
    57,
    55,
    51,
    57,
    53,
    53,
    53,
    57,
    56,
    52,
    57,
    56,
    56,
    48,
    55,
    53,
    56,
    51,
    55,
    48,
    48,
    52,
    57,
    55,
    54,
    53,
    49,
    57,
    52,
    55,
    57,
    48,
    50,
    57,
    51,
    52,
    52,
    55,
    53,
    56,
    53,
    49,
    48,
    51,
    55,
    56,
    55,
    56,
    53,
    50,
    49,
    48,
    49,
    53,
    49,
    55,
    54,
    56,
    56,
    0,
    58,
    108,
    49,
    50,
    58,
    47,
    82,
    78,
    49,
    48,
    58,
    78,
    55,
    58,
    108,
    50,
    58,
    115,
    49,
    53,
    58,
    112,
    108,
    53,
    58,
    75,
    46,
    50,
    58,
    62,
    90,
    49,
    49,
    58,
    108,
    49,
    53,
    58,
    75,
    53,
    58,
    43,
    115,
    50,
    58,
    112,
    75,
    46,
    50,
    58,
    67,
    52,
    44,
    48,
    58,
    115,
    54,
    58,
    112,
    78,
    49,
    49,
    58,
    0,
    108,
    49,
    53,
    58,
    75,
    51,
    58,
    43,
    115,
    50,
    58,
    112,
    78,
    49,
    50,
    58,
    108,
    53,
    58,
    75,
    46,
    50,
    58,
    62,
    90,
    49,
    51,
    58,
    108,
    49,
    48,
    58,
    49,
    43,
    115,
    49,
    48,
    58,
    112,
    108,
    53,
    58,
    75,
    46,
    50,
    58,
    45,
    49,
    108,
    53,
    58,
    75,
    46,
    50,
    58,
    42,
    43,
    47,
    115,
    53,
    58,
    0,
    112,
    74,
    49,
    50,
    58,
    78,
    49,
    51,
    58,
    108,
    53,
    58,
    115,
    49,
    51,
    58,
    115,
    49,
    52,
    58,
    112,
    108,
    53,
    58,
    110,
    108,
    53,
    58,
    42,
    115,
    49,
    54,
    58,
    112,
    75,
    51,
    58,
    115,
    49,
    49,
    58,
    112,
    78,
    49,
    53,
    58,
    49,
    66,
    49,
    54,
    58,
    74,
    49,
    52,
    58,
    78,
    49,
    55,
    58,
    108,
    49,
    49,
    58,
    0,
    75,
    50,
    58,
    43,
    115,
    49,
    49,
    58,
    112,
    74,
    49,
    53,
    58,
    78,
    49,
    54,
    58,
    108,
    49,
    51,
    58,
    108,
    49,
    54,
    58,
    42,
    115,
    49,
    51,
    58,
    108,
    49,
    49,
    58,
    47,
    115,
    57,
    58,
    112,
    108,
    57,
    58,
    48,
    61,
    90,
    49,
    56,
    58,
    108,
    49,
    53,
    58,
    115,
    50,
    58,
    112,
    108,
    49,
    48,
    58,
    108,
    54,
    58,
    0,
    42,
    108,
    49,
    52,
    58,
    43,
    108,
    49,
    50,
    58,
    47,
    82,
    78,
    49,
    56,
    58,
    108,
    49,
    52,
    58,
    108,
    57,
    58,
    43,
    115,
    49,
    52,
    58,
    112,
    74,
    49,
    55,
    58,
    78,
    49,
    52,
    58,
    48,
    82,
    93,
    64,
    114,
    0,
    64,
    105,
    70,
    54,
    44,
    49,
    51,
    44,
    53,
    46,
    54,
    44,
    55,
    44,
    56,
    44,
    57,
    44,
    49,
    48,
    44,
    49,
    49,
    44,
    49,
    50,
    44,
    49,
    54,
    44,
    49,
    52,
    44,
    49,
    53,
    91,
    108,
    48,
    58,
    75,
    65,
    58,
    35,
    90,
    49,
    58,
    108,
    48,
    58,
    115,
    55,
    58,
    112,
    75,
    65,
    58,
    115,
    48,
    58,
    112,
    108,
    49,
    51,
    58,
    0,
    108,
    53,
    58,
    67,
    54,
    44,
    48,
    48,
    58,
    115,
    49,
    52,
    58,
    112,
    108,
    55,
    58,
    115,
    48,
    58,
    112,
    108,
    49,
    52,
    58,
    82,
    78,
    49,
    58,
    108,
    50,
    58,
    115,
    49,
    53,
    58,
    112,
    48,
    115,
    50,
    58,
    112,
    108,
    49,
    51,
    58,
    49,
    47,
    115,
    49,
    51,
    58,
    112,
    108,
    49,
    51,
    58,
    48,
    60,
    90,
    50,
    58,
    0,
    108,
    49,
    51,
    58,
    110,
    115,
    49,
    51,
    58,
    112,
    108,
    49,
    51,
    58,
    75,
    50,
    58,
    37,
    49,
    61,
    90,
    51,
    58,
    49,
    115,
    49,
    50,
    58,
    112,
    78,
    51,
    58,
    78,
    50,
    58,
    49,
    115,
    49,
    48,
    58,
    112,
    75,
    50,
    58,
    115,
    49,
    49,
    58,
    112,
    78,
    53,
    58,
    108,
    49,
    49,
    58,
    108,
    49,
    51,
    58,
    123,
    0,
    66,
    54,
    58,
    74,
    52,
    58,
    78,
    55,
    58,
    108,
    49,
    49,
    58,
    105,
    49,
    49,
    58,
    112,
    74,
    53,
    58,
    78,
    54,
    58,
    108,
    49,
    48,
    58,
    108,
    49,
    49,
    58,
    42,
    115,
    49,
    48,
    58,
    112,
    74,
    55,
    58,
    78,
    52,
    58,
    75,
    49,
    46,
    53,
    58,
    108,
    49,
    53,
    58,
    42,
    115,
    50,
    58,
    112,
    108,
    53,
    58,
    0,
    108,
    49,
    51,
    58,
    94,
    75,
    50,
    58,
    108,
    49,
    51,
    58,
    94,
    47,
    108,
    49,
    48,
    58,
    47,
    115,
    49,
    48,
    58,
    112,
    49,
    115,
    57,
    58,
    115,
    49,
    52,
    58,
    112,
    108,
    53,
    58,
    110,
    108,
    53,
    58,
    42,
    75,
    52,
    58,
    47,
    115,
    49,
    54,
    58,
    112,
    75,
    49,
    46,
    53,
    58,
    108,
    49,
    53,
    58,
    42,
    108,
    49,
    48,
    58,
    0,
    99,
    76,
    43,
    108,
    49,
    48,
    58,
    99,
    83,
    45,
    115,
    50,
    58,
    112,
    49,
    115,
    49,
    49,
    58,
    112,
    78,
    57,
    58,
    49,
    66,
    49,
    48,
    58,
    74,
    56,
    58,
    78,
    49,
    49,
    58,
    108,
    49,
    49,
    58,
    105,
    49,
    49,
    58,
    112,
    74,
    57,
    58,
    78,
    49,
    48,
    58,
    108,
    57,
    58,
    108,
    49,
    54,
    58,
    42,
    108,
    49,
    49,
    58,
    0,
    47,
    108,
    49,
    51,
    58,
    108,
    49,
    49,
    58,
    43,
    47,
    115,
    57,
    58,
    112,
    108,
    57,
    58,
    48,
    61,
    90,
    49,
    50,
    58,
    108,
    49,
    53,
    58,
    115,
    50,
    58,
    112,
    108,
    49,
    50,
    58,
    90,
    49,
    51,
    58,
    108,
    49,
    48,
    58,
    110,
    108,
    49,
    52,
    58,
    42,
    49,
    47,
    82,
    78,
    49,
    51,
    58,
    108,
    49,
    48,
    58,
    0,
    108,
    49,
    52,
    58,
    42,
    49,
    47,
    82,
    78,
    49,
    50,
    58,
    108,
    49,
    52,
    58,
    108,
    57,
    58,
    43,
    115,
    49,
    52,
    58,
    112,
    74,
    49,
    49,
    58,
    78,
    56,
    58,
    48,
    82,
    93,
    64,
    114,
    0,
    84,
    104,
    105,
    115,
    32,
    105,
    115,
    32,
    102,
    114,
    101,
    101,
    32,
    115,
    111,
    102,
    116,
    119,
    97,
    114,
    101,
    32,
    119,
    105,
    116,
    104,
    32,
    65,
    66,
    83,
    79,
    76,
    85,
    84,
    69,
    76,
    89,
    32,
    78,
    79,
    32,
    87,
    65,
    82,
    82,
    65,
    78,
    84,
    89,
    46,
    0,
    70,
    111,
    114,
    32,
    100,
    101,
    116,
    97,
    105,
    108,
    115,
    32,
    116,
    121,
    112,
    101,
    32,
    96,
    119,
    97,
    114,
    114,
    97,
    110,
    116,
    121,
    39,
    46,
    32,
    0,
    37,
    115,
    32,
    37,
    115,
    10,
    37,
    115,
    10,
    0,
    98,
    99,
    0,
    49,
    46,
    48,
    54,
    46,
    57,
    53,
    0,
    67,
    111,
    112,
    121,
    114,
    105,
    103,
    104,
    116,
    32,
    49,
    57,
    57,
    49,
    45,
    49,
    57,
    57,
    52,
    44,
    32,
    49,
    57,
    57,
    55,
    44,
    32,
    49,
    57,
    57,
    56,
    44,
    32,
    50,
    48,
    48,
    48,
    44,
    32,
    50,
    48,
    48,
    52,
    44,
    32,
    50,
    48,
    48,
    54,
    32,
    70,
    114,
    101,
    101,
    32,
    83,
    111,
    102,
    116,
    119,
    97,
    114,
    101,
    32,
    70,
    111,
    117,
    110,
    100,
    97,
    116,
    105,
    111,
    110,
    44,
    32,
    73,
    110,
    99,
    46,
    0,
    10,
    37,
    115,
    0,
    10,
    32,
    32,
    32,
    32,
    84,
    104,
    105,
    115,
    32,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    32,
    105,
    115,
    32,
    102,
    114,
    101,
    101,
    32,
    115,
    111,
    102,
    116,
    119,
    97,
    114,
    101,
    59,
    32,
    121,
    111,
    117,
    32,
    99,
    97,
    110,
    32,
    114,
    101,
    100,
    105,
    115,
    116,
    114,
    105,
    98,
    117,
    116,
    101,
    32,
    105,
    116,
    32,
    97,
    110,
    100,
    47,
    111,
    114,
    32,
    109,
    111,
    100,
    105,
    102,
    121,
    10,
    32,
    32,
    32,
    32,
    105,
    116,
    32,
    117,
    110,
    100,
    101,
    114,
    32,
    116,
    104,
    101,
    32,
    116,
    101,
    114,
    109,
    115,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    71,
    78,
    85,
    32,
    71,
    101,
    110,
    101,
    114,
    97,
    108,
    32,
    80,
    117,
    98,
    108,
    105,
    99,
    32,
    76,
    105,
    99,
    101,
    110,
    115,
    101,
    32,
    97,
    115,
    32,
    112,
    117,
    98,
    108,
    105,
    115,
    104,
    101,
    100,
    32,
    98,
    121,
    10,
    32,
    32,
    32,
    32,
    116,
    104,
    101,
    32,
    70,
    114,
    101,
    101,
    32,
    83,
    111,
    102,
    116,
    119,
    97,
    114,
    101,
    32,
    70,
    111,
    117,
    110,
    100,
    97,
    116,
    105,
    111,
    110,
    59,
    32,
    101,
    105,
    116,
    104,
    101,
    114,
    32,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    32,
    50,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    76,
    105,
    99,
    101,
    110,
    115,
    101,
    32,
    44,
    32,
    111,
    114,
    10,
    32,
    32,
    32,
    32,
    40,
    97,
    116,
    32,
    121,
    111,
    117,
    114,
    32,
    111,
    112,
    116,
    105,
    111,
    110,
    41,
    32,
    97,
    110,
    121,
    32,
    108,
    97,
    116,
    101,
    114,
    32,
    118,
    101,
    114,
    115,
    105,
    111,
    110,
    46,
    10,
    10,
    32,
    32,
    32,
    32,
    84,
    104,
    105,
    115,
    32,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    32,
    105,
    115,
    32,
    100,
    105,
    115,
    116,
    114,
    105,
    98,
    117,
    116,
    101,
    100,
    32,
    105,
    110,
    32,
    116,
    104,
    101,
    32,
    104,
    111,
    112,
    101,
    32,
    116,
    104,
    97,
    116,
    32,
    105,
    116,
    32,
    119,
    105,
    108,
    108,
    32,
    98,
    101,
    32,
    117,
    115,
    101,
    102,
    117,
    108,
    44,
    10,
    32,
    32,
    32,
    32,
    98,
    117,
    116,
    32,
    87,
    73,
    84,
    72,
    79,
    85,
    84,
    32,
    65,
    78,
    89,
    32,
    87,
    65,
    82,
    82,
    65,
    78,
    84,
    89,
    59,
    32,
    119,
    105,
    116,
    104,
    111,
    117,
    116,
    32,
    101,
    118,
    101,
    110,
    32,
    116,
    104,
    101,
    32,
    105,
    109,
    112,
    108,
    105,
    101,
    100,
    32,
    119,
    97,
    114,
    114,
    97,
    110,
    116,
    121,
    32,
    111,
    102,
    10,
    32,
    32,
    32,
    32,
    77,
    69,
    82,
    67,
    72,
    65,
    78,
    84,
    65,
    66,
    73,
    76,
    73,
    84,
    89,
    32,
    111,
    114,
    32,
    70,
    73,
    84,
    78,
    69,
    83,
    83,
    32,
    70,
    79,
    82,
    32,
    65,
    32,
    80,
    65,
    82,
    84,
    73,
    67,
    85,
    76,
    65,
    82,
    32,
    80,
    85,
    82,
    80,
    79,
    83,
    69,
    46,
    32,
    32,
    83,
    101,
    101,
    32,
    116,
    104,
    101,
    10,
    32,
    32,
    32,
    32,
    71,
    78,
    85,
    32,
    71,
    101,
    110,
    101,
    114,
    97,
    108,
    32,
    80,
    117,
    98,
    108,
    105,
    99,
    32,
    76,
    105,
    99,
    101,
    110,
    115,
    101,
    32,
    102,
    111,
    114,
    32,
    109,
    111,
    114,
    101,
    32,
    100,
    101,
    116,
    97,
    105,
    108,
    115,
    46,
    10,
    10,
    32,
    32,
    32,
    32,
    89,
    111,
    117,
    32,
    115,
    104,
    111,
    117,
    108,
    100,
    32,
    104,
    97,
    118,
    101,
    32,
    114,
    101,
    99,
    101,
    105,
    118,
    101,
    100,
    32,
    97,
    32,
    99,
    111,
    112,
    121,
    32,
    111,
    102,
    32,
    116,
    104,
    101,
    32,
    71,
    78,
    85,
    32,
    71,
    101,
    110,
    101,
    114,
    97,
    108,
    32,
    80,
    117,
    98,
    108,
    105,
    99,
    32,
    76,
    105,
    99,
    101,
    110,
    115,
    101,
    10,
    32,
    32,
    32,
    32,
    97,
    108,
    111,
    110,
    103,
    32,
    119,
    105,
    116,
    104,
    32,
    116,
    104,
    105,
    115,
    32,
    112,
    114,
    111,
    103,
    114,
    97,
    109,
    46,
    32,
    73,
    102,
    32,
    110,
    111,
    116,
    44,
    32,
    119,
    114,
    105,
    116,
    101,
    32,
    116,
    111,
    10,
    10,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    84,
    104,
    101,
    32,
    70,
    114,
    101,
    101,
    32,
    83,
    111,
    102,
    116,
    119,
    97,
    114,
    101,
    32,
    70,
    111,
    117,
    110,
    100,
    97,
    116,
    105,
    111,
    110,
    44,
    32,
    73,
    110,
    99,
    46,
    10,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    53,
    49,
    32,
    70,
    114,
    97,
    110,
    107,
    108,
    105,
    110,
    32,
    83,
    116,
    114,
    101,
    101,
    116,
    44,
    32,
    70,
    105,
    102,
    116,
    104,
    32,
    70,
    108,
    111,
    111,
    114,
    10,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    66,
    111,
    115,
    116,
    111,
    110,
    44,
    32,
    77,
    65,
    32,
    48,
    50,
    49,
    49,
    48,
    45,
    49,
    51,
    48,
    49,
    32,
    32,
    85,
    83,
    65,
    10,
    0,
    97,
    99,
    99,
    117,
    109,
    45,
    62,
    110,
    95,
    108,
    101,
    110,
    43,
    97,
    99,
    99,
    117,
    109,
    45,
    62,
    110,
    95,
    115,
    99,
    97,
    108,
    101,
    32,
    62,
    61,
    32,
    115,
    104,
    105,
    102,
    116,
    43,
    99,
    111,
    117,
    110,
    116,
    0,
    110,
    117,
    109,
    98,
    101,
    114,
    46,
    99,
    0,
    95,
    98,
    99,
    95,
    115,
    104,
    105,
    102,
    116,
    95,
    97,
    100,
    100,
    115,
    117,
    98,
    0,
    110,
    111,
    110,
    45,
    122,
    101,
    114,
    111,
    32,
    115,
    99,
    97,
    108,
    101,
    32,
    105,
    110,
    32,
    101,
    120,
    112,
    111,
    110,
    101,
    110,
    116,
    0,
    101,
    120,
    112,
    111,
    110,
    101,
    110,
    116,
    32,
    116,
    111,
    111,
    32,
    108,
    97,
    114,
    103,
    101,
    32,
    105,
    110,
    32,
    114,
    97,
    105,
    115,
    101,
    0,
    37,
    108,
    100,
    0,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    65,
    66,
    67,
    68,
    69,
    70,
    0,
    17,
    0,
    10,
    0,
    17,
    17,
    17,
    0,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    0,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    17,
    0,
    15,
    10,
    17,
    17,
    17,
    3,
    10,
    7,
    0,
    1,
    19,
    9,
    11,
    11,
    0,
    0,
    9,
    6,
    11,
    0,
    0,
    11,
    0,
    6,
    17,
    0,
    0,
    0,
    17,
    17,
    17,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    17,
    0,
    10,
    10,
    17,
    17,
    17,
    0,
    10,
    0,
    0,
    2,
    0,
    9,
    11,
    0,
    0,
    0,
    9,
    0,
    11,
    0,
    0,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    9,
    12,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    14,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    13,
    0,
    0,
    0,
    4,
    13,
    0,
    0,
    0,
    0,
    9,
    14,
    0,
    0,
    0,
    0,
    0,
    14,
    0,
    0,
    14,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    16,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    15,
    0,
    0,
    0,
    0,
    15,
    0,
    0,
    0,
    0,
    9,
    16,
    0,
    0,
    0,
    0,
    0,
    16,
    0,
    0,
    16,
    0,
    0,
    18,
    0,
    0,
    0,
    18,
    18,
    18,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    18,
    0,
    0,
    0,
    18,
    18,
    18,
    0,
    0,
    0,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    9,
    11,
    0,
    0,
    0,
    0,
    0,
    11,
    0,
    0,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    0,
    9,
    12,
    0,
    0,
    0,
    0,
    0,
    12,
    0,
    0,
    12,
    0,
    0,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    65,
    66,
    67,
    68,
    69,
    70,
    45,
    43,
    32,
    32,
    32,
    48,
    88,
    48,
    120,
    0,
    84,
    33,
    34,
    25,
    13,
    1,
    2,
    3,
    17,
    75,
    28,
    12,
    16,
    4,
    11,
    29,
    18,
    30,
    39,
    104,
    110,
    111,
    112,
    113,
    98,
    32,
    5,
    6,
    15,
    19,
    20,
    21,
    26,
    8,
    22,
    7,
    40,
    36,
    23,
    24,
    9,
    10,
    14,
    27,
    31,
    37,
    35,
    131,
    130,
    125,
    38,
    42,
    43,
    60,
    61,
    62,
    63,
    67,
    71,
    74,
    77,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    99,
    100,
    101,
    102,
    103,
    105,
    106,
    107,
    108,
    114,
    115,
    116,
    121,
    122,
    123,
    124,
    0,
    73,
    108,
    108,
    101,
    103,
    97,
    108,
    32,
    98,
    121,
    116,
    101,
    32,
    115,
    101,
    113,
    117,
    101,
    110,
    99,
    101,
    0,
    68,
    111,
    109,
    97,
    105,
    110,
    32,
    101,
    114,
    114,
    111,
    114,
    0,
    82,
    101,
    115,
    117,
    108,
    116,
    32,
    110,
    111,
    116,
    32,
    114,
    101,
    112,
    114,
    101,
    115,
    101,
    110,
    116,
    97,
    98,
    108,
    101,
    0,
    78,
    111,
    116,
    32,
    97,
    32,
    116,
    116,
    121,
    0,
    80,
    101,
    114,
    109,
    105,
    115,
    115,
    105,
    111,
    110,
    32,
    100,
    101,
    110,
    105,
    101,
    100,
    0,
    79,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    110,
    111,
    116,
    32,
    112,
    101,
    114,
    109,
    105,
    116,
    116,
    101,
    100,
    0,
    78,
    111,
    32,
    115,
    117,
    99,
    104,
    32,
    102,
    105,
    108,
    101,
    32,
    111,
    114,
    32,
    100,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    121,
    0,
    78,
    111,
    32,
    115,
    117,
    99,
    104,
    32,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    0,
    70,
    105,
    108,
    101,
    32,
    101,
    120,
    105,
    115,
    116,
    115,
    0,
    86,
    97,
    108,
    117,
    101,
    32,
    116,
    111,
    111,
    32,
    108,
    97,
    114,
    103,
    101,
    32,
    102,
    111,
    114,
    32,
    100,
    97,
    116,
    97,
    32,
    116,
    121,
    112,
    101,
    0,
    78,
    111,
    32,
    115,
    112,
    97,
    99,
    101,
    32,
    108,
    101,
    102,
    116,
    32,
    111,
    110,
    32,
    100,
    101,
    118,
    105,
    99,
    101,
    0,
    79,
    117,
    116,
    32,
    111,
    102,
    32,
    109,
    101,
    109,
    111,
    114,
    121,
    0,
    82,
    101,
    115,
    111,
    117,
    114,
    99,
    101,
    32,
    98,
    117,
    115,
    121,
    0,
    73,
    110,
    116,
    101,
    114,
    114,
    117,
    112,
    116,
    101,
    100,
    32,
    115,
    121,
    115,
    116,
    101,
    109,
    32,
    99,
    97,
    108,
    108,
    0,
    82,
    101,
    115,
    111,
    117,
    114,
    99,
    101,
    32,
    116,
    101,
    109,
    112,
    111,
    114,
    97,
    114,
    105,
    108,
    121,
    32,
    117,
    110,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    73,
    110,
    118,
    97,
    108,
    105,
    100,
    32,
    115,
    101,
    101,
    107,
    0,
    67,
    114,
    111,
    115,
    115,
    45,
    100,
    101,
    118,
    105,
    99,
    101,
    32,
    108,
    105,
    110,
    107,
    0,
    82,
    101,
    97,
    100,
    45,
    111,
    110,
    108,
    121,
    32,
    102,
    105,
    108,
    101,
    32,
    115,
    121,
    115,
    116,
    101,
    109,
    0,
    68,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    121,
    32,
    110,
    111,
    116,
    32,
    101,
    109,
    112,
    116,
    121,
    0,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    114,
    101,
    115,
    101,
    116,
    32,
    98,
    121,
    32,
    112,
    101,
    101,
    114,
    0,
    79,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    116,
    105,
    109,
    101,
    100,
    32,
    111,
    117,
    116,
    0,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    114,
    101,
    102,
    117,
    115,
    101,
    100,
    0,
    72,
    111,
    115,
    116,
    32,
    105,
    115,
    32,
    100,
    111,
    119,
    110,
    0,
    72,
    111,
    115,
    116,
    32,
    105,
    115,
    32,
    117,
    110,
    114,
    101,
    97,
    99,
    104,
    97,
    98,
    108,
    101,
    0,
    65,
    100,
    100,
    114,
    101,
    115,
    115,
    32,
    105,
    110,
    32,
    117,
    115,
    101,
    0,
    66,
    114,
    111,
    107,
    101,
    110,
    32,
    112,
    105,
    112,
    101,
    0,
    73,
    47,
    79,
    32,
    101,
    114,
    114,
    111,
    114,
    0,
    78,
    111,
    32,
    115,
    117,
    99,
    104,
    32,
    100,
    101,
    118,
    105,
    99,
    101,
    32,
    111,
    114,
    32,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    0,
    66,
    108,
    111,
    99,
    107,
    32,
    100,
    101,
    118,
    105,
    99,
    101,
    32,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    100,
    0,
    78,
    111,
    32,
    115,
    117,
    99,
    104,
    32,
    100,
    101,
    118,
    105,
    99,
    101,
    0,
    78,
    111,
    116,
    32,
    97,
    32,
    100,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    121,
    0,
    73,
    115,
    32,
    97,
    32,
    100,
    105,
    114,
    101,
    99,
    116,
    111,
    114,
    121,
    0,
    84,
    101,
    120,
    116,
    32,
    102,
    105,
    108,
    101,
    32,
    98,
    117,
    115,
    121,
    0,
    69,
    120,
    101,
    99,
    32,
    102,
    111,
    114,
    109,
    97,
    116,
    32,
    101,
    114,
    114,
    111,
    114,
    0,
    73,
    110,
    118,
    97,
    108,
    105,
    100,
    32,
    97,
    114,
    103,
    117,
    109,
    101,
    110,
    116,
    0,
    65,
    114,
    103,
    117,
    109,
    101,
    110,
    116,
    32,
    108,
    105,
    115,
    116,
    32,
    116,
    111,
    111,
    32,
    108,
    111,
    110,
    103,
    0,
    83,
    121,
    109,
    98,
    111,
    108,
    105,
    99,
    32,
    108,
    105,
    110,
    107,
    32,
    108,
    111,
    111,
    112,
    0,
    70,
    105,
    108,
    101,
    110,
    97,
    109,
    101,
    32,
    116,
    111,
    111,
    32,
    108,
    111,
    110,
    103,
    0,
    84,
    111,
    111,
    32,
    109,
    97,
    110,
    121,
    32,
    111,
    112,
    101,
    110,
    32,
    102,
    105,
    108,
    101,
    115,
    32,
    105,
    110,
    32,
    115,
    121,
    115,
    116,
    101,
    109,
    0,
    78,
    111,
    32,
    102,
    105,
    108,
    101,
    32,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    111,
    114,
    115,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    66,
    97,
    100,
    32,
    102,
    105,
    108,
    101,
    32,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    111,
    114,
    0,
    78,
    111,
    32,
    99,
    104,
    105,
    108,
    100,
    32,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    0,
    66,
    97,
    100,
    32,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    0,
    70,
    105,
    108,
    101,
    32,
    116,
    111,
    111,
    32,
    108,
    97,
    114,
    103,
    101,
    0,
    84,
    111,
    111,
    32,
    109,
    97,
    110,
    121,
    32,
    108,
    105,
    110,
    107,
    115,
    0,
    78,
    111,
    32,
    108,
    111,
    99,
    107,
    115,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    82,
    101,
    115,
    111,
    117,
    114,
    99,
    101,
    32,
    100,
    101,
    97,
    100,
    108,
    111,
    99,
    107,
    32,
    119,
    111,
    117,
    108,
    100,
    32,
    111,
    99,
    99,
    117,
    114,
    0,
    83,
    116,
    97,
    116,
    101,
    32,
    110,
    111,
    116,
    32,
    114,
    101,
    99,
    111,
    118,
    101,
    114,
    97,
    98,
    108,
    101,
    0,
    80,
    114,
    101,
    118,
    105,
    111,
    117,
    115,
    32,
    111,
    119,
    110,
    101,
    114,
    32,
    100,
    105,
    101,
    100,
    0,
    79,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    99,
    97,
    110,
    99,
    101,
    108,
    101,
    100,
    0,
    70,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    32,
    110,
    111,
    116,
    32,
    105,
    109,
    112,
    108,
    101,
    109,
    101,
    110,
    116,
    101,
    100,
    0,
    78,
    111,
    32,
    109,
    101,
    115,
    115,
    97,
    103,
    101,
    32,
    111,
    102,
    32,
    100,
    101,
    115,
    105,
    114,
    101,
    100,
    32,
    116,
    121,
    112,
    101,
    0,
    73,
    100,
    101,
    110,
    116,
    105,
    102,
    105,
    101,
    114,
    32,
    114,
    101,
    109,
    111,
    118,
    101,
    100,
    0,
    68,
    101,
    118,
    105,
    99,
    101,
    32,
    110,
    111,
    116,
    32,
    97,
    32,
    115,
    116,
    114,
    101,
    97,
    109,
    0,
    78,
    111,
    32,
    100,
    97,
    116,
    97,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    68,
    101,
    118,
    105,
    99,
    101,
    32,
    116,
    105,
    109,
    101,
    111,
    117,
    116,
    0,
    79,
    117,
    116,
    32,
    111,
    102,
    32,
    115,
    116,
    114,
    101,
    97,
    109,
    115,
    32,
    114,
    101,
    115,
    111,
    117,
    114,
    99,
    101,
    115,
    0,
    76,
    105,
    110,
    107,
    32,
    104,
    97,
    115,
    32,
    98,
    101,
    101,
    110,
    32,
    115,
    101,
    118,
    101,
    114,
    101,
    100,
    0,
    80,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    32,
    101,
    114,
    114,
    111,
    114,
    0,
    66,
    97,
    100,
    32,
    109,
    101,
    115,
    115,
    97,
    103,
    101,
    0,
    70,
    105,
    108,
    101,
    32,
    100,
    101,
    115,
    99,
    114,
    105,
    112,
    116,
    111,
    114,
    32,
    105,
    110,
    32,
    98,
    97,
    100,
    32,
    115,
    116,
    97,
    116,
    101,
    0,
    78,
    111,
    116,
    32,
    97,
    32,
    115,
    111,
    99,
    107,
    101,
    116,
    0,
    68,
    101,
    115,
    116,
    105,
    110,
    97,
    116,
    105,
    111,
    110,
    32,
    97,
    100,
    100,
    114,
    101,
    115,
    115,
    32,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    100,
    0,
    77,
    101,
    115,
    115,
    97,
    103,
    101,
    32,
    116,
    111,
    111,
    32,
    108,
    97,
    114,
    103,
    101,
    0,
    80,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    32,
    119,
    114,
    111,
    110,
    103,
    32,
    116,
    121,
    112,
    101,
    32,
    102,
    111,
    114,
    32,
    115,
    111,
    99,
    107,
    101,
    116,
    0,
    80,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    32,
    110,
    111,
    116,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    80,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    32,
    110,
    111,
    116,
    32,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    100,
    0,
    83,
    111,
    99,
    107,
    101,
    116,
    32,
    116,
    121,
    112,
    101,
    32,
    110,
    111,
    116,
    32,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    100,
    0,
    78,
    111,
    116,
    32,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    100,
    0,
    80,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    32,
    102,
    97,
    109,
    105,
    108,
    121,
    32,
    110,
    111,
    116,
    32,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    100,
    0,
    65,
    100,
    100,
    114,
    101,
    115,
    115,
    32,
    102,
    97,
    109,
    105,
    108,
    121,
    32,
    110
], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 10240);
allocate([
    111,
    116,
    32,
    115,
    117,
    112,
    112,
    111,
    114,
    116,
    101,
    100,
    32,
    98,
    121,
    32,
    112,
    114,
    111,
    116,
    111,
    99,
    111,
    108,
    0,
    65,
    100,
    100,
    114,
    101,
    115,
    115,
    32,
    110,
    111,
    116,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    78,
    101,
    116,
    119,
    111,
    114,
    107,
    32,
    105,
    115,
    32,
    100,
    111,
    119,
    110,
    0,
    78,
    101,
    116,
    119,
    111,
    114,
    107,
    32,
    117,
    110,
    114,
    101,
    97,
    99,
    104,
    97,
    98,
    108,
    101,
    0,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    114,
    101,
    115,
    101,
    116,
    32,
    98,
    121,
    32,
    110,
    101,
    116,
    119,
    111,
    114,
    107,
    0,
    67,
    111,
    110,
    110,
    101,
    99,
    116,
    105,
    111,
    110,
    32,
    97,
    98,
    111,
    114,
    116,
    101,
    100,
    0,
    78,
    111,
    32,
    98,
    117,
    102,
    102,
    101,
    114,
    32,
    115,
    112,
    97,
    99,
    101,
    32,
    97,
    118,
    97,
    105,
    108,
    97,
    98,
    108,
    101,
    0,
    83,
    111,
    99,
    107,
    101,
    116,
    32,
    105,
    115,
    32,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    101,
    100,
    0,
    83,
    111,
    99,
    107,
    101,
    116,
    32,
    110,
    111,
    116,
    32,
    99,
    111,
    110,
    110,
    101,
    99,
    116,
    101,
    100,
    0,
    67,
    97,
    110,
    110,
    111,
    116,
    32,
    115,
    101,
    110,
    100,
    32,
    97,
    102,
    116,
    101,
    114,
    32,
    115,
    111,
    99,
    107,
    101,
    116,
    32,
    115,
    104,
    117,
    116,
    100,
    111,
    119,
    110,
    0,
    79,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    97,
    108,
    114,
    101,
    97,
    100,
    121,
    32,
    105,
    110,
    32,
    112,
    114,
    111,
    103,
    114,
    101,
    115,
    115,
    0,
    79,
    112,
    101,
    114,
    97,
    116,
    105,
    111,
    110,
    32,
    105,
    110,
    32,
    112,
    114,
    111,
    103,
    114,
    101,
    115,
    115,
    0,
    83,
    116,
    97,
    108,
    101,
    32,
    102,
    105,
    108,
    101,
    32,
    104,
    97,
    110,
    100,
    108,
    101,
    0,
    82,
    101,
    109,
    111,
    116,
    101,
    32,
    73,
    47,
    79,
    32,
    101,
    114,
    114,
    111,
    114,
    0,
    81,
    117,
    111,
    116,
    97,
    32,
    101,
    120,
    99,
    101,
    101,
    100,
    101,
    100,
    0,
    78,
    111,
    32,
    109,
    101,
    100,
    105,
    117,
    109,
    32,
    102,
    111,
    117,
    110,
    100,
    0,
    87,
    114,
    111,
    110,
    103,
    32,
    109,
    101,
    100,
    105,
    117,
    109,
    32,
    116,
    121,
    112,
    101,
    0,
    78,
    111,
    32,
    101,
    114,
    114,
    111,
    114,
    32,
    105,
    110,
    102,
    111,
    114,
    109,
    97,
    116,
    105,
    111,
    110,
    0,
    0,
    40,
    110,
    117,
    108,
    108,
    41,
    0,
    45,
    48,
    88,
    43,
    48,
    88,
    32,
    48,
    88,
    45,
    48,
    120,
    43,
    48,
    120,
    32,
    48,
    120,
    0,
    105,
    110,
    102,
    0,
    73,
    78,
    70,
    0,
    110,
    97,
    110,
    0,
    78,
    65,
    78,
    0,
    46,
    0,
    58,
    32,
    105,
    108,
    108,
    101,
    103,
    97,
    108,
    32,
    111,
    112,
    116,
    105,
    111,
    110,
    58,
    32,
    0,
    10,
    0,
    58,
    32,
    111,
    112,
    116,
    105,
    111,
    110,
    32,
    114,
    101,
    113,
    117,
    105,
    114,
    101,
    115,
    32,
    97,
    110,
    32,
    97,
    114,
    103,
    117,
    109,
    101,
    110,
    116,
    58,
    32,
    0,
    114,
    119,
    97,
    0
], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 20480);
var tempDoublePtr = STATICTOP;
STATICTOP += 16;
function ___setErrNo(value) {
    if (Module["___errno_location"])
        HEAP32[Module["___errno_location"]() >> 2] = value;
    return value;
}
var ERRNO_CODES = {
    EPERM: 1,
    ENOENT: 2,
    ESRCH: 3,
    EINTR: 4,
    EIO: 5,
    ENXIO: 6,
    E2BIG: 7,
    ENOEXEC: 8,
    EBADF: 9,
    ECHILD: 10,
    EAGAIN: 11,
    EWOULDBLOCK: 11,
    ENOMEM: 12,
    EACCES: 13,
    EFAULT: 14,
    ENOTBLK: 15,
    EBUSY: 16,
    EEXIST: 17,
    EXDEV: 18,
    ENODEV: 19,
    ENOTDIR: 20,
    EISDIR: 21,
    EINVAL: 22,
    ENFILE: 23,
    EMFILE: 24,
    ENOTTY: 25,
    ETXTBSY: 26,
    EFBIG: 27,
    ENOSPC: 28,
    ESPIPE: 29,
    EROFS: 30,
    EMLINK: 31,
    EPIPE: 32,
    EDOM: 33,
    ERANGE: 34,
    ENOMSG: 42,
    EIDRM: 43,
    ECHRNG: 44,
    EL2NSYNC: 45,
    EL3HLT: 46,
    EL3RST: 47,
    ELNRNG: 48,
    EUNATCH: 49,
    ENOCSI: 50,
    EL2HLT: 51,
    EDEADLK: 35,
    ENOLCK: 37,
    EBADE: 52,
    EBADR: 53,
    EXFULL: 54,
    ENOANO: 55,
    EBADRQC: 56,
    EBADSLT: 57,
    EDEADLOCK: 35,
    EBFONT: 59,
    ENOSTR: 60,
    ENODATA: 61,
    ETIME: 62,
    ENOSR: 63,
    ENONET: 64,
    ENOPKG: 65,
    EREMOTE: 66,
    ENOLINK: 67,
    EADV: 68,
    ESRMNT: 69,
    ECOMM: 70,
    EPROTO: 71,
    EMULTIHOP: 72,
    EDOTDOT: 73,
    EBADMSG: 74,
    ENOTUNIQ: 76,
    EBADFD: 77,
    EREMCHG: 78,
    ELIBACC: 79,
    ELIBBAD: 80,
    ELIBSCN: 81,
    ELIBMAX: 82,
    ELIBEXEC: 83,
    ENOSYS: 38,
    ENOTEMPTY: 39,
    ENAMETOOLONG: 36,
    ELOOP: 40,
    EOPNOTSUPP: 95,
    EPFNOSUPPORT: 96,
    ECONNRESET: 104,
    ENOBUFS: 105,
    EAFNOSUPPORT: 97,
    EPROTOTYPE: 91,
    ENOTSOCK: 88,
    ENOPROTOOPT: 92,
    ESHUTDOWN: 108,
    ECONNREFUSED: 111,
    EADDRINUSE: 98,
    ECONNABORTED: 103,
    ENETUNREACH: 101,
    ENETDOWN: 100,
    ETIMEDOUT: 110,
    EHOSTDOWN: 112,
    EHOSTUNREACH: 113,
    EINPROGRESS: 115,
    EALREADY: 114,
    EDESTADDRREQ: 89,
    EMSGSIZE: 90,
    EPROTONOSUPPORT: 93,
    ESOCKTNOSUPPORT: 94,
    EADDRNOTAVAIL: 99,
    ENETRESET: 102,
    EISCONN: 106,
    ENOTCONN: 107,
    ETOOMANYREFS: 109,
    EUSERS: 87,
    EDQUOT: 122,
    ESTALE: 116,
    ENOTSUP: 95,
    ENOMEDIUM: 123,
    EILSEQ: 84,
    EOVERFLOW: 75,
    ECANCELED: 125,
    ENOTRECOVERABLE: 131,
    EOWNERDEAD: 130,
    ESTRPIPE: 86
};
function _sysconf(name) {
    switch (name) {
    case 30:
        return PAGE_SIZE;
    case 85:
        return totalMemory / PAGE_SIZE;
    case 132:
    case 133:
    case 12:
    case 137:
    case 138:
    case 15:
    case 235:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 149:
    case 13:
    case 10:
    case 236:
    case 153:
    case 9:
    case 21:
    case 22:
    case 159:
    case 154:
    case 14:
    case 77:
    case 78:
    case 139:
    case 80:
    case 81:
    case 82:
    case 68:
    case 67:
    case 164:
    case 11:
    case 29:
    case 47:
    case 48:
    case 95:
    case 52:
    case 51:
    case 46:
        return 200809;
    case 79:
        return 0;
    case 27:
    case 246:
    case 127:
    case 128:
    case 23:
    case 24:
    case 160:
    case 161:
    case 181:
    case 182:
    case 242:
    case 183:
    case 184:
    case 243:
    case 244:
    case 245:
    case 165:
    case 178:
    case 179:
    case 49:
    case 50:
    case 168:
    case 169:
    case 175:
    case 170:
    case 171:
    case 172:
    case 97:
    case 76:
    case 32:
    case 173:
    case 35:
        return -1;
    case 176:
    case 177:
    case 7:
    case 155:
    case 8:
    case 157:
    case 125:
    case 126:
    case 92:
    case 93:
    case 129:
    case 130:
    case 131:
    case 94:
    case 91:
        return 1;
    case 74:
    case 60:
    case 69:
    case 70:
    case 4:
        return 1024;
    case 31:
    case 42:
    case 72:
        return 32;
    case 87:
    case 26:
    case 33:
        return 2147483647;
    case 34:
    case 1:
        return 47839;
    case 38:
    case 36:
        return 99;
    case 43:
    case 37:
        return 2048;
    case 0:
        return 2097152;
    case 3:
        return 65536;
    case 28:
        return 32768;
    case 44:
        return 32767;
    case 75:
        return 16384;
    case 39:
        return 1e3;
    case 89:
        return 700;
    case 71:
        return 256;
    case 40:
        return 255;
    case 2:
        return 100;
    case 180:
        return 64;
    case 25:
        return 20;
    case 5:
        return 16;
    case 6:
        return 6;
    case 73:
        return 4;
    case 84: {
            if (typeof navigator === "object")
                return navigator["hardwareConcurrency"] || 1;
            return 1;
        }
    }
    ___setErrNo(ERRNO_CODES.EINVAL);
    return -1;
}
Module["_i64Subtract"] = _i64Subtract;
function ___assert_fail(condition, filename, line, func) {
    ABORT = true;
    throw "Assertion failed: " + Pointer_stringify(condition) + ", at: " + [
        filename ? Pointer_stringify(filename) : "unknown filename",
        line,
        func ? Pointer_stringify(func) : "unknown function"
    ] + " at " + stackTrace();
}
Module["_memset"] = _memset;
function _pthread_cleanup_push(routine, arg) {
    __ATEXIT__.push(function () {
        Runtime.dynCall("vi", routine, [arg]);
    });
    _pthread_cleanup_push.level = __ATEXIT__.length;
}
Module["_bitshift64Lshr"] = _bitshift64Lshr;
var _environ = STATICTOP;
STATICTOP += 16;
function ___buildEnvironment(env) {
    var MAX_ENV_VALUES = 64;
    var TOTAL_ENV_SIZE = 1024;
    var poolPtr;
    var envPtr;
    if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        ENV["USER"] = ENV["LOGNAME"] = "web_user";
        ENV["PATH"] = "/";
        ENV["PWD"] = "/";
        ENV["HOME"] = "/home/web_user";
        ENV["LANG"] = "C";
        ENV["_"] = Module["thisProgram"];
        poolPtr = allocate(TOTAL_ENV_SIZE, "i8", ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4, "i8*", ALLOC_STATIC);
        HEAP32[envPtr >> 2] = poolPtr;
        HEAP32[_environ >> 2] = envPtr;
    } else {
        envPtr = HEAP32[_environ >> 2];
        poolPtr = HEAP32[envPtr >> 2];
    }
    var strings = [];
    var totalSize = 0;
    for (var key in env) {
        if (typeof env[key] === "string") {
            var line = key + "=" + env[key];
            strings.push(line);
            totalSize += line.length;
        }
    }
    if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error("Environment size exceeded TOTAL_ENV_SIZE!");
    }
    var ptrSize = 4;
    for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[envPtr + i * ptrSize >> 2] = poolPtr;
        poolPtr += line.length + 1;
    }
    HEAP32[envPtr + strings.length * ptrSize >> 2] = 0;
}
var ENV = {};
function _getenv(name) {
    if (name === 0)
        return 0;
    name = Pointer_stringify(name);
    if (!ENV.hasOwnProperty(name))
        return 0;
    if (_getenv.ret)
        _free(_getenv.ret);
    _getenv.ret = allocate(intArrayFromString(ENV[name]), "i8", ALLOC_NORMAL);
    return _getenv.ret;
}
Module["_bitshift64Shl"] = _bitshift64Shl;
function _pthread_cleanup_pop() {
    assert(_pthread_cleanup_push.level == __ATEXIT__.length, "cannot pop if something else added meanwhile!");
    __ATEXIT__.pop();
    _pthread_cleanup_push.level = __ATEXIT__.length;
}
function _abort() {
    Module["abort"]();
}
var ERRNO_MESSAGES = {
    0: "Success",
    1: "Not super-user",
    2: "No such file or directory",
    3: "No such process",
    4: "Interrupted system call",
    5: "I/O error",
    6: "No such device or address",
    7: "Arg list too long",
    8: "Exec format error",
    9: "Bad file number",
    10: "No children",
    11: "No more processes",
    12: "Not enough core",
    13: "Permission denied",
    14: "Bad address",
    15: "Block device required",
    16: "Mount device busy",
    17: "File exists",
    18: "Cross-device link",
    19: "No such device",
    20: "Not a directory",
    21: "Is a directory",
    22: "Invalid argument",
    23: "Too many open files in system",
    24: "Too many open files",
    25: "Not a typewriter",
    26: "Text file busy",
    27: "File too large",
    28: "No space left on device",
    29: "Illegal seek",
    30: "Read only file system",
    31: "Too many links",
    32: "Broken pipe",
    33: "Math arg out of domain of func",
    34: "Math result not representable",
    35: "File locking deadlock error",
    36: "File or path name too long",
    37: "No record locks available",
    38: "Function not implemented",
    39: "Directory not empty",
    40: "Too many symbolic links",
    42: "No message of desired type",
    43: "Identifier removed",
    44: "Channel number out of range",
    45: "Level 2 not synchronized",
    46: "Level 3 halted",
    47: "Level 3 reset",
    48: "Link number out of range",
    49: "Protocol driver not attached",
    50: "No CSI structure available",
    51: "Level 2 halted",
    52: "Invalid exchange",
    53: "Invalid request descriptor",
    54: "Exchange full",
    55: "No anode",
    56: "Invalid request code",
    57: "Invalid slot",
    59: "Bad font file fmt",
    60: "Device not a stream",
    61: "No data (for no delay io)",
    62: "Timer expired",
    63: "Out of streams resources",
    64: "Machine is not on the network",
    65: "Package not installed",
    66: "The object is remote",
    67: "The link has been severed",
    68: "Advertise error",
    69: "Srmount error",
    70: "Communication error on send",
    71: "Protocol error",
    72: "Multihop attempted",
    73: "Cross mount point (not really error)",
    74: "Trying to read unreadable message",
    75: "Value too large for defined data type",
    76: "Given log. name not unique",
    77: "f.d. invalid for this operation",
    78: "Remote address changed",
    79: "Can   access a needed shared lib",
    80: "Accessing a corrupted shared lib",
    81: ".lib section in a.out corrupted",
    82: "Attempting to link in too many libs",
    83: "Attempting to exec a shared library",
    84: "Illegal byte sequence",
    86: "Streams pipe error",
    87: "Too many users",
    88: "Socket operation on non-socket",
    89: "Destination address required",
    90: "Message too long",
    91: "Protocol wrong type for socket",
    92: "Protocol not available",
    93: "Unknown protocol",
    94: "Socket type not supported",
    95: "Not supported",
    96: "Protocol family not supported",
    97: "Address family not supported by protocol family",
    98: "Address already in use",
    99: "Address not available",
    100: "Network interface is not configured",
    101: "Network is unreachable",
    102: "Connection reset by network",
    103: "Connection aborted",
    104: "Connection reset by peer",
    105: "No buffer space available",
    106: "Socket is already connected",
    107: "Socket is not connected",
    108: "Can't send after socket shutdown",
    109: "Too many references",
    110: "Connection timed out",
    111: "Connection refused",
    112: "Host is down",
    113: "Host is unreachable",
    114: "Socket already connected",
    115: "Connection already in progress",
    116: "Stale file handle",
    122: "Quota exceeded",
    123: "No medium (in tape drive)",
    125: "Operation canceled",
    130: "Previous owner died",
    131: "State not recoverable"
};
var PATH = {
    splitPath: function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
    },
    normalizeArray: function (parts, allowAboveRoot) {
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === ".") {
                parts.splice(i, 1);
            } else if (last === "..") {
                parts.splice(i, 1);
                up++;
            } else if (up) {
                parts.splice(i, 1);
                up--;
            }
        }
        if (allowAboveRoot) {
            for (; up--; up) {
                parts.unshift("..");
            }
        }
        return parts;
    },
    normalize: function (path) {
        var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
        path = PATH.normalizeArray(path.split("/").filter(function (p) {
            return !!p;
        }), !isAbsolute).join("/");
        if (!path && !isAbsolute) {
            path = ".";
        }
        if (path && trailingSlash) {
            path += "/";
        }
        return (isAbsolute ? "/" : "") + path;
    },
    dirname: function (path) {
        var result = PATH.splitPath(path), root = result[0], dir = result[1];
        if (!root && !dir) {
            return ".";
        }
        if (dir) {
            dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
    },
    basename: function (path) {
        if (path === "/")
            return "/";
        var lastSlash = path.lastIndexOf("/");
        if (lastSlash === -1)
            return path;
        return path.substr(lastSlash + 1);
    },
    extname: function (path) {
        return PATH.splitPath(path)[3];
    },
    join: function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join("/"));
    },
    join2: function (l, r) {
        return PATH.normalize(l + "/" + r);
    },
    resolve: function () {
        var resolvedPath = "", resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = i >= 0 ? arguments[i] : FS.cwd();
            if (typeof path !== "string") {
                throw new TypeError("Arguments to path.resolve must be strings");
            } else if (!path) {
                return "";
            }
            resolvedPath = path + "/" + resolvedPath;
            resolvedAbsolute = path.charAt(0) === "/";
        }
        resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function (p) {
            return !!p;
        }), !resolvedAbsolute).join("/");
        return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
    },
    relative: function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
                if (arr[start] !== "")
                    break;
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
                if (arr[end] !== "")
                    break;
            }
            if (start > end)
                return [];
            return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split("/"));
        var toParts = trim(to.split("/"));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break;
            }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push("..");
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join("/");
    }
};
var TTY = {
    ttys: [],
    init: function () {
    },
    shutdown: function () {
    },
    register: function (dev, ops) {
        TTY.ttys[dev] = {
            input: [],
            output: [],
            ops: ops
        };
        FS.registerDevice(dev, TTY.stream_ops);
    },
    stream_ops: {
        open: function (stream) {
            var tty = TTY.ttys[stream.node.rdev];
            if (!tty) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
            }
            stream.tty = tty;
            stream.seekable = false;
        },
        close: function (stream) {
            stream.tty.ops.flush(stream.tty);
        },
        flush: function (stream) {
            stream.tty.ops.flush(stream.tty);
        },
        read: function (stream, buffer, offset, length, pos) {
            if (!stream.tty || !stream.tty.ops.get_char) {
                throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
            }
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
                var result;
                try {
                    result = stream.tty.ops.get_char(stream.tty);
                } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
                if (result === undefined && bytesRead === 0) {
                    throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                }
                if (result === null || result === undefined)
                    break;
                bytesRead++;
                buffer[offset + i] = result;
            }
            if (bytesRead) {
                stream.node.timestamp = Date.now();
            }
            return bytesRead;
        },
        write: function (stream, buffer, offset, length, pos) {
            if (!stream.tty || !stream.tty.ops.put_char) {
                throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
            }
            for (var i = 0; i < length; i++) {
                try {
                    stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
                } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
            }
            if (length) {
                stream.node.timestamp = Date.now();
            }
            return i;
        }
    },
    default_tty_ops: {
        get_char: function (tty) {
            if (!tty.input.length) {
                var result = null;
                if (ENVIRONMENT_IS_NODE) {
                    var BUFSIZE = 256;
                    var buf = new Buffer(BUFSIZE);
                    var bytesRead = 0;
                    var fd = process.stdin.fd;
                    var usingDevice = false;
                    try {
                        fd = fs.openSync("/dev/stdin", "r");
                        usingDevice = true;
                    } catch (e) {
                    }
                    bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
                    if (usingDevice) {
                        fs.closeSync(fd);
                    }
                    if (bytesRead > 0) {
                        result = buf.slice(0, bytesRead).toString("utf-8");
                    } else {
                        result = null;
                    }
                } else if (typeof window != "undefined" && typeof window.prompt == "function") {
                    result = window.prompt("Input: ");
                    if (result !== null) {
                        result += "\n";
                    }
                } else if (typeof readline == "function") {
                    result = readline();
                    if (result !== null) {
                        result += "\n";
                    }
                }
                if (!result) {
                    return null;
                }
                tty.input = intArrayFromString(result, true);
            }
            return tty.input.shift();
        },
        put_char: function (tty, val) {
            if (val === null || val === 10) {
                Module["print"](UTF8ArrayToString(tty.output, 0));
                tty.output = [];
            } else {
                if (val != 0)
                    tty.output.push(val);
            }
        },
        flush: function (tty) {
            if (tty.output && tty.output.length > 0) {
                Module["print"](UTF8ArrayToString(tty.output, 0));
                tty.output = [];
            }
        }
    },
    default_tty1_ops: {
        put_char: function (tty, val) {
            if (val === null || val === 10) {
                Module["printErr"](UTF8ArrayToString(tty.output, 0));
                tty.output = [];
            } else {
                if (val != 0)
                    tty.output.push(val);
            }
        },
        flush: function (tty) {
            if (tty.output && tty.output.length > 0) {
                Module["printErr"](UTF8ArrayToString(tty.output, 0));
                tty.output = [];
            }
        }
    }
};
var MEMFS = {
    ops_table: null,
    mount: function (mount) {
        return MEMFS.createNode(null, "/", 16384 | 511, 0);
    },
    createNode: function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
            MEMFS.ops_table = {
                dir: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        lookup: MEMFS.node_ops.lookup,
                        mknod: MEMFS.node_ops.mknod,
                        rename: MEMFS.node_ops.rename,
                        unlink: MEMFS.node_ops.unlink,
                        rmdir: MEMFS.node_ops.rmdir,
                        readdir: MEMFS.node_ops.readdir,
                        symlink: MEMFS.node_ops.symlink
                    },
                    stream: { llseek: MEMFS.stream_ops.llseek }
                },
                file: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: {
                        llseek: MEMFS.stream_ops.llseek,
                        read: MEMFS.stream_ops.read,
                        write: MEMFS.stream_ops.write,
                        allocate: MEMFS.stream_ops.allocate,
                        mmap: MEMFS.stream_ops.mmap,
                        msync: MEMFS.stream_ops.msync
                    }
                },
                link: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        readlink: MEMFS.node_ops.readlink
                    },
                    stream: {}
                },
                chrdev: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: FS.chrdev_stream_ops
                }
            };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
            node.node_ops = MEMFS.ops_table.dir.node;
            node.stream_ops = MEMFS.ops_table.dir.stream;
            node.contents = {};
        } else if (FS.isFile(node.mode)) {
            node.node_ops = MEMFS.ops_table.file.node;
            node.stream_ops = MEMFS.ops_table.file.stream;
            node.usedBytes = 0;
            node.contents = null;
        } else if (FS.isLink(node.mode)) {
            node.node_ops = MEMFS.ops_table.link.node;
            node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
            node.node_ops = MEMFS.ops_table.chrdev.node;
            node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        if (parent) {
            parent.contents[name] = node;
        }
        return node;
    },
    getFileDataAsRegularArray: function (node) {
        if (node.contents && node.contents.subarray) {
            var arr = [];
            for (var i = 0; i < node.usedBytes; ++i)
                arr.push(node.contents[i]);
            return arr;
        }
        return node.contents;
    },
    getFileDataAsTypedArray: function (node) {
        if (!node.contents)
            return new Uint8Array();
        if (node.contents.subarray)
            return node.contents.subarray(0, node.usedBytes);
        return new Uint8Array(node.contents);
    },
    expandFileStorage: function (node, newCapacity) {
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
            node.contents = MEMFS.getFileDataAsRegularArray(node);
            node.usedBytes = node.contents.length;
        }
        if (!node.contents || node.contents.subarray) {
            var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
            if (prevCapacity >= newCapacity)
                return;
            var CAPACITY_DOUBLING_MAX = 1024 * 1024;
            newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0);
            if (prevCapacity != 0)
                newCapacity = Math.max(newCapacity, 256);
            var oldContents = node.contents;
            node.contents = new Uint8Array(newCapacity);
            if (node.usedBytes > 0)
                node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
            return;
        }
        if (!node.contents && newCapacity > 0)
            node.contents = [];
        while (node.contents.length < newCapacity)
            node.contents.push(0);
    },
    resizeFileStorage: function (node, newSize) {
        if (node.usedBytes == newSize)
            return;
        if (newSize == 0) {
            node.contents = null;
            node.usedBytes = 0;
            return;
        }
        if (!node.contents || node.contents.subarray) {
            var oldContents = node.contents;
            node.contents = new Uint8Array(new ArrayBuffer(newSize));
            if (oldContents) {
                node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
            }
            node.usedBytes = newSize;
            return;
        }
        if (!node.contents)
            node.contents = [];
        if (node.contents.length > newSize)
            node.contents.length = newSize;
        else
            while (node.contents.length < newSize)
                node.contents.push(0);
        node.usedBytes = newSize;
    },
    node_ops: {
        getattr: function (node) {
            var attr = {};
            attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
            attr.ino = node.id;
            attr.mode = node.mode;
            attr.nlink = 1;
            attr.uid = 0;
            attr.gid = 0;
            attr.rdev = node.rdev;
            if (FS.isDir(node.mode)) {
                attr.size = 4096;
            } else if (FS.isFile(node.mode)) {
                attr.size = node.usedBytes;
            } else if (FS.isLink(node.mode)) {
                attr.size = node.link.length;
            } else {
                attr.size = 0;
            }
            attr.atime = new Date(node.timestamp);
            attr.mtime = new Date(node.timestamp);
            attr.ctime = new Date(node.timestamp);
            attr.blksize = 4096;
            attr.blocks = Math.ceil(attr.size / attr.blksize);
            return attr;
        },
        setattr: function (node, attr) {
            if (attr.mode !== undefined) {
                node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
                node.timestamp = attr.timestamp;
            }
            if (attr.size !== undefined) {
                MEMFS.resizeFileStorage(node, attr.size);
            }
        },
        lookup: function (parent, name) {
            throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },
        mknod: function (parent, name, mode, dev) {
            return MEMFS.createNode(parent, name, mode, dev);
        },
        rename: function (old_node, new_dir, new_name) {
            if (FS.isDir(old_node.mode)) {
                var new_node;
                try {
                    new_node = FS.lookupNode(new_dir, new_name);
                } catch (e) {
                }
                if (new_node) {
                    for (var i in new_node.contents) {
                        throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
                    }
                }
            }
            delete old_node.parent.contents[old_node.name];
            old_node.name = new_name;
            new_dir.contents[new_name] = old_node;
            old_node.parent = new_dir;
        },
        unlink: function (parent, name) {
            delete parent.contents[name];
        },
        rmdir: function (parent, name) {
            var node = FS.lookupNode(parent, name);
            for (var i in node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
            }
            delete parent.contents[name];
        },
        readdir: function (node) {
            var entries = [
                ".",
                ".."
            ];
            for (var key in node.contents) {
                if (!node.contents.hasOwnProperty(key)) {
                    continue;
                }
                entries.push(key);
            }
            return entries;
        },
        symlink: function (parent, newname, oldpath) {
            var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
            node.link = oldpath;
            return node;
        },
        readlink: function (node) {
            if (!FS.isLink(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            return node.link;
        }
    },
    stream_ops: {
        read: function (stream, buffer, offset, length, position) {
            var contents = stream.node.contents;
            if (position >= stream.node.usedBytes)
                return 0;
            var size = Math.min(stream.node.usedBytes - position, length);
            assert(size >= 0);
            if (size > 8 && contents.subarray) {
                buffer.set(contents.subarray(position, position + size), offset);
            } else {
                for (var i = 0; i < size; i++)
                    buffer[offset + i] = contents[position + i];
            }
            return size;
        },
        write: function (stream, buffer, offset, length, position, canOwn) {
            if (!length)
                return 0;
            var node = stream.node;
            node.timestamp = Date.now();
            if (buffer.subarray && (!node.contents || node.contents.subarray)) {
                if (canOwn) {
                    node.contents = buffer.subarray(offset, offset + length);
                    node.usedBytes = length;
                    return length;
                } else if (node.usedBytes === 0 && position === 0) {
                    node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
                    node.usedBytes = length;
                    return length;
                } else if (position + length <= node.usedBytes) {
                    node.contents.set(buffer.subarray(offset, offset + length), position);
                    return length;
                }
            }
            MEMFS.expandFileStorage(node, position + length);
            if (node.contents.subarray && buffer.subarray)
                node.contents.set(buffer.subarray(offset, offset + length), position);
            else {
                for (var i = 0; i < length; i++) {
                    node.contents[position + i] = buffer[offset + i];
                }
            }
            node.usedBytes = Math.max(node.usedBytes, position + length);
            return length;
        },
        llseek: function (stream, offset, whence) {
            var position = offset;
            if (whence === 1) {
                position += stream.position;
            } else if (whence === 2) {
                if (FS.isFile(stream.node.mode)) {
                    position += stream.node.usedBytes;
                }
            }
            if (position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            return position;
        },
        allocate: function (stream, offset, length) {
            MEMFS.expandFileStorage(stream.node, offset + length);
            stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },
        mmap: function (stream, buffer, offset, length, position, prot, flags) {
            if (!FS.isFile(stream.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
            }
            var ptr;
            var allocated;
            var contents = stream.node.contents;
            if (!(flags & 2) && (contents.buffer === buffer || contents.buffer === buffer.buffer)) {
                allocated = false;
                ptr = contents.byteOffset;
            } else {
                if (position > 0 || position + length < stream.node.usedBytes) {
                    if (contents.subarray) {
                        contents = contents.subarray(position, position + length);
                    } else {
                        contents = Array.prototype.slice.call(contents, position, position + length);
                    }
                }
                allocated = true;
                ptr = _malloc(length);
                if (!ptr) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
                }
                buffer.set(contents, ptr);
            }
            return {
                ptr: ptr,
                allocated: allocated
            };
        },
        msync: function (stream, buffer, offset, length, mmapFlags) {
            if (!FS.isFile(stream.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
            }
            if (mmapFlags & 2) {
                return 0;
            }
            var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
            return 0;
        }
    }
};
var IDBFS = {
    dbs: {},
    indexedDB: function () {
        if (typeof indexedDB !== "undefined")
            return indexedDB;
        var ret = null;
        if (typeof window === "object")
            ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, "IDBFS used, but indexedDB not supported");
        return ret;
    },
    DB_VERSION: 21,
    DB_STORE_NAME: "FILE_DATA",
    mount: function (mount) {
        return MEMFS.mount.apply(null, arguments);
    },
    syncfs: function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function (err, local) {
            if (err)
                return callback(err);
            IDBFS.getRemoteSet(mount, function (err, remote) {
                if (err)
                    return callback(err);
                var src = populate ? remote : local;
                var dst = populate ? local : remote;
                IDBFS.reconcile(src, dst, callback);
            });
        });
    },
    getDB: function (name, callback) {
        var db = IDBFS.dbs[name];
        if (db) {
            return callback(null, db);
        }
        var req;
        try {
            req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
            return callback(e);
        }
        req.onupgradeneeded = function (e) {
            var db = e.target.result;
            var transaction = e.target.transaction;
            var fileStore;
            if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
                fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
            } else {
                fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
            }
            if (!fileStore.indexNames.contains("timestamp")) {
                fileStore.createIndex("timestamp", "timestamp", { unique: false });
            }
        };
        req.onsuccess = function () {
            db = req.result;
            IDBFS.dbs[name] = db;
            callback(null, db);
        };
        req.onerror = function (e) {
            callback(this.error);
            e.preventDefault();
        };
    },
    getLocalSet: function (mount, callback) {
        var entries = {};
        function isRealDir(p) {
            return p !== "." && p !== "..";
        }
        function toAbsolute(root) {
            return function (p) {
                return PATH.join2(root, p);
            };
        }
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
        while (check.length) {
            var path = check.pop();
            var stat;
            try {
                stat = FS.stat(path);
            } catch (e) {
                return callback(e);
            }
            if (FS.isDir(stat.mode)) {
                check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
            }
            entries[path] = { timestamp: stat.mtime };
        }
        return callback(null, {
            type: "local",
            entries: entries
        });
    },
    getRemoteSet: function (mount, callback) {
        var entries = {};
        IDBFS.getDB(mount.mountpoint, function (err, db) {
            if (err)
                return callback(err);
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], "readonly");
            transaction.onerror = function (e) {
                callback(this.error);
                e.preventDefault();
            };
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index("timestamp");
            index.openKeyCursor().onsuccess = function (event) {
                var cursor = event.target.result;
                if (!cursor) {
                    return callback(null, {
                        type: "remote",
                        db: db,
                        entries: entries
                    });
                }
                entries[cursor.primaryKey] = { timestamp: cursor.key };
                cursor.continue();
            };
        });
    },
    loadLocalEntry: function (path, callback) {
        var stat, node;
        try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
        } catch (e) {
            return callback(e);
        }
        if (FS.isDir(stat.mode)) {
            return callback(null, {
                timestamp: stat.mtime,
                mode: stat.mode
            });
        } else if (FS.isFile(stat.mode)) {
            node.contents = MEMFS.getFileDataAsTypedArray(node);
            return callback(null, {
                timestamp: stat.mtime,
                mode: stat.mode,
                contents: node.contents
            });
        } else {
            return callback(new Error("node type not supported"));
        }
    },
    storeLocalEntry: function (path, entry, callback) {
        try {
            if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
            } else if (FS.isFile(entry.mode)) {
                FS.writeFile(path, entry.contents, {
                    encoding: "binary",
                    canOwn: true
                });
            } else {
                return callback(new Error("node type not supported"));
            }
            FS.chmod(path, entry.mode);
            FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
            return callback(e);
        }
        callback(null);
    },
    removeLocalEntry: function (path, callback) {
        try {
            var lookup = FS.lookupPath(path);
            var stat = FS.stat(path);
            if (FS.isDir(stat.mode)) {
                FS.rmdir(path);
            } else if (FS.isFile(stat.mode)) {
                FS.unlink(path);
            }
        } catch (e) {
            return callback(e);
        }
        callback(null);
    },
    loadRemoteEntry: function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function (event) {
            callback(null, event.target.result);
        };
        req.onerror = function (e) {
            callback(this.error);
            e.preventDefault();
        };
    },
    storeRemoteEntry: function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function () {
            callback(null);
        };
        req.onerror = function (e) {
            callback(this.error);
            e.preventDefault();
        };
    },
    removeRemoteEntry: function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function () {
            callback(null);
        };
        req.onerror = function (e) {
            callback(this.error);
            e.preventDefault();
        };
    },
    reconcile: function (src, dst, callback) {
        var total = 0;
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
            var e = src.entries[key];
            var e2 = dst.entries[key];
            if (!e2 || e.timestamp > e2.timestamp) {
                create.push(key);
                total++;
            }
        });
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
            var e = dst.entries[key];
            var e2 = src.entries[key];
            if (!e2) {
                remove.push(key);
                total++;
            }
        });
        if (!total) {
            return callback(null);
        }
        var completed = 0;
        var db = src.type === "remote" ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], "readwrite");
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        function done(err) {
            if (err) {
                if (!done.errored) {
                    done.errored = true;
                    return callback(err);
                }
                return;
            }
            if (++completed >= total) {
                return callback(null);
            }
        }
        transaction.onerror = function (e) {
            done(this.error);
            e.preventDefault();
        };
        create.sort().forEach(function (path) {
            if (dst.type === "local") {
                IDBFS.loadRemoteEntry(store, path, function (err, entry) {
                    if (err)
                        return done(err);
                    IDBFS.storeLocalEntry(path, entry, done);
                });
            } else {
                IDBFS.loadLocalEntry(path, function (err, entry) {
                    if (err)
                        return done(err);
                    IDBFS.storeRemoteEntry(store, path, entry, done);
                });
            }
        });
        remove.sort().reverse().forEach(function (path) {
            if (dst.type === "local") {
                IDBFS.removeLocalEntry(path, done);
            } else {
                IDBFS.removeRemoteEntry(store, path, done);
            }
        });
    }
};
var NODEFS = {
    isWindows: false,
    staticInit: function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
    },
    mount: function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, "/", NODEFS.getMode(mount.opts.root), 0);
    },
    createNode: function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
    },
    getMode: function (path) {
        var stat;
        try {
            stat = fs.lstatSync(path);
            if (NODEFS.isWindows) {
                stat.mode = stat.mode | (stat.mode & 146) >> 1;
            }
        } catch (e) {
            if (!e.code)
                throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
    },
    realPath: function (node) {
        var parts = [];
        while (node.parent !== node) {
            parts.push(node.name);
            node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
    },
    flagsToPermissionStringMap: {
        0: "r",
        1: "r+",
        2: "r+",
        64: "r",
        65: "r+",
        66: "r+",
        129: "rx+",
        193: "rx+",
        514: "w+",
        577: "w",
        578: "w+",
        705: "wx",
        706: "wx+",
        1024: "a",
        1025: "a",
        1026: "a+",
        1089: "a",
        1090: "a+",
        1153: "ax",
        1154: "ax+",
        1217: "ax",
        1218: "ax+",
        4096: "rs",
        4098: "rs+"
    },
    flagsToPermissionString: function (flags) {
        flags &= ~32768;
        flags &= ~524288;
        if (flags in NODEFS.flagsToPermissionStringMap) {
            return NODEFS.flagsToPermissionStringMap[flags];
        } else {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
    },
    node_ops: {
        getattr: function (node) {
            var path = NODEFS.realPath(node);
            var stat;
            try {
                stat = fs.lstatSync(path);
            } catch (e) {
                if (!e.code)
                    throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
            if (NODEFS.isWindows && !stat.blksize) {
                stat.blksize = 4096;
            }
            if (NODEFS.isWindows && !stat.blocks) {
                stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0;
            }
            return {
                dev: stat.dev,
                ino: stat.ino,
                mode: stat.mode,
                nlink: stat.nlink,
                uid: stat.uid,
                gid: stat.gid,
                rdev: stat.rdev,
                size: stat.size,
                atime: stat.atime,
                mtime: stat.mtime,
                ctime: stat.ctime,
                blksize: stat.blksize,
                blocks: stat.blocks
            };
        },
        setattr: function (node, attr) {
            var path = NODEFS.realPath(node);
            try {
                if (attr.mode !== undefined) {
                    fs.chmodSync(path, attr.mode);
                    node.mode = attr.mode;
                }
                if (attr.timestamp !== undefined) {
                    var date = new Date(attr.timestamp);
                    fs.utimesSync(path, date, date);
                }
                if (attr.size !== undefined) {
                    fs.truncateSync(path, attr.size);
                }
            } catch (e) {
                if (!e.code)
                    throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        lookup: function (parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            var mode = NODEFS.getMode(path);
            return NODEFS.createNode(parent, name, mode);
        },
        mknod: function (parent, name, mode, dev) {
            var node = NODEFS.createNode(parent, name, mode, dev);
            var path = NODEFS.realPath(node);
            try {
                if (FS.isDir(node.mode)) {
                    fs.mkdirSync(path, node.mode);
                } else {
                    fs.writeFileSync(path, "", { mode: node.mode });
                }
            } catch (e) {
                if (!e.code)
                    throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
            return node;
        },
        rename: function (oldNode, newDir, newName) {
            var oldPath = NODEFS.realPath(oldNode);
            var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
            try {
                fs.renameSync(oldPath, newPath);
            } catch (e) {
                if (!e.code)
                    throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        unlink: function (parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            try {
                fs.unlinkSync(path);
            } catch (e) {
                if (!e.code)
                    throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        rmdir: function (parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            try {
                fs.rmdirSync(path);
            } catch (e) {
                if (!e.code)
                    throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        readdir: function (node) {
            var path = NODEFS.realPath(node);
            try {
                return fs.readdirSync(path);
            } catch (e) {
                if (!e.code)
                    throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        symlink: function (parent, newName, oldPath) {
            var newPath = PATH.join2(NODEFS.realPath(parent), newName);
            try {
                fs.symlinkSync(oldPath, newPath);
            } catch (e) {
                if (!e.code)
                    throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        readlink: function (node) {
            var path = NODEFS.realPath(node);
            try {
                path = fs.readlinkSync(path);
                path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
                return path;
            } catch (e) {
                if (!e.code)
                    throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        }
    },
    stream_ops: {
        open: function (stream) {
            var path = NODEFS.realPath(stream.node);
            try {
                if (FS.isFile(stream.node.mode)) {
                    stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
                }
            } catch (e) {
                if (!e.code)
                    throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        close: function (stream) {
            try {
                if (FS.isFile(stream.node.mode) && stream.nfd) {
                    fs.closeSync(stream.nfd);
                }
            } catch (e) {
                if (!e.code)
                    throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
        },
        read: function (stream, buffer, offset, length, position) {
            if (length === 0)
                return 0;
            var nbuffer = new Buffer(length);
            var res;
            try {
                res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
            } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
            if (res > 0) {
                for (var i = 0; i < res; i++) {
                    buffer[offset + i] = nbuffer[i];
                }
            }
            return res;
        },
        write: function (stream, buffer, offset, length, position) {
            var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
            var res;
            try {
                res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
            } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
            }
            return res;
        },
        llseek: function (stream, offset, whence) {
            var position = offset;
            if (whence === 1) {
                position += stream.position;
            } else if (whence === 2) {
                if (FS.isFile(stream.node.mode)) {
                    try {
                        var stat = fs.fstatSync(stream.nfd);
                        position += stat.size;
                    } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                }
            }
            if (position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            return position;
        }
    }
};
var WORKERFS = {
    DIR_MODE: 16895,
    FILE_MODE: 33279,
    reader: null,
    mount: function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader)
            WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, "/", WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
            var parts = path.split("/");
            var parent = root;
            for (var i = 0; i < parts.length - 1; i++) {
                var curr = parts.slice(0, i + 1).join("/");
                if (!createdParents[curr]) {
                    createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
                }
                parent = createdParents[curr];
            }
            return parent;
        }
        function base(path) {
            var parts = path.split("/");
            return parts[parts.length - 1];
        }
        Array.prototype.forEach.call(mount.opts["files"] || [], function (file) {
            WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function (obj) {
            WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function (pack) {
            pack["metadata"].files.forEach(function (file) {
                var name = file.filename.substr(1);
                WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack["blob"].slice(file.start, file.end));
            });
        });
        return root;
    },
    createNode: function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date()).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
            node.size = contents.size;
            node.contents = contents;
        } else {
            node.size = 4096;
            node.contents = {};
        }
        if (parent) {
            parent.contents[name] = node;
        }
        return node;
    },
    node_ops: {
        getattr: function (node) {
            return {
                dev: 1,
                ino: undefined,
                mode: node.mode,
                nlink: 1,
                uid: 0,
                gid: 0,
                rdev: undefined,
                size: node.size,
                atime: new Date(node.timestamp),
                mtime: new Date(node.timestamp),
                ctime: new Date(node.timestamp),
                blksize: 4096,
                blocks: Math.ceil(node.size / 4096)
            };
        },
        setattr: function (node, attr) {
            if (attr.mode !== undefined) {
                node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
                node.timestamp = attr.timestamp;
            }
        },
        lookup: function (parent, name) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },
        mknod: function (parent, name, mode, dev) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },
        rename: function (oldNode, newDir, newName) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },
        unlink: function (parent, name) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },
        rmdir: function (parent, name) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },
        readdir: function (node) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },
        symlink: function (parent, newName, oldPath) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },
        readlink: function (node) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
    },
    stream_ops: {
        read: function (stream, buffer, offset, length, position) {
            if (position >= stream.node.size)
                return 0;
            var chunk = stream.node.contents.slice(position, position + length);
            var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
            buffer.set(new Uint8Array(ab), offset);
            return chunk.size;
        },
        write: function (stream, buffer, offset, length, position) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },
        llseek: function (stream, offset, whence) {
            var position = offset;
            if (whence === 1) {
                position += stream.position;
            } else if (whence === 2) {
                if (FS.isFile(stream.node.mode)) {
                    position += stream.node.size;
                }
            }
            if (position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
            }
            return position;
        }
    }
};
STATICTOP += 16;
STATICTOP += 16;
STATICTOP += 16;
var FS = {
    root: null,
    mounts: [],
    devices: [null],
    streams: [],
    nextInode: 1,
    nameTable: null,
    currentPath: "/",
    initialized: false,
    ignorePermissions: true,
    trackingDelegate: {},
    tracking: {
        openFlags: {
            READ: 1,
            WRITE: 2
        }
    },
    ErrnoError: null,
    genericErrors: {},
    filesystems: null,
    syncFSRequests: 0,
    handleFSError: function (e) {
        if (!(e instanceof FS.ErrnoError))
            throw e + " : " + stackTrace();
        return ___setErrNo(e.errno);
    },
    lookupPath: function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
        if (!path)
            return {
                path: "",
                node: null
            };
        var defaults = {
            follow_mount: true,
            recurse_count: 0
        };
        for (var key in defaults) {
            if (opts[key] === undefined) {
                opts[key] = defaults[key];
            }
        }
        if (opts.recurse_count > 8) {
            throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        var parts = PATH.normalizeArray(path.split("/").filter(function (p) {
            return !!p;
        }), false);
        var current = FS.root;
        var current_path = "/";
        for (var i = 0; i < parts.length; i++) {
            var islast = i === parts.length - 1;
            if (islast && opts.parent) {
                break;
            }
            current = FS.lookupNode(current, parts[i]);
            current_path = PATH.join2(current_path, parts[i]);
            if (FS.isMountpoint(current)) {
                if (!islast || islast && opts.follow_mount) {
                    current = current.mounted.root;
                }
            }
            if (!islast || opts.follow) {
                var count = 0;
                while (FS.isLink(current.mode)) {
                    var link = FS.readlink(current_path);
                    current_path = PATH.resolve(PATH.dirname(current_path), link);
                    var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
                    current = lookup.node;
                    if (count++ > 40) {
                        throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
                    }
                }
            }
        }
        return {
            path: current_path,
            node: current
        };
    },
    getPath: function (node) {
        var path;
        while (true) {
            if (FS.isRoot(node)) {
                var mount = node.mount.mountpoint;
                if (!path)
                    return mount;
                return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
            }
            path = path ? node.name + "/" + path : node.name;
            node = node.parent;
        }
    },
    hashName: function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
            hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
        }
        return (parentid + hash >>> 0) % FS.nameTable.length;
    },
    hashAddNode: function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
    },
    hashRemoveNode: function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
            FS.nameTable[hash] = node.name_next;
        } else {
            var current = FS.nameTable[hash];
            while (current) {
                if (current.name_next === node) {
                    current.name_next = node.name_next;
                    break;
                }
                current = current.name_next;
            }
        }
    },
    lookupNode: function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
            throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
            var nodeName = node.name;
            if (node.parent.id === parent.id && nodeName === name) {
                return node;
            }
        }
        return FS.lookup(parent, name);
    },
    createNode: function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
            FS.FSNode = function (parent, name, mode, rdev) {
                if (!parent) {
                    parent = this;
                }
                this.parent = parent;
                this.mount = parent.mount;
                this.mounted = null;
                this.id = FS.nextInode++;
                this.name = name;
                this.mode = mode;
                this.node_ops = {};
                this.stream_ops = {};
                this.rdev = rdev;
            };
            FS.FSNode.prototype = {};
            var readMode = 292 | 73;
            var writeMode = 146;
            Object.defineProperties(FS.FSNode.prototype, {
                read: {
                    get: function () {
                        return (this.mode & readMode) === readMode;
                    },
                    set: function (val) {
                        val ? this.mode |= readMode : this.mode &= ~readMode;
                    }
                },
                write: {
                    get: function () {
                        return (this.mode & writeMode) === writeMode;
                    },
                    set: function (val) {
                        val ? this.mode |= writeMode : this.mode &= ~writeMode;
                    }
                },
                isFolder: {
                    get: function () {
                        return FS.isDir(this.mode);
                    }
                },
                isDevice: {
                    get: function () {
                        return FS.isChrdev(this.mode);
                    }
                }
            });
        }
        var node = new FS.FSNode(parent, name, mode, rdev);
        FS.hashAddNode(node);
        return node;
    },
    destroyNode: function (node) {
        FS.hashRemoveNode(node);
    },
    isRoot: function (node) {
        return node === node.parent;
    },
    isMountpoint: function (node) {
        return !!node.mounted;
    },
    isFile: function (mode) {
        return (mode & 61440) === 32768;
    },
    isDir: function (mode) {
        return (mode & 61440) === 16384;
    },
    isLink: function (mode) {
        return (mode & 61440) === 40960;
    },
    isChrdev: function (mode) {
        return (mode & 61440) === 8192;
    },
    isBlkdev: function (mode) {
        return (mode & 61440) === 24576;
    },
    isFIFO: function (mode) {
        return (mode & 61440) === 4096;
    },
    isSocket: function (mode) {
        return (mode & 49152) === 49152;
    },
    flagModes: {
        "r": 0,
        "rs": 1052672,
        "r+": 2,
        "w": 577,
        "wx": 705,
        "xw": 705,
        "w+": 578,
        "wx+": 706,
        "xw+": 706,
        "a": 1089,
        "ax": 1217,
        "xa": 1217,
        "a+": 1090,
        "ax+": 1218,
        "xa+": 1218
    },
    modeStringToFlags: function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === "undefined") {
            throw new Error("Unknown file open mode: " + str);
        }
        return flags;
    },
    flagsToPermissionString: function (flag) {
        var perms = [
            "r",
            "w",
            "rw"
        ][flag & 3];
        if (flag & 512) {
            perms += "w";
        }
        return perms;
    },
    nodePermissions: function (node, perms) {
        if (FS.ignorePermissions) {
            return 0;
        }
        if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
            return ERRNO_CODES.EACCES;
        } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
            return ERRNO_CODES.EACCES;
        } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
            return ERRNO_CODES.EACCES;
        }
        return 0;
    },
    mayLookup: function (dir) {
        var err = FS.nodePermissions(dir, "x");
        if (err)
            return err;
        if (!dir.node_ops.lookup)
            return ERRNO_CODES.EACCES;
        return 0;
    },
    mayCreate: function (dir, name) {
        try {
            var node = FS.lookupNode(dir, name);
            return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, "wx");
    },
    mayDelete: function (dir, name, isdir) {
        var node;
        try {
            node = FS.lookupNode(dir, name);
        } catch (e) {
            return e.errno;
        }
        var err = FS.nodePermissions(dir, "wx");
        if (err) {
            return err;
        }
        if (isdir) {
            if (!FS.isDir(node.mode)) {
                return ERRNO_CODES.ENOTDIR;
            }
            if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
                return ERRNO_CODES.EBUSY;
            }
        } else {
            if (FS.isDir(node.mode)) {
                return ERRNO_CODES.EISDIR;
            }
        }
        return 0;
    },
    mayOpen: function (node, flags) {
        if (!node) {
            return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
            return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
            if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
                return ERRNO_CODES.EISDIR;
            }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
    },
    MAX_OPEN_FDS: 4096,
    nextfd: function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
            if (!FS.streams[fd]) {
                return fd;
            }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
    },
    getStream: function (fd) {
        return FS.streams[fd];
    },
    createStream: function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
            FS.FSStream = function () {
            };
            FS.FSStream.prototype = {};
            Object.defineProperties(FS.FSStream.prototype, {
                object: {
                    get: function () {
                        return this.node;
                    },
                    set: function (val) {
                        this.node = val;
                    }
                },
                isRead: {
                    get: function () {
                        return (this.flags & 2097155) !== 1;
                    }
                },
                isWrite: {
                    get: function () {
                        return (this.flags & 2097155) !== 0;
                    }
                },
                isAppend: {
                    get: function () {
                        return this.flags & 1024;
                    }
                }
            });
        }
        var newStream = new FS.FSStream();
        for (var p in stream) {
            newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
    },
    closeStream: function (fd) {
        FS.streams[fd] = null;
    },
    chrdev_stream_ops: {
        open: function (stream) {
            var device = FS.getDevice(stream.node.rdev);
            stream.stream_ops = device.stream_ops;
            if (stream.stream_ops.open) {
                stream.stream_ops.open(stream);
            }
        },
        llseek: function () {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
    },
    major: function (dev) {
        return dev >> 8;
    },
    minor: function (dev) {
        return dev & 255;
    },
    makedev: function (ma, mi) {
        return ma << 8 | mi;
    },
    registerDevice: function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
    },
    getDevice: function (dev) {
        return FS.devices[dev];
    },
    getMounts: function (mount) {
        var mounts = [];
        var check = [mount];
        while (check.length) {
            var m = check.pop();
            mounts.push(m);
            check.push.apply(check, m.mounts);
        }
        return mounts;
    },
    syncfs: function (populate, callback) {
        if (typeof populate === "function") {
            callback = populate;
            populate = false;
        }
        FS.syncFSRequests++;
        if (FS.syncFSRequests > 1) {
            console.log("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
        }
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
        function doCallback(err) {
            assert(FS.syncFSRequests > 0);
            FS.syncFSRequests--;
            return callback(err);
        }
        function done(err) {
            if (err) {
                if (!done.errored) {
                    done.errored = true;
                    return doCallback(err);
                }
                return;
            }
            if (++completed >= mounts.length) {
                doCallback(null);
            }
        }
        mounts.forEach(function (mount) {
            if (!mount.type.syncfs) {
                return done(null);
            }
            mount.type.syncfs(mount, populate, done);
        });
    },
    mount: function (type, opts, mountpoint) {
        var root = mountpoint === "/";
        var pseudo = !mountpoint;
        var node;
        if (root && FS.root) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
            var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
            mountpoint = lookup.path;
            node = lookup.node;
            if (FS.isMountpoint(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
            }
            if (!FS.isDir(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
            }
        }
        var mount = {
            type: type,
            opts: opts,
            mountpoint: mountpoint,
            mounts: []
        };
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
        if (root) {
            FS.root = mountRoot;
        } else if (node) {
            node.mounted = mount;
            if (node.mount) {
                node.mount.mounts.push(mount);
            }
        }
        return mountRoot;
    },
    unmount: function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
        if (!FS.isMountpoint(lookup.node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
        Object.keys(FS.nameTable).forEach(function (hash) {
            var current = FS.nameTable[hash];
            while (current) {
                var next = current.name_next;
                if (mounts.indexOf(current.mount) !== -1) {
                    FS.destroyNode(current);
                }
                current = next;
            }
        });
        node.mounted = null;
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
    },
    lookup: function (parent, name) {
        return parent.node_ops.lookup(parent, name);
    },
    mknod: function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === "." || name === "..") {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
    },
    create: function (path, mode) {
        mode = mode !== undefined ? mode : 438;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
    },
    mkdir: function (path, mode) {
        mode = mode !== undefined ? mode : 511;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
    },
    mkdev: function (path, mode, dev) {
        if (typeof dev === "undefined") {
            dev = mode;
            mode = 438;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
    },
    symlink: function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
    },
    rename: function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        var lookup, old_dir, new_dir;
        try {
            lookup = FS.lookupPath(old_path, { parent: true });
            old_dir = lookup.node;
            lookup = FS.lookupPath(new_path, { parent: true });
            new_dir = lookup.node;
        } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir)
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        if (old_dir.mount !== new_dir.mount) {
            throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        var old_node = FS.lookupNode(old_dir, old_name);
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== ".") {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== ".") {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        var new_node;
        try {
            new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
        }
        if (old_node === new_node) {
            return;
        }
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (new_dir !== old_dir) {
            err = FS.nodePermissions(old_dir, "w");
            if (err) {
                throw new FS.ErrnoError(err);
            }
        }
        try {
            if (FS.trackingDelegate["willMovePath"]) {
                FS.trackingDelegate["willMovePath"](old_path, new_path);
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
        }
        FS.hashRemoveNode(old_node);
        try {
            old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
            throw e;
        } finally {
            FS.hashAddNode(old_node);
        }
        try {
            if (FS.trackingDelegate["onMovePath"])
                FS.trackingDelegate["onMovePath"](old_path, new_path);
        } catch (e) {
            console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
        }
    },
    rmdir: function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
            if (FS.trackingDelegate["willDeletePath"]) {
                FS.trackingDelegate["willDeletePath"](path);
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
            if (FS.trackingDelegate["onDeletePath"])
                FS.trackingDelegate["onDeletePath"](path);
        } catch (e) {
            console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
        }
    },
    readdir: function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
    },
    unlink: function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
            if (err === ERRNO_CODES.EISDIR)
                err = ERRNO_CODES.EPERM;
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
            if (FS.trackingDelegate["willDeletePath"]) {
                FS.trackingDelegate["willDeletePath"](path);
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
            if (FS.trackingDelegate["onDeletePath"])
                FS.trackingDelegate["onDeletePath"](path);
        } catch (e) {
            console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
        }
    },
    readlink: function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
    },
    stat: function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
    },
    lstat: function (path) {
        return FS.stat(path, true);
    },
    chmod: function (path, mode, dontFollow) {
        var node;
        if (typeof path === "string") {
            var lookup = FS.lookupPath(path, { follow: !dontFollow });
            node = lookup.node;
        } else {
            node = path;
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
            mode: mode & 4095 | node.mode & ~4095,
            timestamp: Date.now()
        });
    },
    lchmod: function (path, mode) {
        FS.chmod(path, mode, true);
    },
    fchmod: function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
    },
    chown: function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === "string") {
            var lookup = FS.lookupPath(path, { follow: !dontFollow });
            node = lookup.node;
        } else {
            node = path;
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, { timestamp: Date.now() });
    },
    lchown: function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
    },
    fchown: function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
    },
    truncate: function (path, len) {
        if (len < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === "string") {
            var lookup = FS.lookupPath(path, { follow: true });
            node = lookup.node;
        } else {
            node = path;
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, "w");
        if (err) {
            throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
            size: len,
            timestamp: Date.now()
        });
    },
    ftruncate: function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
    },
    utime: function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, { timestamp: Math.max(atime, mtime) });
    },
    open: function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === "undefined" ? 438 : mode;
        if (flags & 64) {
            mode = mode & 4095 | 32768;
        } else {
            mode = 0;
        }
        var node;
        if (typeof path === "object") {
            node = path;
        } else {
            path = PATH.normalize(path);
            try {
                var lookup = FS.lookupPath(path, { follow: !(flags & 131072) });
                node = lookup.node;
            } catch (e) {
            }
        }
        var created = false;
        if (flags & 64) {
            if (node) {
                if (flags & 128) {
                    throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
                }
            } else {
                node = FS.mknod(path, mode, 0);
                created = true;
            }
        }
        if (!node) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (FS.isChrdev(node.mode)) {
            flags &= ~512;
        }
        if (flags & 65536 && !FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        if (!created) {
            var err = FS.mayOpen(node, flags);
            if (err) {
                throw new FS.ErrnoError(err);
            }
        }
        if (flags & 512) {
            FS.truncate(node, 0);
        }
        flags &= ~(128 | 512);
        var stream = FS.createStream({
            node: node,
            path: FS.getPath(node),
            flags: flags,
            seekable: true,
            position: 0,
            stream_ops: node.stream_ops,
            ungotten: [],
            error: false
        }, fd_start, fd_end);
        if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
        }
        if (Module["logReadFiles"] && !(flags & 1)) {
            if (!FS.readFiles)
                FS.readFiles = {};
            if (!(path in FS.readFiles)) {
                FS.readFiles[path] = 1;
                Module["printErr"]("read file: " + path);
            }
        }
        try {
            if (FS.trackingDelegate["onOpenFile"]) {
                var trackingFlags = 0;
                if ((flags & 2097155) !== 1) {
                    trackingFlags |= FS.tracking.openFlags.READ;
                }
                if ((flags & 2097155) !== 0) {
                    trackingFlags |= FS.tracking.openFlags.WRITE;
                }
                FS.trackingDelegate["onOpenFile"](path, trackingFlags);
            }
        } catch (e) {
            console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
        }
        return stream;
    },
    close: function (stream) {
        if (stream.getdents)
            stream.getdents = null;
        try {
            if (stream.stream_ops.close) {
                stream.stream_ops.close(stream);
            }
        } catch (e) {
            throw e;
        } finally {
            FS.closeStream(stream.fd);
        }
    },
    llseek: function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
    },
    read: function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === "undefined") {
            position = stream.position;
            seeking = false;
        } else if (!stream.seekable) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking)
            stream.position += bytesRead;
        return bytesRead;
    },
    write: function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
            FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === "undefined") {
            position = stream.position;
            seeking = false;
        } else if (!stream.seekable) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking)
            stream.position += bytesWritten;
        try {
            if (stream.path && FS.trackingDelegate["onWriteToFile"])
                FS.trackingDelegate["onWriteToFile"](stream.path);
        } catch (e) {
            console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + e.message);
        }
        return bytesWritten;
    },
    allocate: function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
    },
    mmap: function (stream, buffer, offset, length, position, prot, flags) {
        if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
    },
    msync: function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
            return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
    },
    munmap: function (stream) {
        return 0;
    },
    ioctl: function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
    },
    readFile: function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || "r";
        opts.encoding = opts.encoding || "binary";
        if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
            throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === "utf8") {
            ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === "binary") {
            ret = buf;
        }
        FS.close(stream);
        return ret;
    },
    writeFile: function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || "w";
        opts.encoding = opts.encoding || "utf8";
        if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
            throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === "utf8") {
            var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
            var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
            FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === "binary") {
            FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
    },
    cwd: function () {
        return FS.currentPath;
    },
    chdir: function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, "x");
        if (err) {
            throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
    },
    createDefaultDirectories: function () {
        FS.mkdir("/tmp");
        FS.mkdir("/home");
        FS.mkdir("/home/web_user");
    },
    createDefaultDevices: function () {
        FS.mkdir("/dev");
        FS.registerDevice(FS.makedev(1, 3), {
            read: function () {
                return 0;
            },
            write: function (stream, buffer, offset, length, pos) {
                return length;
            }
        });
        FS.mkdev("/dev/null", FS.makedev(1, 3));
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev("/dev/tty", FS.makedev(5, 0));
        FS.mkdev("/dev/tty1", FS.makedev(6, 0));
        var random_device;
        if (typeof crypto !== "undefined") {
            var randomBuffer = new Uint8Array(1);
            random_device = function () {
                crypto.getRandomValues(randomBuffer);
                return randomBuffer[0];
            };
        } else if (ENVIRONMENT_IS_NODE) {
            random_device = function () {
                return require("crypto").randomBytes(1)[0];
            };
        } else {
            random_device = function () {
                return Math.random() * 256 | 0;
            };
        }
        FS.createDevice("/dev", "random", random_device);
        FS.createDevice("/dev", "urandom", random_device);
        FS.mkdir("/dev/shm");
        FS.mkdir("/dev/shm/tmp");
    },
    createSpecialDirectories: function () {
        FS.mkdir("/proc");
        FS.mkdir("/proc/self");
        FS.mkdir("/proc/self/fd");
        FS.mount({
            mount: function () {
                var node = FS.createNode("/proc/self", "fd", 16384 | 511, 73);
                node.node_ops = {
                    lookup: function (parent, name) {
                        var fd = +name;
                        var stream = FS.getStream(fd);
                        if (!stream)
                            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                        var ret = {
                            parent: null,
                            mount: { mountpoint: "fake" },
                            node_ops: {
                                readlink: function () {
                                    return stream.path;
                                }
                            }
                        };
                        ret.parent = ret;
                        return ret;
                    }
                };
                return node;
            }
        }, {}, "/proc/self/fd");
    },
    createStandardStreams: function () {
        if (Module["stdin"]) {
            FS.createDevice("/dev", "stdin", Module["stdin"]);
        } else {
            FS.symlink("/dev/tty", "/dev/stdin");
        }
        if (Module["stdout"]) {
            FS.createDevice("/dev", "stdout", null, Module["stdout"]);
        } else {
            FS.symlink("/dev/tty", "/dev/stdout");
        }
        if (Module["stderr"]) {
            FS.createDevice("/dev", "stderr", null, Module["stderr"]);
        } else {
            FS.symlink("/dev/tty1", "/dev/stderr");
        }
        var stdin = FS.open("/dev/stdin", "r");
        assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
        var stdout = FS.open("/dev/stdout", "w");
        assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
        var stderr = FS.open("/dev/stderr", "w");
        assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
    },
    ensureErrnoError: function () {
        if (FS.ErrnoError)
            return;
        FS.ErrnoError = function ErrnoError(errno, node) {
            this.node = node;
            this.setErrno = function (errno) {
                this.errno = errno;
                for (var key in ERRNO_CODES) {
                    if (ERRNO_CODES[key] === errno) {
                        this.code = key;
                        break;
                    }
                }
            };
            this.setErrno(errno);
            this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        [ERRNO_CODES.ENOENT].forEach(function (code) {
            FS.genericErrors[code] = new FS.ErrnoError(code);
            FS.genericErrors[code].stack = "<generic error, no stack>";
        });
    },
    staticInit: function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.mount(MEMFS, {}, "/");
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
        FS.filesystems = {
            "MEMFS": MEMFS,
            "IDBFS": IDBFS,
            "NODEFS": NODEFS,
            "WORKERFS": WORKERFS
        };
    },
    init: function (input, output, error) {
        assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
        FS.init.initialized = true;
        FS.ensureErrnoError();
        Module["stdin"] = input || Module["stdin"];
        Module["stdout"] = output || Module["stdout"];
        Module["stderr"] = error || Module["stderr"];
        FS.createStandardStreams();
    },
    quit: function () {
        FS.init.initialized = false;
        var fflush = Module["_fflush"];
        if (fflush)
            fflush(0);
        for (var i = 0; i < FS.streams.length; i++) {
            var stream = FS.streams[i];
            if (!stream) {
                continue;
            }
            FS.close(stream);
        }
    },
    getMode: function (canRead, canWrite) {
        var mode = 0;
        if (canRead)
            mode |= 292 | 73;
        if (canWrite)
            mode |= 146;
        return mode;
    },
    joinPath: function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == "/")
            path = path.substr(1);
        return path;
    },
    absolutePath: function (relative, base) {
        return PATH.resolve(base, relative);
    },
    standardizePath: function (path) {
        return PATH.normalize(path);
    },
    findObject: function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
            return ret.object;
        } else {
            ___setErrNo(ret.error);
            return null;
        }
    },
    analyzePath: function (path, dontResolveLastLink) {
        try {
            var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
            path = lookup.path;
        } catch (e) {
        }
        var ret = {
            isRoot: false,
            exists: false,
            error: 0,
            name: null,
            path: null,
            object: null,
            parentExists: false,
            parentPath: null,
            parentObject: null
        };
        try {
            var lookup = FS.lookupPath(path, { parent: true });
            ret.parentExists = true;
            ret.parentPath = lookup.path;
            ret.parentObject = lookup.node;
            ret.name = PATH.basename(path);
            lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
            ret.exists = true;
            ret.path = lookup.path;
            ret.object = lookup.node;
            ret.name = lookup.node.name;
            ret.isRoot = lookup.path === "/";
        } catch (e) {
            ret.error = e.errno;
        }
        return ret;
    },
    createFolder: function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
    },
    createPath: function (parent, path, canRead, canWrite) {
        parent = typeof parent === "string" ? parent : FS.getPath(parent);
        var parts = path.split("/").reverse();
        while (parts.length) {
            var part = parts.pop();
            if (!part)
                continue;
            var current = PATH.join2(parent, part);
            try {
                FS.mkdir(current);
            } catch (e) {
            }
            parent = current;
        }
        return current;
    },
    createFile: function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
    },
    createDataFile: function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
            if (typeof data === "string") {
                var arr = new Array(data.length);
                for (var i = 0, len = data.length; i < len; ++i)
                    arr[i] = data.charCodeAt(i);
                data = arr;
            }
            FS.chmod(node, mode | 146);
            var stream = FS.open(node, "w");
            FS.write(stream, data, 0, data.length, 0, canOwn);
            FS.close(stream);
            FS.chmod(node, mode);
        }
        return node;
    },
    createDevice: function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major)
            FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        FS.registerDevice(dev, {
            open: function (stream) {
                stream.seekable = false;
            },
            close: function (stream) {
                if (output && output.buffer && output.buffer.length) {
                    output(10);
                }
            },
            read: function (stream, buffer, offset, length, pos) {
                var bytesRead = 0;
                for (var i = 0; i < length; i++) {
                    var result;
                    try {
                        result = input();
                    } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES.EIO);
                    }
                    if (result === undefined && bytesRead === 0) {
                        throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                    }
                    if (result === null || result === undefined)
                        break;
                    bytesRead++;
                    buffer[offset + i] = result;
                }
                if (bytesRead) {
                    stream.node.timestamp = Date.now();
                }
                return bytesRead;
            },
            write: function (stream, buffer, offset, length, pos) {
                for (var i = 0; i < length; i++) {
                    try {
                        output(buffer[offset + i]);
                    } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES.EIO);
                    }
                }
                if (length) {
                    stream.node.timestamp = Date.now();
                }
                return i;
            }
        });
        return FS.mkdev(path, mode, dev);
    },
    createLink: function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
    },
    forceLoadFile: function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents)
            return true;
        var success = true;
        if (typeof XMLHttpRequest !== "undefined") {
            throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module["read"]) {
            try {
                obj.contents = intArrayFromString(Module["read"](obj.url), true);
                obj.usedBytes = obj.contents.length;
            } catch (e) {
                success = false;
            }
        } else {
            throw new Error("Cannot load without read() or XMLHttpRequest.");
        }
        if (!success)
            ___setErrNo(ERRNO_CODES.EIO);
        return success;
    },
    createLazyFile: function (parent, name, url, canRead, canWrite) {
        function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = [];
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length - 1 || idx < 0) {
                return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = idx / this.chunkSize | 0;
            return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            var xhr = new XMLHttpRequest();
            xhr.open("HEAD", url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304))
                throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
            var chunkSize = 1024 * 1024;
            if (!hasByteServing)
                chunkSize = datalength;
            var doXHR = function (from, to) {
                if (from > to)
                    throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength - 1)
                    throw new Error("only " + datalength + " bytes available! programmer error!");
                var xhr = new XMLHttpRequest();
                xhr.open("GET", url, false);
                if (datalength !== chunkSize)
                    xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                if (typeof Uint8Array != "undefined")
                    xhr.responseType = "arraybuffer";
                if (xhr.overrideMimeType) {
                    xhr.overrideMimeType("text/plain; charset=x-user-defined");
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304))
                    throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                    return new Uint8Array(xhr.response || []);
                } else {
                    return intArrayFromString(xhr.responseText || "", true);
                }
            };
            var lazyArray = this;
            lazyArray.setDataGetter(function (chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum + 1) * chunkSize - 1;
                end = Math.min(end, datalength - 1);
                if (typeof lazyArray.chunks[chunkNum] === "undefined") {
                    lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof lazyArray.chunks[chunkNum] === "undefined")
                    throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
            });
            if (usesGzip || !datalength) {
                chunkSize = datalength = 1;
                datalength = this.getter(0).length;
                chunkSize = datalength;
                console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
            }
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== "undefined") {
            if (!ENVIRONMENT_IS_WORKER)
                throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
            var lazyArray = new LazyUint8Array();
            Object.defineProperties(lazyArray, {
                length: {
                    get: function () {
                        if (!this.lengthKnown) {
                            this.cacheLength();
                        }
                        return this._length;
                    }
                },
                chunkSize: {
                    get: function () {
                        if (!this.lengthKnown) {
                            this.cacheLength();
                        }
                        return this._chunkSize;
                    }
                }
            });
            var properties = {
                isDevice: false,
                contents: lazyArray
            };
        } else {
            var properties = {
                isDevice: false,
                url: url
            };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        if (properties.contents) {
            node.contents = properties.contents;
        } else if (properties.url) {
            node.contents = null;
            node.url = properties.url;
        }
        Object.defineProperties(node, {
            usedBytes: {
                get: function () {
                    return this.contents.length;
                }
            }
        });
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function (key) {
            var fn = node.stream_ops[key];
            stream_ops[key] = function forceLoadLazyFile() {
                if (!FS.forceLoadFile(node)) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
                return fn.apply(null, arguments);
            };
        });
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
            if (!FS.forceLoadFile(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            var contents = stream.node.contents;
            if (position >= contents.length)
                return 0;
            var size = Math.min(contents.length - position, length);
            assert(size >= 0);
            if (contents.slice) {
                for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents[position + i];
                }
            } else {
                for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents.get(position + i);
                }
            }
            return size;
        };
        node.stream_ops = stream_ops;
        return node;
    },
    createPreloadedFile: function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency("cp " + fullname);
        function processData(byteArray) {
            function finish(byteArray) {
                if (preFinish)
                    preFinish();
                if (!dontCreateFile) {
                    FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
                }
                if (onload)
                    onload();
                removeRunDependency(dep);
            }
            var handled = false;
            Module["preloadPlugins"].forEach(function (plugin) {
                if (handled)
                    return;
                if (plugin["canHandle"](fullname)) {
                    plugin["handle"](byteArray, fullname, finish, function () {
                        if (onerror)
                            onerror();
                        removeRunDependency(dep);
                    });
                    handled = true;
                }
            });
            if (!handled)
                finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == "string") {
            Browser.asyncLoad(url, function (byteArray) {
                processData(byteArray);
            }, onerror);
        } else {
            processData(url);
        }
    },
    indexedDB: function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
    },
    DB_NAME: function () {
        return "EM_FS_" + window.location.pathname;
    },
    DB_VERSION: 20,
    DB_STORE_NAME: "FILE_DATA",
    saveFilesToDB: function (paths, onload, onerror) {
        onload = onload || function () {
        };
        onerror = onerror || function () {
        };
        var indexedDB = FS.indexedDB();
        try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
            return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
            console.log("creating db");
            var db = openRequest.result;
            db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite");
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
                if (fail == 0)
                    onload();
                else
                    onerror();
            }
            paths.forEach(function (path) {
                var putRequest = files.put(FS.analyzePath(path).object.contents, path);
                putRequest.onsuccess = function putRequest_onsuccess() {
                    ok++;
                    if (ok + fail == total)
                        finish();
                };
                putRequest.onerror = function putRequest_onerror() {
                    fail++;
                    if (ok + fail == total)
                        finish();
                };
            });
            transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
    },
    loadFilesFromDB: function (paths, onload, onerror) {
        onload = onload || function () {
        };
        onerror = onerror || function () {
        };
        var indexedDB = FS.indexedDB();
        try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
            return onerror(e);
        }
        openRequest.onupgradeneeded = onerror;
        openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            try {
                var transaction = db.transaction([FS.DB_STORE_NAME], "readonly");
            } catch (e) {
                onerror(e);
                return;
            }
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
                if (fail == 0)
                    onload();
                else
                    onerror();
            }
            paths.forEach(function (path) {
                var getRequest = files.get(path);
                getRequest.onsuccess = function getRequest_onsuccess() {
                    if (FS.analyzePath(path).exists) {
                        FS.unlink(path);
                    }
                    FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                    ok++;
                    if (ok + fail == total)
                        finish();
                };
                getRequest.onerror = function getRequest_onerror() {
                    fail++;
                    if (ok + fail == total)
                        finish();
                };
            });
            transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
    }
};
var SYSCALLS = {
    DEFAULT_POLLMASK: 5,
    mappings: {},
    umask: 511,
    calculateAt: function (dirfd, path) {
        if (path[0] !== "/") {
            var dir;
            if (dirfd === -100) {
                dir = FS.cwd();
            } else {
                var dirstream = FS.getStream(dirfd);
                if (!dirstream)
                    throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                dir = dirstream.path;
            }
            path = PATH.join2(dir, path);
        }
        return path;
    },
    doStat: function (func, path, buf) {
        try {
            var stat = func(path);
        } catch (e) {
            if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
                return -ERRNO_CODES.ENOTDIR;
            }
            throw e;
        }
        HEAP32[buf >> 2] = stat.dev;
        HEAP32[buf + 4 >> 2] = 0;
        HEAP32[buf + 8 >> 2] = stat.ino;
        HEAP32[buf + 12 >> 2] = stat.mode;
        HEAP32[buf + 16 >> 2] = stat.nlink;
        HEAP32[buf + 20 >> 2] = stat.uid;
        HEAP32[buf + 24 >> 2] = stat.gid;
        HEAP32[buf + 28 >> 2] = stat.rdev;
        HEAP32[buf + 32 >> 2] = 0;
        HEAP32[buf + 36 >> 2] = stat.size;
        HEAP32[buf + 40 >> 2] = 4096;
        HEAP32[buf + 44 >> 2] = stat.blocks;
        HEAP32[buf + 48 >> 2] = stat.atime.getTime() / 1e3 | 0;
        HEAP32[buf + 52 >> 2] = 0;
        HEAP32[buf + 56 >> 2] = stat.mtime.getTime() / 1e3 | 0;
        HEAP32[buf + 60 >> 2] = 0;
        HEAP32[buf + 64 >> 2] = stat.ctime.getTime() / 1e3 | 0;
        HEAP32[buf + 68 >> 2] = 0;
        HEAP32[buf + 72 >> 2] = stat.ino;
        return 0;
    },
    doMsync: function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
    },
    doMkdir: function (path, mode) {
        path = PATH.normalize(path);
        if (path[path.length - 1] === "/")
            path = path.substr(0, path.length - 1);
        FS.mkdir(path, mode, 0);
        return 0;
    },
    doMknod: function (path, mode, dev) {
        switch (mode & 61440) {
        case 32768:
        case 8192:
        case 24576:
        case 4096:
        case 49152:
            break;
        default:
            return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
    },
    doReadlink: function (path, buf, bufsize) {
        if (bufsize <= 0)
            return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
    },
    doAccess: function (path, amode) {
        if (amode & ~7) {
            return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = "";
        if (amode & 4)
            perms += "r";
        if (amode & 2)
            perms += "w";
        if (amode & 1)
            perms += "x";
        if (perms && FS.nodePermissions(node, perms)) {
            return -ERRNO_CODES.EACCES;
        }
        return 0;
    },
    doDup: function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest)
            FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
    },
    doReadv: function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[iov + i * 8 >> 2];
            var len = HEAP32[iov + (i * 8 + 4) >> 2];
            var curr = FS.read(stream, HEAP8, ptr, len, offset);
            if (curr < 0)
                return -1;
            ret += curr;
            if (curr < len)
                break;
        }
        return ret;
    },
    doWritev: function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[iov + i * 8 >> 2];
            var len = HEAP32[iov + (i * 8 + 4) >> 2];
            var curr = FS.write(stream, HEAP8, ptr, len, offset);
            if (curr < 0)
                return -1;
            ret += curr;
        }
        return ret;
    },
    varargs: 0,
    get: function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
        return ret;
    },
    getStr: function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
    },
    getStreamFromFD: function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream)
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
    },
    getSocketFromFD: function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket)
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
    },
    getSocketAddress: function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0)
            return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno)
            throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
    },
    get64: function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0)
            assert(high === 0);
        else
            assert(high === -1);
        return low;
    },
    getZero: function () {
        assert(SYSCALLS.get() === 0);
    }
};
function ___syscall3(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
        return FS.read(stream, HEAP8, buf, count);
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
        return -e.errno;
    }
}
function ___syscall5(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get();
        var stream = FS.open(pathname, flags, mode);
        return stream.fd;
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
        return -e.errno;
    }
}
function ___lock() {
}
function ___unlock() {
}
function ___syscall6(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD();
        FS.close(stream);
        return 0;
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
        return -e.errno;
    }
}
Module["_i64Add"] = _i64Add;
function _sbrk(bytes) {
    var self = _sbrk;
    if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP);
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function () {
            abort("cannot dynamically allocate, sbrk now has control");
        };
    }
    var ret = DYNAMICTOP;
    if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success)
            return -1 >>> 0;
    }
    return ret;
}
var __sigalrm_handler = 0;
function _signal(sig, func) {
    if (sig == 14) {
        __sigalrm_handler = func;
    } else {
    }
    return 0;
}
function _emscripten_memcpy_big(dest, src, num) {
    HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
    return dest;
}
Module["_memcpy"] = _memcpy;
function ___syscall4(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
        return FS.write(stream, HEAP8, buf, count);
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
        return -e.errno;
    }
}
function __exit(status) {
    Module["exit"](status);
}
function _exit(status) {
    __exit(status);
}
function _time(ptr) {
    var ret = Date.now() / 1e3 | 0;
    if (ptr) {
        HEAP32[ptr >> 2] = ret;
    }
    return ret;
}
function _pthread_self() {
    return 0;
}
function ___syscall140(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
        var offset = offset_low;
        assert(offset_high === 0);
        FS.llseek(stream, offset, whence);
        HEAP32[result >> 2] = stream.position;
        if (stream.getdents && offset === 0 && whence === 0)
            stream.getdents = null;
        return 0;
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
        return -e.errno;
    }
}
function ___syscall146(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
        return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
        return -e.errno;
    }
}
function ___syscall54(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
        switch (op) {
        case 21505: {
                if (!stream.tty)
                    return -ERRNO_CODES.ENOTTY;
                return 0;
            }
            ;
        case 21506: {
                if (!stream.tty)
                    return -ERRNO_CODES.ENOTTY;
                return 0;
            }
            ;
        case 21519: {
                if (!stream.tty)
                    return -ERRNO_CODES.ENOTTY;
                var argp = SYSCALLS.get();
                HEAP32[argp >> 2] = 0;
                return 0;
            }
            ;
        case 21520: {
                if (!stream.tty)
                    return -ERRNO_CODES.ENOTTY;
                return -ERRNO_CODES.EINVAL;
            }
            ;
        case 21531: {
                var argp = SYSCALLS.get();
                return FS.ioctl(stream, op, argp);
            }
            ;
        default:
            abort("bad ioctl syscall " + op);
        }
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
        return -e.errno;
    }
}
function ___syscall221(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
        switch (cmd) {
        case 0: {
                var arg = SYSCALLS.get();
                if (arg < 0) {
                    return -ERRNO_CODES.EINVAL;
                }
                var newStream;
                newStream = FS.open(stream.path, stream.flags, 0, arg);
                return newStream.fd;
            }
            ;
        case 1:
        case 2:
            return 0;
        case 3:
            return stream.flags;
        case 4: {
                var arg = SYSCALLS.get();
                stream.flags |= arg;
                return 0;
            }
            ;
        case 12:
        case 12: {
                var arg = SYSCALLS.get();
                var offset = 0;
                HEAP16[arg + offset >> 1] = 2;
                return 0;
            }
            ;
        case 13:
        case 14:
        case 13:
        case 14:
            return 0;
        case 16:
        case 8:
            return -ERRNO_CODES.EINVAL;
        case 9:
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
        default: {
                return -ERRNO_CODES.EINVAL;
            }
        }
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
        return -e.errno;
    }
}
function ___syscall145(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
        return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
        return -e.errno;
    }
}
___buildEnvironment(ENV);
FS.staticInit();
__ATINIT__.unshift(function () {
    if (!Module["noFSInit"] && !FS.init.initialized)
        FS.init();
});
__ATMAIN__.push(function () {
    FS.ignorePermissions = false;
});
__ATEXIT__.push(function () {
    FS.quit();
});
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function () {
    TTY.init();
});
__ATEXIT__.push(function () {
    TTY.shutdown();
});
if (ENVIRONMENT_IS_NODE) {
    var fs = require("fs");
    var NODEJS_PATH = require("path");
    NODEFS.staticInit();
}
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true;
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
var cttz_i8 = allocate([
    8,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    6,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    7,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    6,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    5,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    4,
    0,
    1,
    0,
    2,
    0,
    1,
    0,
    3,
    0,
    1,
    0,
    2,
    0,
    1,
    0
], "i8", ALLOC_DYNAMIC);
function invoke_i(index) {
    try {
        return Module["dynCall_i"](index);
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
            throw e;
        asm["setThrew"](1, 0);
    }
}
function invoke_ii(index, a1) {
    try {
        return Module["dynCall_ii"](index, a1);
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
            throw e;
        asm["setThrew"](1, 0);
    }
}
function invoke_iiii(index, a1, a2, a3) {
    try {
        return Module["dynCall_iiii"](index, a1, a2, a3);
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
            throw e;
        asm["setThrew"](1, 0);
    }
}
function invoke_vi(index, a1) {
    try {
        Module["dynCall_vi"](index, a1);
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp")
            throw e;
        asm["setThrew"](1, 0);
    }
}
Module.asmGlobalArg = {
    "Math": Math,
    "Int8Array": Int8Array,
    "Int16Array": Int16Array,
    "Int32Array": Int32Array,
    "Uint8Array": Uint8Array,
    "Uint16Array": Uint16Array,
    "Uint32Array": Uint32Array,
    "Float32Array": Float32Array,
    "Float64Array": Float64Array,
    "NaN": NaN,
    "Infinity": Infinity
};
Module.asmLibraryArg = {
    "abort": abort,
    "assert": assert,
    "invoke_i": invoke_i,
    "invoke_ii": invoke_ii,
    "invoke_iiii": invoke_iiii,
    "invoke_vi": invoke_vi,
    "_pthread_cleanup_pop": _pthread_cleanup_pop,
    "___syscall221": ___syscall221,
    "___syscall6": ___syscall6,
    "_pthread_cleanup_push": _pthread_cleanup_push,
    "___assert_fail": ___assert_fail,
    "___buildEnvironment": ___buildEnvironment,
    "_signal": _signal,
    "___setErrNo": ___setErrNo,
    "_sbrk": _sbrk,
    "_emscripten_memcpy_big": _emscripten_memcpy_big,
    "__exit": __exit,
    "_pthread_self": _pthread_self,
    "_getenv": _getenv,
    "___syscall54": ___syscall54,
    "___unlock": ___unlock,
    "___syscall3": ___syscall3,
    "_sysconf": _sysconf,
    "___lock": ___lock,
    "_abort": _abort,
    "___syscall5": ___syscall5,
    "___syscall4": ___syscall4,
    "_time": _time,
    "___syscall140": ___syscall140,
    "_exit": _exit,
    "___syscall145": ___syscall145,
    "___syscall146": ___syscall146,
    "STACKTOP": STACKTOP,
    "STACK_MAX": STACK_MAX,
    "tempDoublePtr": tempDoublePtr,
    "ABORT": ABORT,
    "cttz_i8": cttz_i8
};
var asm = function (global, env, buffer) {
    "use asm";
    var a = new global.Int8Array(buffer);
    var b = new global.Int16Array(buffer);
    var c = new global.Int32Array(buffer);
    var d = new global.Uint8Array(buffer);
    var e = new global.Uint16Array(buffer);
    var f = new global.Uint32Array(buffer);
    var g = new global.Float32Array(buffer);
    var h = new global.Float64Array(buffer);
    var i = env.STACKTOP | 0;
    var j = env.STACK_MAX | 0;
    var k = env.tempDoublePtr | 0;
    var l = env.ABORT | 0;
    var m = env.cttz_i8 | 0;
    var n = 0;
    var o = 0;
    var p = 0;
    var q = 0;
    var r = global.NaN, s = global.Infinity;
    var t = 0, u = 0, v = 0, w = 0, x = 0.0, y = 0, z = 0, A = 0, B = 0.0;
    var C = 0;
    var D = 0;
    var E = 0;
    var F = 0;
    var G = 0;
    var H = 0;
    var I = 0;
    var J = 0;
    var K = 0;
    var L = 0;
    var M = global.Math.floor;
    var N = global.Math.abs;
    var O = global.Math.sqrt;
    var P = global.Math.pow;
    var Q = global.Math.cos;
    var R = global.Math.sin;
    var S = global.Math.tan;
    var T = global.Math.acos;
    var U = global.Math.asin;
    var V = global.Math.atan;
    var W = global.Math.atan2;
    var X = global.Math.exp;
    var Y = global.Math.log;
    var Z = global.Math.ceil;
    var _ = global.Math.imul;
    var $ = global.Math.min;
    var aa = global.Math.clz32;
    var ba = env.abort;
    var ca = env.assert;
    var da = env.invoke_i;
    var ea = env.invoke_ii;
    var fa = env.invoke_iiii;
    var ga = env.invoke_vi;
    var ha = env._pthread_cleanup_pop;
    var ia = env.___syscall221;
    var ja = env.___syscall6;
    var ka = env._pthread_cleanup_push;
    var la = env.___assert_fail;
    var ma = env.___buildEnvironment;
    var na = env._signal;
    var oa = env.___setErrNo;
    var pa = env._sbrk;
    var qa = env._emscripten_memcpy_big;
    var ra = env.__exit;
    var sa = env._pthread_self;
    var ta = env._getenv;
    var ua = env.___syscall54;
    var va = env.___unlock;
    function* wa() {
        return yield* Module.yld_api.___syscall3.apply(null, arguments);
    }
    var xa = env._sysconf;
    var ya = env.___lock;
    var za = env._abort;
    var Aa = env.___syscall5;
    var Ba = env.___syscall4;
    var Ca = env._time;
    var Da = env.___syscall140;
    var Ea = env._exit;
    function* Fa() {
        return yield* Module.yld_api.___syscall145.apply(null, arguments);
    }
    var Ga = env.___syscall146;
    var Ha = 0.0;
    function Ma(a) {
        a = a | 0;
        var b = 0;
        b = i;
        i = i + a | 0;
        i = i + 15 & -16;
        return b | 0;
    }
    function Na() {
        return i | 0;
    }
    function Oa(a) {
        a = a | 0;
        i = a;
    }
    function Pa(a, b) {
        a = a | 0;
        b = b | 0;
        i = a;
        j = b;
    }
    function Qa(a, b) {
        a = a | 0;
        b = b | 0;
        if (!n) {
            n = a;
            o = b;
        }
    }
    function Ra(b) {
        b = b | 0;
        a[k >> 0] = a[b >> 0];
        a[k + 1 >> 0] = a[b + 1 >> 0];
        a[k + 2 >> 0] = a[b + 2 >> 0];
        a[k + 3 >> 0] = a[b + 3 >> 0];
    }
    function Sa(b) {
        b = b | 0;
        a[k >> 0] = a[b >> 0];
        a[k + 1 >> 0] = a[b + 1 >> 0];
        a[k + 2 >> 0] = a[b + 2 >> 0];
        a[k + 3 >> 0] = a[b + 3 >> 0];
        a[k + 4 >> 0] = a[b + 4 >> 0];
        a[k + 5 >> 0] = a[b + 5 >> 0];
        a[k + 6 >> 0] = a[b + 6 >> 0];
        a[k + 7 >> 0] = a[b + 7 >> 0];
    }
    function Ta(a) {
        a = a | 0;
        C = a;
    }
    function Ua() {
        return C | 0;
    }
    function* Va(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0;
        h = i;
        i = i + 128 | 0;
        if (Sd(0) | 0 ? Sd(1) | 0 : 0)
            a[21813] = 1;
        Hd(c[449] | 0, 0, 1, 0) | 0;
        f = ta(10160) | 0;
        if (f | 0) {
            c[h >> 2] = 10160;
            e = 1;
            a:
                while (1) {
                    b:
                        while (1) {
                            switch (a[f >> 0] | 0) {
                            case 0:
                                break a;
                            case 32:
                                break;
                            default:
                                break b;
                            }
                            f = f + 1 | 0;
                        }
                    g = e + 1 | 0;
                    c[h + (e << 2) >> 2] = f;
                    c:
                        while (1) {
                            switch (a[f >> 0] | 0) {
                            case 0: {
                                    e = g;
                                    continue a;
                                }
                            case 32:
                                break c;
                            default: {
                                }
                            }
                            f = f + 1 | 0;
                        }
                    a[f >> 0] = 0;
                    e = g;
                    f = f + 1 | 0;
                }
            yield* Wa(e, h);
        }
        yield* Wa(b, d);
        if (ta(10662) | 0)
            c[5274] = 1;
        e = ta(10678) | 0;
        if (!e)
            e = 70;
        else {
            e = Td(e) | 0;
            e = (e | 0) < 3 & (e | 0) != 0 ? 70 : e;
        }
        c[5300] = e;
        yield* nb();
        lb();
        if (a[21813] | 0)
            na(2, 1) | 0;
        cc();
        yield* Yb();
        a[21815] = 0;
        a[21808] = 1;
        if (!((yield* Ya()) | 0))
            Ea(1);
        (yield* Za()) | 0;
        if (!(c[5271] | 0))
            Ea(0);
        (yield* Md(10)) | 0;
        Ea(0);
        return 0;
    }
    function* Wa(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0;
        h = i;
        i = i + 80 | 0;
        g = h + 32 | 0;
        f = h;
        e = h + 64 | 0;
        c[397] = 0;
        a:
            while (1)
                switch (vd(b, d, 10172, 8, e) | 0) {
                case 0:
                    continue a;
                case -1: {
                        e = 3;
                        break a;
                    }
                case 104: {
                        e = 5;
                        break a;
                    }
                case 118: {
                        e = 10;
                        break a;
                    }
                case 99: {
                        c[5271] = 1;
                        continue a;
                    }
                case 105: {
                        a[21813] = 1;
                        continue a;
                    }
                case 108: {
                        c[5272] = 1;
                        continue a;
                    }
                case 113: {
                        c[5275] = 1;
                        continue a;
                    }
                case 115: {
                        c[5274] = 1;
                        continue a;
                    }
                case 119: {
                        c[5273] = 1;
                        continue a;
                    }
                default: {
                        e = 12;
                        break a;
                    }
                }
        if ((e | 0) == 3) {
            if ((c[397] | 0) >= (b | 0)) {
                i = h;
                return;
            }
            do {
                f = (yield* Ob(8)) | 0;
                g = c[397] | 0;
                c[f >> 2] = c[d + (g << 2) >> 2];
                c[f + 4 >> 2] = 0;
                e = c[5248] | 0;
                if (!e)
                    c[5276] = f;
                else
                    c[e + 4 >> 2] = f;
                c[5248] = f;
                g = g + 1 | 0;
                c[397] = g;
            } while ((g | 0) < (b | 0));
            i = h;
            return;
        } else if ((e | 0) == 5) {
            c[f >> 2] = c[d >> 2];
            c[f + 4 >> 2] = 10288;
            c[f + 8 >> 2] = 10336;
            c[f + 12 >> 2] = 10381;
            c[f + 16 >> 2] = 10436;
            c[f + 20 >> 2] = 10485;
            c[f + 24 >> 2] = 10545;
            c[f + 28 >> 2] = 10605;
            (yield* Id(10242, f)) | 0;
            Ea(0);
        } else if ((e | 0) == 10) {
            yield* ic();
            Ea(0);
        } else if ((e | 0) == 12) {
            c[g >> 2] = c[d >> 2];
            c[g + 4 >> 2] = 10288;
            c[g + 8 >> 2] = 10336;
            c[g + 12 >> 2] = 10381;
            c[g + 16 >> 2] = 10436;
            c[g + 20 >> 2] = 10485;
            c[g + 24 >> 2] = 10545;
            c[g + 28 >> 2] = 10605;
            (yield* Id(10242, g)) | 0;
            Ea(1);
        }
    }
    function* Xa(a) {
        a = a | 0;
        ud(1, 10693, 26) | 0;
        Ea(0);
    }
    function* Ya() {
        var b = 0, d = 0, e = 0, f = 0;
        f = i;
        i = i + 16 | 0;
        e = f;
        c[5301] = 1;
        if (a[21815] | 0) {
            e = 0;
            i = f;
            return e | 0;
        }
        if (!((c[5272] | 0) == 0 | (a[21808] | 0) == 0) ? ((yield* dc(10719, 2)) | 0, (yield* dc(10721, 2)) | 0, (yield* dc(10723, 2)) | 0, (yield* dc(10725, 2)) | 0, (yield* dc(10727, 2)) | 0, (yield* dc(10729, 2)) | 0, 14768) : 0) {
            b = 14768;
            d = 1400;
            do {
                yield* mb(b);
                d = d + 4 | 0;
                b = c[d >> 2] | 0;
            } while ((b | 0) != 0);
        }
        b = c[5276] | 0;
        if (!b) {
            b = c[479] | 0;
            if (!(a[21808] | 0))
                (yield* Zc(c[5252] | 0)) | 0;
            c[5252] = b;
            a[21808] = 0;
            a[21815] = 1;
            e = 1;
            i = f;
            return e | 0;
        }
        b = xd(c[b >> 2] | 0, 10731) | 0;
        if (!b) {
            d = c[508] | 0;
            c[e >> 2] = c[c[5276] >> 2];
            (yield* Ad(d, 10733, e)) | 0;
            Ea(1);
        }
        if (!(a[21808] | 0))
            (yield* Zc(c[5252] | 0)) | 0;
        c[5252] = b;
        a[21808] = 0;
        e = c[5276] | 0;
        c[5282] = c[e >> 2];
        c[5276] = c[e + 4 >> 2];
        Vd(e);
        e = 1;
        i = f;
        return e | 0;
    }
    function* Za() {
        var e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, _ = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0, ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = 0, ya = 0, za = 0, Aa = 0, Ba = 0, Ca = 0, Da = 0, Fa = 0, Ga = 0, Ha = 0, Ia = 0, Ja = 0, Ka = 0, La = 0, Ma = 0, Na = 0, Oa = 0, Pa = 0, Qa = 0, Ra = 0, Sa = 0, Ta = 0, Ua = 0, Va = 0, Wa = 0, Xa = 0, Ya = 0, Za = 0, $a = 0, ab = 0, bb = 0, cb = 0, db = 0, eb = 0, fb = 0, gb = 0, hb = 0, ib = 0, jb = 0, kb = 0, lb = 0, mb = 0, nb = 0, ob = 0, pb = 0, qb = 0, rb = 0, sb = 0;
        sb = i;
        i = i + 2016 | 0;
        pb = sb + 800 | 0;
        Ja = sb + 792 | 0;
        Ia = sb + 784 | 0;
        Ha = sb + 776 | 0;
        Ga = sb + 768 | 0;
        Fa = sb + 760 | 0;
        Da = sb + 752 | 0;
        Ca = sb + 744 | 0;
        Ba = sb + 736 | 0;
        Aa = sb + 728 | 0;
        za = sb + 720 | 0;
        xa = sb + 712 | 0;
        wa = sb + 704 | 0;
        va = sb + 696 | 0;
        ua = sb + 688 | 0;
        ta = sb + 680 | 0;
        sa = sb + 672 | 0;
        ra = sb + 664 | 0;
        pa = sb + 656 | 0;
        oa = sb + 648 | 0;
        na = sb + 640 | 0;
        ma = sb + 632 | 0;
        la = sb + 624 | 0;
        ka = sb + 616 | 0;
        ja = sb + 608 | 0;
        ia = sb + 600 | 0;
        ha = sb + 592 | 0;
        fa = sb + 584 | 0;
        ea = sb + 576 | 0;
        da = sb + 568 | 0;
        ca = sb + 560 | 0;
        ba = sb + 552 | 0;
        aa = sb + 544 | 0;
        $ = sb + 536 | 0;
        _ = sb + 528 | 0;
        Z = sb + 520 | 0;
        X = sb + 512 | 0;
        W = sb + 504 | 0;
        V = sb + 488 | 0;
        U = sb + 480 | 0;
        T = sb + 472 | 0;
        S = sb + 464 | 0;
        R = sb + 456 | 0;
        P = sb + 448 | 0;
        O = sb + 440 | 0;
        N = sb + 432 | 0;
        M = sb + 424 | 0;
        L = sb + 416 | 0;
        K = sb + 408 | 0;
        J = sb + 400 | 0;
        I = sb + 392 | 0;
        H = sb + 384 | 0;
        G = sb + 376 | 0;
        F = sb + 368 | 0;
        E = sb + 360 | 0;
        C = sb + 352 | 0;
        B = sb + 344 | 0;
        A = sb + 336 | 0;
        z = sb + 328 | 0;
        y = sb + 320 | 0;
        nb = sb + 312 | 0;
        mb = sb + 304 | 0;
        lb = sb + 296 | 0;
        kb = sb + 288 | 0;
        ib = sb + 280 | 0;
        hb = sb + 272 | 0;
        gb = sb + 264 | 0;
        fb = sb + 256 | 0;
        eb = sb + 248 | 0;
        db = sb + 232 | 0;
        cb = sb + 224 | 0;
        bb = sb + 216 | 0;
        $a = sb + 208 | 0;
        Za = sb + 200 | 0;
        Ya = sb + 192 | 0;
        Xa = sb + 184 | 0;
        Wa = sb + 176 | 0;
        Va = sb + 168 | 0;
        Ua = sb + 160 | 0;
        Sa = sb + 152 | 0;
        Ra = sb + 144 | 0;
        Qa = sb + 136 | 0;
        Pa = sb + 128 | 0;
        Oa = sb + 120 | 0;
        Na = sb + 112 | 0;
        Ma = sb + 104 | 0;
        Ka = sb + 96 | 0;
        ya = sb + 88 | 0;
        qa = sb + 80 | 0;
        ga = sb + 72 | 0;
        Y = sb + 64 | 0;
        Q = sb + 56 | 0;
        D = sb + 48 | 0;
        jb = sb + 40 | 0;
        ab = sb + 32 | 0;
        Ta = sb + 24 | 0;
        La = sb + 16 | 0;
        x = sb + 8 | 0;
        w = sb;
        rb = sb + 1608 | 0;
        g = sb + 808 | 0;
        c[5249] = 0;
        c[5250] = -2;
        r = 0;
        e = rb;
        j = rb;
        k = 200;
        n = 0;
        m = g;
        a:
            while (1) {
                b[j >> 1] = n;
                if ((e + (k << 1) + -2 | 0) >>> 0 <= j >>> 0) {
                    l = (j - e >> 1) + 1 | 0;
                    if (k >>> 0 > 9999) {
                        qb = 272;
                        break;
                    }
                    h = k << 1;
                    h = h >>> 0 > 1e4 ? 1e4 : h;
                    g = Ud(h * 6 | 3) | 0;
                    if (!g) {
                        qb = 272;
                        break;
                    }
                    de(g | 0, e | 0, l << 1 | 0) | 0;
                    k = g + ((h >>> 1 & 1073741823) << 2) | 0;
                    de(k | 0, m | 0, l << 2 | 0) | 0;
                    if ((e | 0) != (rb | 0))
                        Vd(e);
                    if ((h | 0) > (l | 0)) {
                        e = g;
                        j = g + (l << 1) + -2 | 0;
                        s = h;
                        t = k;
                        q = k + (l << 2) + -4 | 0;
                    } else {
                        f = 1;
                        ob = g;
                        break;
                    }
                } else {
                    s = k;
                    t = m;
                    q = g;
                }
                h = b[2392 + (n << 1) >> 1] | 0;
                k = h << 16 >> 16;
                do
                    if (h << 16 >> 16 != -144) {
                        g = c[5250] | 0;
                        if ((g | 0) == -2) {
                            g = (yield* _a()) | 0;
                            c[5250] = g;
                        }
                        if ((g | 0) >= 1)
                            if (g >>> 0 < 293) {
                                m = g;
                                g = d[10758 + g >> 0] | 0;
                            } else {
                                m = g;
                                g = 2;
                            }
                        else {
                            c[5250] = 0;
                            m = 0;
                            g = 0;
                        }
                        k = g + k | 0;
                        if (k >>> 0 <= 719 ? (b[2788 + (k << 1) >> 1] | 0) == (g | 0) : 0) {
                            g = b[4228 + (k << 1) >> 1] | 0;
                            l = g << 16 >> 16;
                            if (g << 16 >> 16 < 1) {
                                if (!(g << 16 >> 16)) {
                                    qb = 259;
                                    break;
                                }
                                p = 0 - l | 0;
                                qb = 26;
                                break;
                            }
                            if ((k | 0) == 188) {
                                f = 0;
                                qb = 273;
                                break a;
                            }
                            if (m | 0)
                                c[5250] = -2;
                            g = q + 4 | 0;
                            c[g >> 2] = c[5251];
                            m = (r | 0) == 0 ? 0 : r + -1 | 0;
                            h = l;
                        } else
                            qb = 25;
                    } else
                        qb = 25;
                while (0);
                if ((qb | 0) == 25) {
                    g = a[11051 + n >> 0] | 0;
                    if (!(g << 24 >> 24))
                        qb = 259;
                    else {
                        p = g & 255;
                        qb = 26;
                    }
                }
                do
                    if ((qb | 0) == 26) {
                        qb = 0;
                        o = d[11249 + p >> 0] | 0;
                        n = c[q + (1 - o << 2) >> 2] | 0;
                        b:
                            do
                                switch (p | 0) {
                                case 27: {
                                        qb = 50;
                                        break a;
                                    }
                                case 2: {
                                        if ((a[21813] | 0) == 0 | (c[5275] | 0) != 0) {
                                            m = r;
                                            g = 0;
                                        } else {
                                            yield* ic();
                                            yield* hc();
                                            m = r;
                                            g = 0;
                                        }
                                        break;
                                    }
                                case 4: {
                                        yield* _b();
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 5: {
                                        yield* _b();
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 6: {
                                        yield* Yb();
                                        m = 0;
                                        g = n;
                                        break;
                                    }
                                case 8: {
                                        yield* Wb(11362, w);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 9: {
                                        m = r;
                                        g = 0;
                                        break;
                                    }
                                case 13: {
                                        m = r;
                                        g = 0;
                                        break;
                                    }
                                case 20: {
                                        m = r;
                                        g = c[q >> 2] | 0;
                                        break;
                                    }
                                case 21: {
                                        yield* jc(21809);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 22: {
                                        yield* ec();
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 23: {
                                        g = c[q >> 2] | 0;
                                        if (g & 2) {
                                            yield* Wb(11382, x);
                                            g = c[q >> 2] | 0;
                                        }
                                        if (!(g & 1)) {
                                            yield* Zb(11409);
                                            m = r;
                                            g = n;
                                            break b;
                                        } else {
                                            yield* Zb(11407);
                                            m = r;
                                            g = n;
                                            break b;
                                        }
                                    }
                                case 24: {
                                        yield* Zb(11411);
                                        yield* Zb(c[q >> 2] | 0);
                                        Vd(c[q >> 2] | 0);
                                        m = r;
                                        g = 0;
                                        break;
                                    }
                                case 25: {
                                        g = c[5277] | 0;
                                        if (!g) {
                                            yield* Vb(11413, La);
                                            m = r;
                                            g = n;
                                            break b;
                                        } else {
                                            m = c[5269] | 0;
                                            c[Ta >> 2] = g;
                                            (yield* Bd(m, 11439, Ta)) | 0;
                                            yield* Zb(c[5269] | 0);
                                            m = r;
                                            g = n;
                                            break b;
                                        }
                                    }
                                case 26: {
                                        yield* Wb(11445, ab);
                                        g = c[5279] | 0;
                                        if (!g) {
                                            yield* Vb(11464, jb);
                                            m = r;
                                            g = n;
                                            break b;
                                        } else {
                                            m = c[5269] | 0;
                                            c[D >> 2] = g;
                                            (yield* Bd(m, 11439, D)) | 0;
                                            yield* Zb(c[5269] | 0);
                                            m = r;
                                            g = n;
                                            break b;
                                        }
                                    }
                                case 28: {
                                        yield* Zb(11487);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 29: {
                                        yield* Zb(11489);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 30: {
                                        c[q >> 2] = c[5277];
                                        m = c[5280] | 0;
                                        c[5280] = m + 1;
                                        c[5277] = m;
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 31: {
                                        h = q + -4 | 0;
                                        g = c[h >> 2] | 0;
                                        if (g & 2) {
                                            yield* Wb(11491, Q);
                                            g = c[h >> 2] | 0;
                                        }
                                        if (g & 8) {
                                            yield* Vb(11526, Y);
                                            g = c[h >> 2] | 0;
                                        }
                                        if (!(g & 16))
                                            yield* Zb(11409);
                                        g = c[5280] | 0;
                                        c[5280] = g + 1;
                                        c[h >> 2] = g;
                                        m = c[5269] | 0;
                                        c[ga >> 2] = g;
                                        (yield* Bd(m, 11551, ga)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 32: {
                                        h = q + -4 | 0;
                                        g = c[h >> 2] | 0;
                                        if (g & 8) {
                                            yield* Vb(11557, qa);
                                            g = c[h >> 2] | 0;
                                        }
                                        if (g & 16 | 0)
                                            yield* Zb(11583);
                                        m = c[5280] | 0;
                                        c[5280] = m + 1;
                                        c[h >> 2] = m;
                                        g = c[5269] | 0;
                                        n = c[5277] | 0;
                                        c[ya >> 2] = m;
                                        c[ya + 4 >> 2] = n;
                                        (yield* Bd(g, 11585, ya)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        g = c[5279] | 0;
                                        n = c[5280] | 0;
                                        c[5280] = n + 1;
                                        c[5279] = n;
                                        m = c[5269] | 0;
                                        c[Ka >> 2] = n;
                                        (yield* Bd(m, 11551, Ka)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        break;
                                    }
                                case 33: {
                                        h = q + -4 | 0;
                                        g = c[h >> 2] | 0;
                                        if (g & 2) {
                                            yield* Wb(11596, Ma);
                                            g = c[h >> 2] | 0;
                                        }
                                        if (g & 8) {
                                            yield* Vb(11631, Na);
                                            g = c[h >> 2] | 0;
                                        }
                                        h = c[5269] | 0;
                                        k = c[q + -28 >> 2] | 0;
                                        l = c[q + -16 >> 2] | 0;
                                        if (!(g & 16)) {
                                            c[Pa >> 2] = k;
                                            c[Pa + 4 >> 2] = l;
                                            (yield* Bd(h, 11667, Pa)) | 0;
                                        } else {
                                            c[Oa >> 2] = k;
                                            c[Oa + 4 >> 2] = l;
                                            (yield* Bd(h, 11656, Oa)) | 0;
                                        }
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 34: {
                                        m = c[5269] | 0;
                                        g = c[5277] | 0;
                                        c[Qa >> 2] = c[5279];
                                        c[Qa + 4 >> 2] = g;
                                        (yield* Bd(m, 11656, Qa)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        c[5277] = c[q + -52 >> 2];
                                        c[5279] = c[q + -20 >> 2];
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 35: {
                                        g = q + -4 | 0;
                                        if (c[g >> 2] & 8 | 0)
                                            yield* Vb(11679, Ra);
                                        c[g >> 2] = c[5278];
                                        g = c[5280] | 0;
                                        c[5280] = g + 1;
                                        c[5278] = g;
                                        m = c[5269] | 0;
                                        c[Sa >> 2] = g;
                                        (yield* Bd(m, 11695, Sa)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 36: {
                                        m = c[5269] | 0;
                                        c[Ua >> 2] = c[5278];
                                        (yield* Bd(m, 11551, Ua)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        c[5278] = c[q + -20 >> 2];
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 37: {
                                        g = c[5280] | 0;
                                        c[5280] = g + 1;
                                        c[q >> 2] = g;
                                        m = c[5269] | 0;
                                        c[Va >> 2] = g;
                                        (yield* Bd(m, 11551, Va)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 38: {
                                        if (c[q >> 2] & 8 | 0)
                                            yield* Vb(11679, Wa);
                                        c[q >> 2] = c[5277];
                                        g = c[5280] | 0;
                                        c[5280] = g + 1;
                                        c[5277] = g;
                                        m = c[5269] | 0;
                                        c[Xa >> 2] = g;
                                        (yield* Bd(m, 11695, Xa)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 39: {
                                        m = c[5269] | 0;
                                        g = c[5277] | 0;
                                        c[Ya >> 2] = c[q + -28 >> 2];
                                        c[Ya + 4 >> 2] = g;
                                        (yield* Bd(m, 11656, Ya)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        c[5277] = c[q + -16 >> 2];
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 40: {
                                        m = r;
                                        g = 0;
                                        break;
                                    }
                                case 41: {
                                        yield* Wb(11701, Za);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 45: {
                                        yield* Zb(11717);
                                        yield* Zb(c[q >> 2] | 0);
                                        Vd(c[q >> 2] | 0);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 46: {
                                        if (c[q >> 2] & 8 | 0)
                                            yield* Vb(11719, $a);
                                        yield* Zb(11744);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 48: {
                                        yield* Wb(11746, bb);
                                        l = c[5280] | 0;
                                        c[5280] = l + 1;
                                        c[q >> 2] = l;
                                        m = c[5269] | 0;
                                        g = c[5278] | 0;
                                        c[cb >> 2] = l;
                                        c[cb + 4 >> 2] = g;
                                        (yield* Bd(m, 11774, cb)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        c[5278] = c[q >> 2];
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 50: {
                                        m = q + -20 | 0;
                                        yield* Ub(c[m >> 2] | 0, c[q >> 2] | 0);
                                        k = (yield* Qb(c[m >> 2] | 0)) | 0;
                                        l = (yield* Qb(c[q >> 2] | 0)) | 0;
                                        yield* Xb((Rc(k) | 0) + 30 + (Rc(l) | 0) | 0);
                                        h = (yield* dc(c[q + -28 >> 2] | 0, 3)) | 0;
                                        c[38] = h;
                                        g = c[5269] | 0;
                                        c[db >> 2] = h;
                                        c[db + 4 >> 2] = k;
                                        c[db + 8 >> 2] = l;
                                        (yield* Bd(g, 11784, db)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        a[(c[5283] | 0) + ((c[38] | 0) * 28 | 0) + 1 >> 0] = c[q + -32 >> 2];
                                        Tb(c[m >> 2] | 0);
                                        Tb(c[q >> 2] | 0);
                                        c[q + -36 >> 2] = c[5280];
                                        c[5280] = 1;
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 51: {
                                        yield* Zb(11795);
                                        c[5280] = c[q + -48 >> 2];
                                        c[38] = -1;
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 52: {
                                        m = r;
                                        g = 0;
                                        break;
                                    }
                                case 53: {
                                        yield* Wb(11799, eb);
                                        m = r;
                                        g = 1;
                                        break;
                                    }
                                case 54: {
                                        m = r;
                                        g = 0;
                                        break;
                                    }
                                case 56: {
                                        m = r;
                                        g = 0;
                                        break;
                                    }
                                case 57: {
                                        m = r;
                                        g = c[q + -4 >> 2] | 0;
                                        break;
                                    }
                                case 58: {
                                        m = r;
                                        g = c[q + -4 >> 2] | 0;
                                        break;
                                    }
                                case 59: {
                                        m = r;
                                        g = (yield* Pb(0, (yield* dc(c[q >> 2] | 0, 0)) | 0, 0)) | 0;
                                        break;
                                    }
                                case 60: {
                                        m = r;
                                        g = (yield* Pb(0, (yield* dc(c[q + -8 >> 2] | 0, 1)) | 0, 0)) | 0;
                                        break;
                                    }
                                case 61: {
                                        g = (yield* Pb(0, (yield* dc(c[q + -8 >> 2] | 0, 1)) | 0, 1)) | 0;
                                        yield* Wb(11814, fb);
                                        m = r;
                                        break;
                                    }
                                case 62: {
                                        g = (yield* Pb(0, (yield* dc(c[q + -8 >> 2] | 0, 1)) | 0, 1)) | 0;
                                        yield* Wb(11814, gb);
                                        m = r;
                                        break;
                                    }
                                case 63: {
                                        m = r;
                                        g = (yield* Pb(c[q + -8 >> 2] | 0, (yield* dc(c[q >> 2] | 0, 0)) | 0, 0)) | 0;
                                        break;
                                    }
                                case 64: {
                                        m = r;
                                        g = (yield* Pb(c[q + -16 >> 2] | 0, (yield* dc(c[q + -8 >> 2] | 0, 1)) | 0, 0)) | 0;
                                        break;
                                    }
                                case 65: {
                                        g = (yield* Pb(c[q + -20 >> 2] | 0, (yield* dc(c[q + -8 >> 2] | 0, 1)) | 0, 1)) | 0;
                                        yield* Wb(11814, hb);
                                        m = r;
                                        break;
                                    }
                                case 66: {
                                        g = (yield* Pb(c[q + -20 >> 2] | 0, (yield* dc(c[q + -8 >> 2] | 0, 1)) | 0, 1)) | 0;
                                        yield* Wb(11814, ib);
                                        m = r;
                                        break;
                                    }
                                case 67: {
                                        m = r;
                                        g = 0;
                                        break;
                                    }
                                case 69: {
                                        g = c[q >> 2] | 0;
                                        if (g & 2) {
                                            yield* Wb(11838, kb);
                                            g = c[q >> 2] | 0;
                                        }
                                        if (g & 8 | 0)
                                            yield* Vb(11861, lb);
                                        m = r;
                                        g = (yield* Pb(0, 0, 0)) | 0;
                                        break;
                                    }
                                case 70: {
                                        m = c[5269] | 0;
                                        c[mb >> 2] = 0 - ((yield* dc(c[q + -8 >> 2] | 0, 1)) | 0);
                                        (yield* Bd(m, 11875, mb)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = (yield* Pb(0, 1, 0)) | 0;
                                        break;
                                    }
                                case 71: {
                                        g = c[q >> 2] | 0;
                                        if (g & 2) {
                                            yield* Wb(11838, nb);
                                            g = c[q >> 2] | 0;
                                        }
                                        if (g & 8 | 0)
                                            yield* Vb(11861, y);
                                        m = r;
                                        g = (yield* Pb(c[q + -8 >> 2] | 0, 0, 0)) | 0;
                                        break;
                                    }
                                case 72: {
                                        m = c[5269] | 0;
                                        c[z >> 2] = 0 - ((yield* dc(c[q + -8 >> 2] | 0, 1)) | 0);
                                        (yield* Bd(m, 11875, z)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = (yield* Pb(c[q + -16 >> 2] | 0, 1, 0)) | 0;
                                        break;
                                    }
                                case 73: {
                                        yield* Wb(11880, A);
                                        m = r;
                                        g = 16;
                                        break;
                                    }
                                case 75: {
                                        yield* Zb(11916);
                                        if ((c[38] | 0) == -1) {
                                            yield* Vb(11918, B);
                                            m = r;
                                            g = 0;
                                        } else {
                                            m = r;
                                            g = 0;
                                        }
                                        break;
                                    }
                                case 76: {
                                        g = c[q >> 2] | 0;
                                        if (g & 2) {
                                            yield* Wb(11948, C);
                                            g = c[q >> 2] | 0;
                                        }
                                        if (!(g & 4)) {
                                            yield* Wb(11979, E);
                                            g = c[q >> 2] | 0;
                                        }
                                        if (g & 8 | 0)
                                            yield* Vb(12018, F);
                                        g = c[38] | 0;
                                        if ((g | 0) == -1) {
                                            yield* Vb(11918, G);
                                            m = r;
                                            g = n;
                                            break b;
                                        }
                                        if (!(a[(c[5283] | 0) + (g * 28 | 0) + 1 >> 0] | 0)) {
                                            m = r;
                                            g = n;
                                        } else {
                                            yield* Vb(12054, H);
                                            m = r;
                                            g = n;
                                        }
                                        break;
                                    }
                                case 77: {
                                        if ((a[q >> 0] | 0) == 61) {
                                            m = r;
                                            g = n;
                                        } else {
                                            g = c[q + -4 >> 2] | 0;
                                            h = c[5269] | 0;
                                            if ((g | 0) < 0) {
                                                c[I >> 2] = 0 - g;
                                                (yield* Bd(h, 12092, I)) | 0;
                                            } else {
                                                c[J >> 2] = g;
                                                (yield* Bd(h, 12098, J)) | 0;
                                            }
                                            yield* Zb(c[5269] | 0);
                                            m = r;
                                            g = n;
                                        }
                                        break;
                                    }
                                case 78: {
                                        if (c[q >> 2] & 8 | 0)
                                            yield* Vb(12103, K);
                                        g = a[q + -8 >> 0] | 0;
                                        if (g << 24 >> 24 != 61) {
                                            n = c[5269] | 0;
                                            a[n >> 0] = g;
                                            a[n + 1 >> 0] = 0;
                                            yield* Zb(c[5269] | 0);
                                        }
                                        g = c[q + -12 >> 2] | 0;
                                        h = c[5269] | 0;
                                        if ((g | 0) < 0) {
                                            c[L >> 2] = 0 - g;
                                            (yield* Bd(h, 12135, L)) | 0;
                                        } else {
                                            c[M >> 2] = g;
                                            (yield* Bd(h, 12140, M)) | 0;
                                        }
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = 0;
                                        break;
                                    }
                                case 79: {
                                        yield* Wb(12145, N);
                                        g = c[5280] | 0;
                                        c[5280] = g + 1;
                                        c[q >> 2] = g;
                                        m = c[5269] | 0;
                                        c[O >> 2] = g;
                                        (yield* Bd(m, 12157, O)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 80: {
                                        g = q + -12 | 0;
                                        if (!((c[g >> 2] & 8 | 0) == 0 ? !(c[q >> 2] & 8 | 0) : 0))
                                            yield* Vb(12164, P);
                                        m = c[5269] | 0;
                                        n = c[q + -8 >> 2] | 0;
                                        c[R >> 2] = n;
                                        c[R + 4 >> 2] = n;
                                        (yield* Bd(m, 12188, R)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = (c[q >> 2] | c[g >> 2]) & -5;
                                        break;
                                    }
                                case 81: {
                                        yield* Wb(12200, S);
                                        g = c[5280] | 0;
                                        c[5280] = g + 1;
                                        c[q >> 2] = g;
                                        m = c[5269] | 0;
                                        c[T >> 2] = g;
                                        (yield* Bd(m, 12212, T)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 82: {
                                        g = q + -12 | 0;
                                        if (!((c[g >> 2] & 8 | 0) == 0 ? !(c[q >> 2] & 8 | 0) : 0))
                                            yield* Vb(12217, U);
                                        n = c[5280] | 0;
                                        c[5280] = n + 1;
                                        m = c[5269] | 0;
                                        l = c[q + -8 >> 2] | 0;
                                        c[V >> 2] = l;
                                        c[V + 4 >> 2] = n;
                                        c[V + 8 >> 2] = l;
                                        c[V + 12 >> 2] = n;
                                        (yield* Bd(m, 12241, V)) | 0;
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = (c[q >> 2] | c[g >> 2]) & -5;
                                        break;
                                    }
                                case 83: {
                                        g = c[q >> 2] | 0;
                                        if (g & 8) {
                                            yield* Vb(12260, W);
                                            g = c[q >> 2] | 0;
                                        }
                                        yield* Wb(12283, X);
                                        yield* Zb(12294);
                                        m = r;
                                        g = g & -5;
                                        break;
                                    }
                                case 84: {
                                        if (!((c[q + -8 >> 2] & 8 | 0) == 0 ? !(c[q >> 2] & 8 | 0) : 0))
                                            yield* Vb(12296, Z);
                                        g = c[q + -4 >> 2] | 0;
                                        switch (d[g >> 0] | 0) {
                                        case 61: {
                                                yield* Zb(12328);
                                                m = r;
                                                g = 3;
                                                break b;
                                            }
                                        case 33: {
                                                yield* Zb(12330);
                                                m = r;
                                                g = 3;
                                                break b;
                                            }
                                        case 60:
                                            if ((a[g + 1 >> 0] | 0) == 61) {
                                                yield* Zb(12332);
                                                m = r;
                                                g = 3;
                                                break b;
                                            } else {
                                                yield* Zb(12334);
                                                m = r;
                                                g = 3;
                                                break b;
                                            }
                                        case 62:
                                            if ((a[g + 1 >> 0] | 0) == 61) {
                                                yield* Zb(12336);
                                                m = r;
                                                g = 3;
                                                break b;
                                            } else {
                                                yield* Zb(12338);
                                                m = r;
                                                g = 3;
                                                break b;
                                            }
                                        default: {
                                                m = r;
                                                g = 3;
                                                break b;
                                            }
                                        }
                                    }
                                case 85: {
                                        g = q + -8 | 0;
                                        if (!((c[g >> 2] & 8 | 0) == 0 ? !(c[q >> 2] & 8 | 0) : 0))
                                            yield* Vb(12340, _);
                                        yield* Zb(12363);
                                        m = r;
                                        g = (c[q >> 2] | c[g >> 2]) & -5;
                                        break;
                                    }
                                case 86: {
                                        g = q + -8 | 0;
                                        if (!((c[g >> 2] & 8 | 0) == 0 ? !(c[q >> 2] & 8 | 0) : 0))
                                            yield* Vb(12365, $);
                                        yield* Zb(12388);
                                        m = r;
                                        g = (c[q >> 2] | c[g >> 2]) & -5;
                                        break;
                                    }
                                case 87: {
                                        g = q + -8 | 0;
                                        if (!((c[g >> 2] & 8 | 0) == 0 ? !(c[q >> 2] & 8 | 0) : 0))
                                            yield* Vb(12390, aa);
                                        yield* Zb(12413);
                                        m = r;
                                        g = (c[q >> 2] | c[g >> 2]) & -5;
                                        break;
                                    }
                                case 88: {
                                        g = q + -8 | 0;
                                        if (!((c[g >> 2] & 8 | 0) == 0 ? !(c[q >> 2] & 8 | 0) : 0))
                                            yield* Vb(12415, ba);
                                        yield* Zb(12438);
                                        m = r;
                                        g = (c[q >> 2] | c[g >> 2]) & -5;
                                        break;
                                    }
                                case 89: {
                                        g = q + -8 | 0;
                                        if (!((c[g >> 2] & 8 | 0) == 0 ? !(c[q >> 2] & 8 | 0) : 0))
                                            yield* Vb(12440, ca);
                                        yield* Zb(12463);
                                        m = r;
                                        g = (c[q >> 2] | c[g >> 2]) & -5;
                                        break;
                                    }
                                case 90: {
                                        g = q + -8 | 0;
                                        if (!((c[g >> 2] & 8 | 0) == 0 ? !(c[q >> 2] & 8 | 0) : 0))
                                            yield* Vb(12465, da);
                                        yield* Zb(12488);
                                        m = r;
                                        g = (c[q >> 2] | c[g >> 2]) & -5;
                                        break;
                                    }
                                case 91: {
                                        if (c[q >> 2] & 8 | 0)
                                            yield* Vb(12490, ea);
                                        yield* Zb(12519);
                                        m = r;
                                        g = c[q >> 2] & -5;
                                        break;
                                    }
                                case 92: {
                                        g = c[q >> 2] | 0;
                                        h = c[5269] | 0;
                                        if ((g | 0) < 0) {
                                            c[fa >> 2] = 0 - g;
                                            (yield* Bd(h, 12521, fa)) | 0;
                                        } else {
                                            c[ha >> 2] = g;
                                            (yield* Bd(h, 12098, ha)) | 0;
                                        }
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = 1;
                                        break;
                                    }
                                case 93: {
                                        g = c[q >> 2] | 0;
                                        c:
                                            do
                                                if ((Rc(g) | 0) == 1)
                                                    switch (a[g >> 0] | 0) {
                                                    case 48: {
                                                            yield* Zb(11916);
                                                            break c;
                                                        }
                                                    case 49: {
                                                            yield* Zb(11583);
                                                            break c;
                                                        }
                                                    default: {
                                                            qb = 206;
                                                            break c;
                                                        }
                                                    }
                                                else
                                                    qb = 206;
                                            while (0);
                                        if ((qb | 0) == 206) {
                                            qb = 0;
                                            yield* Zb(12526);
                                            yield* Zb(c[q >> 2] | 0);
                                            yield* Zb(12528);
                                        }
                                        Vd(c[q >> 2] | 0);
                                        m = r;
                                        g = 1;
                                        break;
                                    }
                                case 94: {
                                        g = q + -4 | 0;
                                        h = c[g >> 2] | 0;
                                        if (h & 8) {
                                            yield* Vb(12530, ia);
                                            h = c[g >> 2] | 0;
                                        }
                                        m = r;
                                        g = h | 5;
                                        break;
                                    }
                                case 95: {
                                        h = (yield* dc(c[q + -12 >> 2] | 0, 2)) | 0;
                                        g = (a[(c[5283] | 0) + (h * 28 | 0) + 1 >> 0] | 0) == 0 ? 1 : 8;
                                        k = q + -4 | 0;
                                        l = c[k >> 2] | 0;
                                        if (!l) {
                                            n = c[5269] | 0;
                                            c[ka >> 2] = h;
                                            (yield* Bd(n, 12569, ka)) | 0;
                                        } else {
                                            m = (yield* Sb(l)) | 0;
                                            yield* Xb((Rc(m) | 0) + 20 | 0);
                                            n = c[5269] | 0;
                                            c[ja >> 2] = h;
                                            c[ja + 4 >> 2] = m;
                                            (yield* Bd(n, 12561, ja)) | 0;
                                            Tb(c[k >> 2] | 0);
                                        }
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        break;
                                    }
                                case 96: {
                                        g = c[q >> 2] | 0;
                                        h = (a[q + -4 >> 0] | 0) == 43;
                                        k = c[5269] | 0;
                                        do
                                            if ((g | 0) < 0) {
                                                g = 0 - g | 0;
                                                if (h) {
                                                    c[la >> 2] = g;
                                                    c[la + 4 >> 2] = g;
                                                    (yield* Bd(k, 12574, la)) | 0;
                                                    break;
                                                } else {
                                                    c[ma >> 2] = g;
                                                    c[ma + 4 >> 2] = g;
                                                    (yield* Bd(k, 12584, ma)) | 0;
                                                    break;
                                                }
                                            } else if (h) {
                                                c[na >> 2] = g;
                                                c[na + 4 >> 2] = g;
                                                (yield* Bd(k, 12594, na)) | 0;
                                                break;
                                            } else {
                                                c[oa >> 2] = g;
                                                c[oa + 4 >> 2] = g;
                                                (yield* Bd(k, 12603, oa)) | 0;
                                                break;
                                            }
                                        while (0);
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = 1;
                                        break;
                                    }
                                case 97: {
                                        k = q + -4 | 0;
                                        g = c[k >> 2] | 0;
                                        h = c[5269] | 0;
                                        do
                                            if ((g | 0) < 0) {
                                                c[pa >> 2] = 0 - g;
                                                (yield* Bd(h, 12612, pa)) | 0;
                                                yield* Zb(c[5269] | 0);
                                                h = c[5269] | 0;
                                                g = 0 - (c[k >> 2] | 0) | 0;
                                                if ((a[q >> 0] | 0) == 43) {
                                                    c[ra >> 2] = g;
                                                    (yield* Bd(h, 12619, ra)) | 0;
                                                    break;
                                                } else {
                                                    c[sa >> 2] = g;
                                                    (yield* Bd(h, 12624, sa)) | 0;
                                                    break;
                                                }
                                            } else {
                                                c[ta >> 2] = g;
                                                (yield* Bd(h, 12098, ta)) | 0;
                                                yield* Zb(c[5269] | 0);
                                                h = c[5269] | 0;
                                                g = c[k >> 2] | 0;
                                                if ((a[q >> 0] | 0) == 43) {
                                                    c[ua >> 2] = g;
                                                    (yield* Bd(h, 12629, ua)) | 0;
                                                    break;
                                                } else {
                                                    c[va >> 2] = g;
                                                    (yield* Bd(h, 12634, va)) | 0;
                                                    break;
                                                }
                                            }
                                        while (0);
                                        yield* Zb(c[5269] | 0);
                                        m = r;
                                        g = 1;
                                        break;
                                    }
                                case 98: {
                                        if (c[q + -4 >> 2] & 8 | 0)
                                            yield* Vb(12639, wa);
                                        yield* Zb(12667);
                                        m = r;
                                        g = 1;
                                        break;
                                    }
                                case 99: {
                                        if (c[q + -4 >> 2] & 8 | 0)
                                            yield* Vb(12670, xa);
                                        yield* Zb(12696);
                                        m = r;
                                        g = 1;
                                        break;
                                    }
                                case 100: {
                                        if (c[q + -4 >> 2] & 8 | 0)
                                            yield* Vb(12699, za);
                                        yield* Zb(12726);
                                        m = r;
                                        g = 1;
                                        break;
                                    }
                                case 101: {
                                        yield* Wb(12729, Aa);
                                        yield* Zb(12743);
                                        m = r;
                                        g = 1;
                                        break;
                                    }
                                case 102: {
                                        yield* Wb(12746, Ba);
                                        yield* Zb(12762);
                                        m = r;
                                        g = 1;
                                        break;
                                    }
                                case 103: {
                                        m = r;
                                        g = (yield* dc(c[q >> 2] | 0, 0)) | 0;
                                        break;
                                    }
                                case 104: {
                                        h = q + -4 | 0;
                                        g = c[h >> 2] | 0;
                                        if (g & 8) {
                                            yield* Vb(12765, Ca);
                                            g = c[h >> 2] | 0;
                                        }
                                        if (g & 2 | 0)
                                            yield* Wb(12794, Da);
                                        m = r;
                                        g = (yield* dc(c[q + -12 >> 2] | 0, 1)) | 0;
                                        break;
                                    }
                                case 105: {
                                        m = r;
                                        g = 0;
                                        break;
                                    }
                                case 106: {
                                        m = r;
                                        g = 1;
                                        break;
                                    }
                                case 107: {
                                        m = r;
                                        g = 2;
                                        break;
                                    }
                                case 108: {
                                        yield* Wb(12818, Fa);
                                        m = r;
                                        g = 3;
                                        break;
                                    }
                                case 109: {
                                        yield* Wb(12835, Ga);
                                        m = r;
                                        g = 4;
                                        break;
                                    }
                                case 110: {
                                        yield* Wb(12849, Ha);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                case 112: {
                                        yield* Wb(12870, Ia);
                                        m = r;
                                        g = n;
                                        break;
                                    }
                                default: {
                                        m = r;
                                        g = n;
                                    }
                                }
                            while (0);
                        k = 0 - o | 0;
                        j = j + (k << 1) | 0;
                        k = q + (k << 2) + 4 | 0;
                        c[k >> 2] = g;
                        g = (d[12892 + p >> 0] | 0) + -53 | 0;
                        r = b[j >> 1] | 0;
                        h = (r << 16 >> 16) + (b[5668 + (g << 1) >> 1] | 0) | 0;
                        if (h >>> 0 < 720 ? (b[2788 + (h << 1) >> 1] | 0) == r << 16 >> 16 : 0) {
                            h = b[4228 + (h << 1) >> 1] | 0;
                            g = k;
                            break;
                        }
                        h = b[5740 + (g << 1) >> 1] | 0;
                        g = k;
                    } else if ((qb | 0) == 259) {
                        qb = 0;
                        d:
                            do
                                switch (r | 0) {
                                case 0: {
                                        c[5249] = (c[5249] | 0) + 1;
                                        yield* Vb(13005, Ja);
                                        g = q;
                                        break;
                                    }
                                case 3: {
                                        g = c[5250] | 0;
                                        if ((g | 0) < 1)
                                            if (!g) {
                                                f = 1;
                                                qb = 273;
                                                break a;
                                            } else {
                                                g = q;
                                                break d;
                                            }
                                        else {
                                            c[5250] = -2;
                                            g = q;
                                            break d;
                                        }
                                    }
                                default:
                                    g = q;
                                }
                            while (0);
                        while (1) {
                            if (((h << 16 >> 16 != -144 ? (u = (h << 16 >> 16) + 1 | 0, h << 16 >> 16 > -2 & (u | 0) < 720) : 0) ? (b[2788 + (u << 1) >> 1] | 0) == 1 : 0) ? (v = b[4228 + (u << 1) >> 1] | 0, v << 16 >> 16 > 0) : 0) {
                                h = u;
                                k = v;
                                break;
                            }
                            if ((j | 0) == (e | 0)) {
                                f = 1;
                                qb = 273;
                                break a;
                            }
                            r = j + -2 | 0;
                            h = b[2392 + (b[r >> 1] << 1) >> 1] | 0;
                            j = r;
                            g = g + -4 | 0;
                        }
                        if ((h | 0) == 188) {
                            f = 0;
                            qb = 273;
                            break a;
                        }
                        g = g + 4 | 0;
                        c[g >> 2] = c[5251];
                        m = 3;
                        h = k << 16 >> 16;
                    }
                while (0);
                r = m;
                j = j + 2 | 0;
                k = s;
                n = h;
                m = t;
            }
        if ((qb | 0) == 50)
            Ea(0);
        else if ((qb | 0) == 272) {
            yield* Vb(13018, pb);
            f = 2;
            qb = 273;
        }
        if ((qb | 0) == 273)
            if ((e | 0) == (rb | 0)) {
                rb = f;
                i = sb;
                return rb | 0;
            } else
                ob = e;
        Vd(ob);
        rb = f;
        i = sb;
        return rb | 0;
    }
    function* _a() {
        var e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0;
        t = i;
        i = i + 48 | 0;
        q = t + 32 | 0;
        p = t + 24 | 0;
        o = t + 16 | 0;
        r = t + 8 | 0;
        n = t;
        if (!(c[5256] | 0)) {
            c[5256] = 1;
            if (!(c[5257] | 0))
                c[5257] = 1;
            e = c[5252] | 0;
            if (!e) {
                e = c[479] | 0;
                c[5252] = e;
            }
            if (!(c[5253] | 0))
                c[5253] = c[449];
            g = c[5258] | 0;
            if (g) {
                h = c[g >> 2] | 0;
                if (!h) {
                    f = c[5259] | 0;
                    if (0 < (f + -1 | 0) >>> 0)
                        s = 13;
                    else {
                        e = f + 8 | 0;
                        s = Wd(g, e << 2) | 0;
                        c[5258] = s;
                        s = s + (c[5259] << 2) | 0;
                        c[s >> 2] = 0;
                        c[s + 4 >> 2] = 0;
                        c[s + 8 >> 2] = 0;
                        c[s + 12 >> 2] = 0;
                        c[s + 16 >> 2] = 0;
                        c[s + 20 >> 2] = 0;
                        c[s + 24 >> 2] = 0;
                        c[s + 28 >> 2] = 0;
                        c[5259] = e;
                        e = c[5252] | 0;
                        s = 13;
                    }
                } else {
                    f = 0;
                    e = h;
                }
            } else {
                s = Ud(4) | 0;
                c[5258] = s;
                c[s >> 2] = 0;
                c[5259] = 1;
                s = 13;
            }
            if ((s | 0) == 13) {
                e = (yield* $a(e, 16384)) | 0;
                g = c[5258] | 0;
                c[g >> 2] = e;
                f = 0;
            }
            c[5260] = c[e + 16 >> 2];
            m = c[e + 8 >> 2] | 0;
            c[5261] = m;
            c[5254] = m;
            c[5252] = c[c[g + (f << 2) >> 2] >> 2];
            a[21810] = a[m >> 0] | 0;
        }
        m = c[508] | 0;
        a:
            while (1) {
                e = c[5261] | 0;
                a[e >> 0] = a[21810] | 0;
                f = e;
                g = c[5257] | 0;
                b:
                    while (1) {
                        h = g;
                        while (1) {
                            g = c[156 + (d[e >> 0] << 2) >> 2] | 0;
                            if (b[5812 + (h << 1) >> 1] | 0) {
                                c[5262] = h;
                                c[5263] = e;
                            }
                            c:
                                while (1) {
                                    j = g & 255;
                                    while (1) {
                                        g = (b[6444 + (h << 1) >> 1] | 0) + j | 0;
                                        if ((b[7084 + (g << 1) >> 1] | 0) == (h | 0))
                                            break c;
                                        l = b[8302 + (h << 1) >> 1] | 0;
                                        g = l << 16 >> 16;
                                        if (l << 16 >> 16 > 315) {
                                            h = g;
                                            break;
                                        } else
                                            h = g;
                                    }
                                    g = c[1180 + (j << 2) >> 2] | 0;
                                }
                            g = b[8942 + (g << 1) >> 1] | 0;
                            e = e + 1 | 0;
                            if ((b[6444 + (g << 1) >> 1] | 0) == 554)
                                break;
                            else
                                h = g;
                        }
                        d:
                            while (1) {
                                l = f;
                                e:
                                    while (1) {
                                        g = b[5812 + (g << 1) >> 1] | 0;
                                        if (!(g << 16 >> 16)) {
                                            g = b[5812 + (c[5262] << 1) >> 1] | 0;
                                            e = c[5263] | 0;
                                        } else
                                            g = g << 16 >> 16;
                                        c[5254] = f;
                                        k = e;
                                        c[5255] = k - l;
                                        a[21810] = a[e >> 0] | 0;
                                        a[e >> 0] = 0;
                                        c[5261] = e;
                                        f:
                                            while (1) {
                                                switch (g | 0) {
                                                case 40:
                                                    continue a;
                                                case 3: {
                                                        s = 35;
                                                        break a;
                                                    }
                                                case 4: {
                                                        s = 142;
                                                        break a;
                                                    }
                                                case 5: {
                                                        s = 143;
                                                        break a;
                                                    }
                                                case 6: {
                                                        s = 144;
                                                        break a;
                                                    }
                                                case 7: {
                                                        s = 145;
                                                        break a;
                                                    }
                                                case 8: {
                                                        s = 146;
                                                        break a;
                                                    }
                                                case 10: {
                                                        s = 36;
                                                        break a;
                                                    }
                                                case 11: {
                                                        s = 37;
                                                        break a;
                                                    }
                                                case 12: {
                                                        s = 38;
                                                        break a;
                                                    }
                                                case 13: {
                                                        s = 39;
                                                        break a;
                                                    }
                                                case 14: {
                                                        s = 40;
                                                        break a;
                                                    }
                                                case 15: {
                                                        s = 41;
                                                        break a;
                                                    }
                                                case 16: {
                                                        s = 42;
                                                        break a;
                                                    }
                                                case 17: {
                                                        s = 43;
                                                        break a;
                                                    }
                                                case 18: {
                                                        s = 44;
                                                        break a;
                                                    }
                                                case 19: {
                                                        s = 45;
                                                        break a;
                                                    }
                                                case 20: {
                                                        s = 46;
                                                        break a;
                                                    }
                                                case 21: {
                                                        s = 47;
                                                        break a;
                                                    }
                                                case 22: {
                                                        s = 48;
                                                        break a;
                                                    }
                                                case 23: {
                                                        s = 49;
                                                        break a;
                                                    }
                                                case 24: {
                                                        s = 50;
                                                        break a;
                                                    }
                                                case 25: {
                                                        s = 51;
                                                        break a;
                                                    }
                                                case 26: {
                                                        s = 52;
                                                        break a;
                                                    }
                                                case 27: {
                                                        s = 53;
                                                        break a;
                                                    }
                                                case 28: {
                                                        s = 54;
                                                        break a;
                                                    }
                                                case 29: {
                                                        s = 55;
                                                        break a;
                                                    }
                                                case 30: {
                                                        s = 56;
                                                        break a;
                                                    }
                                                case 31: {
                                                        s = 57;
                                                        break a;
                                                    }
                                                case 32: {
                                                        s = 58;
                                                        break a;
                                                    }
                                                case 33: {
                                                        s = 59;
                                                        break a;
                                                    }
                                                case 34: {
                                                        s = 60;
                                                        break a;
                                                    }
                                                case 35: {
                                                        s = 61;
                                                        break a;
                                                    }
                                                case 36: {
                                                        s = 62;
                                                        break a;
                                                    }
                                                case 37: {
                                                        s = 63;
                                                        break a;
                                                    }
                                                case 38: {
                                                        s = 64;
                                                        break a;
                                                    }
                                                case 42: {
                                                        s = 71;
                                                        break a;
                                                    }
                                                case 43: {
                                                        s = 72;
                                                        break a;
                                                    }
                                                case 44: {
                                                        s = 78;
                                                        break a;
                                                    }
                                                case 49:
                                                case 48: {
                                                        s = 95;
                                                        break a;
                                                    }
                                                case 9: {
                                                        e = 273;
                                                        s = 147;
                                                        break a;
                                                    }
                                                case 1: {
                                                        s = 31;
                                                        break b;
                                                    }
                                                case 2: {
                                                        s = 34;
                                                        break b;
                                                    }
                                                case 39: {
                                                        s = 65;
                                                        break b;
                                                    }
                                                case 41: {
                                                        s = 66;
                                                        break b;
                                                    }
                                                case 45: {
                                                        s = 89;
                                                        break b;
                                                    }
                                                case 46: {
                                                        s = 94;
                                                        break b;
                                                    }
                                                case 0:
                                                    break f;
                                                case 47:
                                                    break;
                                                default: {
                                                        s = 141;
                                                        break a;
                                                    }
                                                }
                                                j = c[5254] | 0;
                                                a[e >> 0] = a[21810] | 0;
                                                g = c[5258] | 0;
                                                h = c[g >> 2] | 0;
                                                if (!(c[h + 44 >> 2] | 0)) {
                                                    u = c[h + 16 >> 2] | 0;
                                                    c[5260] = u;
                                                    c[h >> 2] = c[5252];
                                                    c[(c[g >> 2] | 0) + 44 >> 2] = 1;
                                                    h = c[c[5258] >> 2] | 0;
                                                    g = u;
                                                } else
                                                    g = c[5260] | 0;
                                                if ((c[5261] | 0) >>> 0 <= ((c[h + 4 >> 2] | 0) + g | 0) >>> 0) {
                                                    f = j;
                                                    e = k;
                                                    break e;
                                                }
                                                switch ((yield* cb()) | 0) {
                                                case 0: {
                                                        f = j;
                                                        e = k;
                                                        break d;
                                                    }
                                                case 2: {
                                                        s = 130;
                                                        break e;
                                                    }
                                                case 1:
                                                    break;
                                                default:
                                                    continue a;
                                                }
                                                if ((yield* Ya()) | 0) {
                                                    s = 118;
                                                    break b;
                                                }
                                                c[5261] = c[5254];
                                                g = (((c[5257] | 0) + -1 | 0) / 2 | 0) + 48 | 0;
                                            }
                                        a[e >> 0] = a[21810] | 0;
                                        e = c[5263] | 0;
                                        g = c[5262] | 0;
                                    }
                                if ((s | 0) == 130) {
                                    s = 0;
                                    e = (c[(c[c[5258] >> 2] | 0) + 4 >> 2] | 0) + (c[5260] | 0) | 0;
                                    c[5261] = e;
                                    g = c[5257] | 0;
                                    f = c[5254] | 0;
                                    if (f >>> 0 < e >>> 0)
                                        k = f;
                                    else
                                        continue;
                                    while (1) {
                                        h = a[k >> 0] | 0;
                                        if (!(h << 24 >> 24))
                                            h = 1;
                                        else
                                            h = c[156 + ((h & 255) << 2) >> 2] | 0;
                                        if (b[5812 + (g << 1) >> 1] | 0) {
                                            c[5262] = g;
                                            c[5263] = k;
                                        }
                                        g:
                                            while (1) {
                                                j = h & 255;
                                                h = g;
                                                while (1) {
                                                    g = (b[6444 + (h << 1) >> 1] | 0) + j | 0;
                                                    if ((b[7084 + (g << 1) >> 1] | 0) == (h | 0))
                                                        break g;
                                                    u = b[8302 + (h << 1) >> 1] | 0;
                                                    g = u << 16 >> 16;
                                                    if (u << 16 >> 16 > 315)
                                                        break;
                                                    else
                                                        h = g;
                                                }
                                                h = c[1180 + (j << 2) >> 2] | 0;
                                            }
                                        h = b[8942 + (g << 1) >> 1] | 0;
                                        g = k + 1 | 0;
                                        if ((g | 0) == (e | 0)) {
                                            g = h;
                                            continue d;
                                        } else {
                                            k = g;
                                            g = h;
                                        }
                                    }
                                }
                                u = e - f | 0;
                                f = c[5254] | 0;
                                e = f + (u + -1) | 0;
                                c[5261] = e;
                                g = c[5257] | 0;
                                l = e;
                                if ((u | 0) > 1) {
                                    k = f;
                                    while (1) {
                                        h = a[k >> 0] | 0;
                                        if (!(h << 24 >> 24))
                                            h = 1;
                                        else
                                            h = c[156 + ((h & 255) << 2) >> 2] | 0;
                                        if (b[5812 + (g << 1) >> 1] | 0) {
                                            c[5262] = g;
                                            c[5263] = k;
                                        }
                                        h:
                                            while (1) {
                                                j = h & 255;
                                                h = g;
                                                while (1) {
                                                    g = (b[6444 + (h << 1) >> 1] | 0) + j | 0;
                                                    if ((b[7084 + (g << 1) >> 1] | 0) == (h | 0))
                                                        break h;
                                                    u = b[8302 + (h << 1) >> 1] | 0;
                                                    g = u << 16 >> 16;
                                                    if (u << 16 >> 16 > 315)
                                                        break;
                                                    else
                                                        h = g;
                                                }
                                                h = c[1180 + (j << 2) >> 2] | 0;
                                            }
                                        g = b[8942 + (g << 1) >> 1] | 0;
                                        k = k + 1 | 0;
                                        if (k >>> 0 >= e >>> 0) {
                                            j = g;
                                            break;
                                        }
                                    }
                                } else
                                    j = g;
                                if (b[5812 + (j << 1) >> 1] | 0) {
                                    c[5262] = j;
                                    c[5263] = l;
                                }
                                g = (b[6444 + (j << 1) >> 1] | 0) + 1 | 0;
                                if ((b[7084 + (g << 1) >> 1] | 0) != (j | 0)) {
                                    h = j;
                                    do {
                                        u = b[8302 + (h << 1) >> 1] | 0;
                                        h = u << 16 >> 16;
                                        g = (b[6444 + (h << 1) >> 1] | 0) + 1 | 0;
                                    } while ((b[7084 + (g << 1) >> 1] | 0) != u << 16 >> 16);
                                }
                                h = b[8942 + (g << 1) >> 1] | 0;
                                if (h << 16 >> 16 == 315 | (g | 0) == 0)
                                    g = j;
                                else {
                                    g = h;
                                    s = 115;
                                    break;
                                }
                            }
                        if ((s | 0) == 115) {
                            s = 0;
                            e = e + 1 | 0;
                            c[5261] = e;
                            g = g << 16 >> 16;
                            continue;
                        }
                        u = e - f | 0;
                        f = c[5254] | 0;
                        e = f + (u + -1) | 0;
                        c[5261] = e;
                        g = c[5257] | 0;
                        if ((u | 0) > 1)
                            k = f;
                        else
                            continue;
                        while (1) {
                            h = a[k >> 0] | 0;
                            if (!(h << 24 >> 24))
                                h = 1;
                            else
                                h = c[156 + ((h & 255) << 2) >> 2] | 0;
                            if (b[5812 + (g << 1) >> 1] | 0) {
                                c[5262] = g;
                                c[5263] = k;
                            }
                            i:
                                while (1) {
                                    j = h & 255;
                                    h = g;
                                    while (1) {
                                        g = (b[6444 + (h << 1) >> 1] | 0) + j | 0;
                                        if ((b[7084 + (g << 1) >> 1] | 0) == (h | 0))
                                            break i;
                                        u = b[8302 + (h << 1) >> 1] | 0;
                                        g = u << 16 >> 16;
                                        if (u << 16 >> 16 > 315)
                                            break;
                                        else
                                            h = g;
                                    }
                                    h = c[1180 + (j << 2) >> 2] | 0;
                                }
                            h = b[8942 + (g << 1) >> 1] | 0;
                            g = k + 1 | 0;
                            if (g >>> 0 < e >>> 0) {
                                k = g;
                                g = h;
                            } else {
                                g = h;
                                continue b;
                            }
                        }
                    }
                if ((s | 0) == 31) {
                    s = 0;
                    if (!(c[5274] | 0)) {
                        c[5257] = 3;
                        continue;
                    } else {
                        yield* Vb(13083, n);
                        continue;
                    }
                } else if ((s | 0) == 34) {
                    s = 0;
                    c[5257] = 1;
                    continue;
                } else if ((s | 0) == 65) {
                    s = 0;
                    c[5301] = (c[5301] | 0) + 1;
                    continue;
                } else if ((s | 0) == 66) {
                    j:
                        while (1) {
                            s = 0;
                            switch ((yield* bb()) | 0) {
                            case -1:
                                break j;
                            case 10: {
                                    c[5301] = (c[5301] | 0) + 1;
                                    s = 66;
                                    continue j;
                                }
                            case 42:
                                break;
                            default: {
                                    s = 66;
                                    continue j;
                                }
                            }
                            k:
                                while (1)
                                    switch ((yield* bb()) | 0) {
                                    case 47:
                                        continue a;
                                    case -1:
                                        break j;
                                    case 42:
                                        break;
                                    case 10:
                                        break k;
                                    default: {
                                            s = 66;
                                            continue j;
                                        }
                                    }
                            c[5301] = (c[5301] | 0) + 1;
                            s = 66;
                        }
                    (yield* Fd(13234, 30, 1, m)) | 0;
                    continue;
                } else if ((s | 0) == 89) {
                    s = 0;
                    e = c[5254] | 0;
                    f = a[e >> 0] | 0;
                    g = f & 255;
                    if ((f & 255) < 32) {
                        c[o >> 2] = g + 64;
                        yield* Vb(13290, o);
                        continue;
                    }
                    if ((f & 255) > 126) {
                        c[p >> 2] = g;
                        yield* Vb(13313, p);
                        continue;
                    } else {
                        c[q >> 2] = e;
                        yield* Vb(13338, q);
                        continue;
                    }
                } else if ((s | 0) == 94) {
                    s = 0;
                    (yield* Fd(c[5254] | 0, c[5255] | 0, 1, c[5253] | 0)) | 0;
                    continue;
                } else if ((s | 0) == 118) {
                    s = 0;
                    if (0)
                        continue;
                    yield* db(c[5252] | 0);
                    continue;
                }
            }
        switch (s | 0) {
        case 35: {
                c[5301] = (c[5301] | 0) + 1;
                c[5257] = 1;
                u = 258;
                i = t;
                return u | 0;
            }
        case 36: {
                u = 274;
                i = t;
                return u | 0;
            }
        case 37: {
                u = 275;
                i = t;
                return u | 0;
            }
        case 38: {
                u = 276;
                i = t;
                return u | 0;
            }
        case 39: {
                u = 278;
                i = t;
                return u | 0;
            }
        case 40: {
                u = 279;
                i = t;
                return u | 0;
            }
        case 41: {
                u = 280;
                i = t;
                return u | 0;
            }
        case 42: {
                u = 281;
                i = t;
                return u | 0;
            }
        case 43: {
                u = 277;
                i = t;
                return u | 0;
            }
        case 44: {
                u = 282;
                i = t;
                return u | 0;
            }
        case 45: {
                u = 283;
                i = t;
                return u | 0;
            }
        case 46: {
                u = 285;
                i = t;
                return u | 0;
            }
        case 47: {
                u = 286;
                i = t;
                return u | 0;
            }
        case 48: {
                u = 292;
                i = t;
                return u | 0;
            }
        case 49: {
                c[5251] = (yield* Mb(c[5254] | 0)) | 0;
                u = 263;
                i = t;
                return u | 0;
            }
        case 50: {
                u = 284;
                i = t;
                return u | 0;
            }
        case 51: {
                u = 287;
                i = t;
                return u | 0;
            }
        case 52: {
                u = 288;
                i = t;
                return u | 0;
            }
        case 53: {
                u = 289;
                i = t;
                return u | 0;
            }
        case 54: {
                u = 286;
                i = t;
                return u | 0;
            }
        case 55: {
                u = c[5254] | 0;
                a[21004] = a[u >> 0] | 0;
                u = d[u >> 0] | 0;
                i = t;
                return u | 0;
            }
        case 56: {
                u = 259;
                i = t;
                return u | 0;
            }
        case 57: {
                u = 260;
                i = t;
                return u | 0;
            }
        case 58: {
                u = 261;
                i = t;
                return u | 0;
            }
        case 59: {
                u = c[5254] | 0;
                a[21004] = a[u >> 0] | 0;
                u = d[u >> 0] | 0;
                i = t;
                return u | 0;
            }
        case 60: {
                a[21004] = a[c[5254] >> 0] | 0;
                u = 265;
                i = t;
                return u | 0;
            }
        case 61: {
                a[21004] = 61;
                a[e >> 0] = a[21810] | 0;
                u = f + 1 | 0;
                c[5261] = u;
                c[5254] = f;
                c[5255] = 1;
                a[21810] = a[u >> 0] | 0;
                a[u >> 0] = 0;
                c[5261] = u;
                u = 265;
                i = t;
                return u | 0;
            }
        case 62: {
                c[5251] = (yield* Mb(c[5254] | 0)) | 0;
                u = 266;
                i = t;
                return u | 0;
            }
        case 63: {
                a[21004] = a[c[5254] >> 0] | 0;
                u = 267;
                i = t;
                return u | 0;
            }
        case 64: {
                c[5301] = (c[5301] | 0) + 1;
                u = 258;
                i = t;
                return u | 0;
            }
        case 71: {
                c[5251] = (yield* Mb(c[5254] | 0)) | 0;
                u = 263;
                i = t;
                return u | 0;
            }
        case 72: {
                c[5251] = (yield* Mb(c[5254] | 0)) | 0;
                e = 0;
                g = c[5254] | 0;
                l:
                    while (1) {
                        f = a[g >> 0] | 0;
                        switch (f << 24 >> 24) {
                        case 0:
                            break l;
                        case 10: {
                                c[5301] = (c[5301] | 0) + 1;
                                f = a[g >> 0] | 0;
                                break;
                            }
                        default: {
                            }
                        }
                        e = (f << 24 >> 24 == 34 & 1) + e | 0;
                        g = g + 1 | 0;
                    }
                if ((e | 0) == 2) {
                    u = 262;
                    i = t;
                    return u | 0;
                }
                yield* Vb(13265, r);
                u = 262;
                i = t;
                return u | 0;
            }
        case 78: {
                e = c[5254] | 0;
                f = e + ((Rc(e) | 0) + -1) | 0;
                if ((a[f >> 0] | 0) == 46) {
                    a[f >> 0] = 0;
                    e = c[5254] | 0;
                }
                g = e;
                m:
                    while (1) {
                        switch (a[g >> 0] | 0) {
                        case 0: {
                                s = 83;
                                break m;
                            }
                        case 48:
                            break;
                        default:
                            break m;
                        }
                        g = g + 1 | 0;
                    }
                if ((s | 0) == 83)
                    g = g + -1 | 0;
                n:
                    while (1) {
                        o:
                            while (1) {
                                f = a[g >> 0] | 0;
                                switch (f << 24 >> 24) {
                                case 0:
                                    break n;
                                case 92:
                                    break;
                                default:
                                    break o;
                                }
                                c[5301] = (c[5301] | 0) + 1;
                                g = g + 2 | 0;
                            }
                        a[e >> 0] = f;
                        e = e + 1 | 0;
                        g = g + 1 | 0;
                    }
                a[e >> 0] = 0;
                c[5251] = (yield* Mb(c[5254] | 0)) | 0;
                u = 264;
                i = t;
                return u | 0;
            }
        case 95: {
                u = 0;
                i = t;
                return u | 0;
            }
        case 141: {
                yield* ab(13360);
                break;
            }
        case 142: {
                u = 268;
                i = t;
                return u | 0;
            }
        case 143: {
                u = 269;
                i = t;
                return u | 0;
            }
        case 144: {
                u = 270;
                i = t;
                return u | 0;
            }
        case 145: {
                u = 271;
                i = t;
                return u | 0;
            }
        case 146: {
                u = 272;
                i = t;
                return u | 0;
            }
        case 147: {
                i = t;
                return e | 0;
            }
        }
        return 0;
    }
    function* $a(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, i = 0;
        i = Ud(48) | 0;
        if (!i)
            yield* ab(13035);
        c[i + 12 >> 2] = d;
        d = Ud(d + 2 | 0) | 0;
        c[i + 4 >> 2] = d;
        if (!d)
            yield* ab(13035);
        c[i + 20 >> 2] = 1;
        h = Jc() | 0;
        g = c[h >> 2] | 0;
        c[i + 16 >> 2] = 0;
        a[d >> 0] = 0;
        a[d + 1 >> 0] = 0;
        c[i + 8 >> 2] = d;
        c[i + 28 >> 2] = 1;
        c[i + 44 >> 2] = 0;
        d = c[5258] | 0;
        e = (d | 0) == 0;
        if (e)
            f = 0;
        else
            f = c[d >> 2] | 0;
        if ((f | 0) == (i | 0)) {
            f = c[d >> 2] | 0;
            c[5260] = c[f + 16 >> 2];
            f = c[f + 8 >> 2] | 0;
            c[5261] = f;
            c[5254] = f;
            c[5252] = c[c[d >> 2] >> 2];
            a[21810] = a[f >> 0] | 0;
        }
        c[i >> 2] = b;
        c[i + 40 >> 2] = 1;
        if (e)
            d = 0;
        else
            d = c[d >> 2] | 0;
        if ((d | 0) != (i | 0)) {
            c[i + 32 >> 2] = 1;
            c[i + 36 >> 2] = 0;
        }
        if (!b) {
            f = 0;
            b = i + 24 | 0;
            c[b >> 2] = f;
            c[h >> 2] = g;
            return i | 0;
        }
        f = (Sd(Pd(b) | 0) | 0) > 0 & 1;
        b = i + 24 | 0;
        c[b >> 2] = f;
        c[h >> 2] = g;
        return i | 0;
    }
    function* ab(a) {
        a = a | 0;
        var b = 0, d = 0;
        b = i;
        i = i + 16 | 0;
        d = c[508] | 0;
        c[b >> 2] = a;
        (yield* Ad(d, 13079, b)) | 0;
        Ea(2);
    }
    function* bb() {
        var b = 0, e = 0, f = 0;
        f = a[21810] | 0;
        b = c[5261] | 0;
        a[b >> 0] = f;
        a:
            do
                if (!(f << 24 >> 24)) {
                    b:
                        while (1) {
                            if (b >>> 0 < ((c[(c[c[5258] >> 2] | 0) + 4 >> 2] | 0) + (c[5260] | 0) | 0) >>> 0) {
                                f = 3;
                                break;
                            }
                            e = c[5254] | 0;
                            c[5261] = b + 1;
                            switch ((yield* cb()) | 0) {
                            case 0: {
                                    f = 11;
                                    break b;
                                }
                            case 2: {
                                    yield* db(c[5252] | 0);
                                    break;
                                }
                            case 1:
                                break;
                            default: {
                                    f = 5;
                                    break b;
                                }
                            }
                            if (!((yield* Ya()) | 0)) {
                                b = -1;
                                f = 13;
                                break;
                            }
                            if (!0)
                                yield* db(c[5252] | 0);
                            f = a[21810] | 0;
                            b = c[5261] | 0;
                            a[b >> 0] = f;
                            if (f << 24 >> 24)
                                break a;
                        }
                    if ((f | 0) == 3) {
                        a[b >> 0] = 0;
                        break;
                    } else if ((f | 0) == 5) {
                        b = c[5261] | 0;
                        break;
                    } else if ((f | 0) == 11) {
                        b = (c[5254] | 0) + (b - e) | 0;
                        c[5261] = b;
                        break;
                    } else if ((f | 0) == 13)
                        return b | 0;
                }
            while (0);
        f = d[b >> 0] | 0;
        a[b >> 0] = 0;
        e = b + 1 | 0;
        c[5261] = e;
        a[21810] = a[e >> 0] | 0;
        return f | 0;
    }
    function* cb() {
        var b = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
        b = c[5258] | 0;
        e = c[b >> 2] | 0;
        g = c[e + 4 >> 2] | 0;
        d = c[5254] | 0;
        n = c[5261] | 0;
        h = n;
        if (n >>> 0 > (g + ((c[5260] | 0) + 1) | 0) >>> 0)
            yield* ab(13104);
        f = h - d | 0;
        if (!(c[e + 40 >> 2] | 0)) {
            n = (f | 0) == 1 ? 1 : 2;
            return n | 0;
        }
        n = f + -1 | 0;
        if ((f | 0) > 1) {
            e = 0;
            while (1) {
                a[g >> 0] = a[d >> 0] | 0;
                e = e + 1 | 0;
                if ((e | 0) >= (n | 0))
                    break;
                else {
                    g = g + 1 | 0;
                    d = d + 1 | 0;
                }
            }
            e = c[b >> 2] | 0;
        }
        do
            if ((c[e + 44 >> 2] | 0) != 2) {
                d = (c[e + 12 >> 2] | 0) - n + -1 | 0;
                a:
                    do
                        if ((d | 0) < 1) {
                            f = h;
                            while (1) {
                                b = (b | 0) == 0 ? 0 : e;
                                d = b + 4 | 0;
                                e = c[d >> 2] | 0;
                                if (!(c[b + 20 >> 2] | 0)) {
                                    i = d;
                                    break;
                                }
                                h = b + 12 | 0;
                                g = c[h >> 2] | 0;
                                b = g << 1;
                                b = (b | 0) < 1 ? (g >>> 3) + g | 0 : b;
                                c[h >> 2] = b;
                                b = Wd(e, b + 2 | 0) | 0;
                                c[d >> 2] = b;
                                if (!b) {
                                    m = 14;
                                    break;
                                }
                                f = b + (f - e) | 0;
                                c[5261] = f;
                                b = c[5258] | 0;
                                e = c[b >> 2] | 0;
                                d = (c[e + 12 >> 2] | 0) - n + -1 | 0;
                                if ((d | 0) >= 1) {
                                    j = d;
                                    break a;
                                }
                            }
                            if ((m | 0) == 14)
                                yield* ab(13160);
                            c[i >> 2] = 0;
                            yield* ab(13160);
                        } else
                            j = d;
                    while (0);
                b = (j | 0) > 8192 ? 8192 : j;
                while (1) {
                    d = Pd(c[5252] | 0) | 0;
                    d = (yield* Rd(d, (c[(c[c[5258] >> 2] | 0) + 4 >> 2] | 0) + n | 0, b)) | 0;
                    c[5260] = d;
                    if ((d | 0) >= 0) {
                        m = 20;
                        break;
                    }
                    if ((c[(Jc() | 0) >> 2] | 0) != 4) {
                        m = 19;
                        break;
                    }
                }
                if ((m | 0) == 19)
                    yield* ab(13204);
                else if ((m | 0) == 20) {
                    b = c[5258] | 0;
                    e = c[b >> 2] | 0;
                    c[e + 16 >> 2] = d;
                    if (!d) {
                        m = 21;
                        break;
                    } else {
                        k = b;
                        l = 0;
                        break;
                    }
                }
            } else {
                c[5260] = 0;
                c[e + 16 >> 2] = 0;
                m = 21;
            }
        while (0);
        do
            if ((m | 0) == 21)
                if (!n) {
                    yield* db(c[5252] | 0);
                    k = c[5258] | 0;
                    l = 1;
                    break;
                } else {
                    c[e + 44 >> 2] = 2;
                    k = b;
                    l = 2;
                    break;
                }
        while (0);
        n = (c[5260] | 0) + n | 0;
        c[5260] = n;
        a[(c[(c[k >> 2] | 0) + 4 >> 2] | 0) + n >> 0] = 0;
        n = c[5258] | 0;
        a[(c[(c[n >> 2] | 0) + 4 >> 2] | 0) + ((c[5260] | 0) + 1) >> 0] = 0;
        c[5254] = c[(c[n >> 2] | 0) + 4 >> 2];
        n = l;
        return n | 0;
    }
    function* db(b) {
        b = b | 0;
        var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0;
        e = c[5258] | 0;
        if (e) {
            d = c[e >> 2] | 0;
            if (!d) {
                d = c[5259] | 0;
                if (0 < (d + -1 | 0) >>> 0)
                    i = 6;
                else {
                    i = d + 8 | 0;
                    h = Wd(e, i << 2) | 0;
                    c[5258] = h;
                    h = h + (c[5259] << 2) | 0;
                    c[h >> 2] = 0;
                    c[h + 4 >> 2] = 0;
                    c[h + 8 >> 2] = 0;
                    c[h + 12 >> 2] = 0;
                    c[h + 16 >> 2] = 0;
                    c[h + 20 >> 2] = 0;
                    c[h + 24 >> 2] = 0;
                    c[h + 28 >> 2] = 0;
                    c[5259] = i;
                    i = 6;
                }
            } else {
                f = 0;
                g = d;
                i = 8;
            }
        } else {
            i = Ud(4) | 0;
            c[5258] = i;
            c[i >> 2] = 0;
            c[5259] = 1;
            i = 6;
        }
        if ((i | 0) == 6) {
            d = (yield* $a(c[5252] | 0, 16384)) | 0;
            e = c[5258] | 0;
            c[e >> 2] = d;
            if (!e) {
                g = Jc() | 0;
                h = 0;
                e = c[g >> 2] | 0;
            } else {
                f = 0;
                g = d;
                i = 8;
            }
        }
        if ((i | 0) == 8) {
            d = e + (f << 2) | 0;
            f = Jc() | 0;
            e = c[f >> 2] | 0;
            if (g) {
                c[g + 16 >> 2] = 0;
                i = g + 4 | 0;
                a[c[i >> 2] >> 0] = 0;
                a[(c[i >> 2] | 0) + 1 >> 0] = 0;
                c[g + 8 >> 2] = c[i >> 2];
                c[g + 28 >> 2] = 1;
                c[g + 44 >> 2] = 0;
                if ((c[d >> 2] | 0) == (g | 0)) {
                    h = c[d >> 2] | 0;
                    c[5260] = c[h + 16 >> 2];
                    h = c[h + 8 >> 2] | 0;
                    c[5261] = h;
                    c[5254] = h;
                    c[5252] = c[c[d >> 2] >> 2];
                    a[21810] = a[h >> 0] | 0;
                    h = g;
                    g = f;
                } else {
                    h = g;
                    g = f;
                }
            } else {
                h = 0;
                g = f;
            }
        }
        c[h >> 2] = b;
        c[h + 40 >> 2] = 1;
        d = c[5258] | 0;
        if (!d)
            f = 0;
        else
            f = c[d >> 2] | 0;
        if ((f | 0) != (h | 0)) {
            c[h + 32 >> 2] = 1;
            c[h + 36 >> 2] = 0;
        }
        if (!b) {
            f = 0;
            i = d;
            b = h + 24 | 0;
            c[b >> 2] = f;
            c[g >> 2] = e;
            b = c[i >> 2] | 0;
            h = b + 16 | 0;
            h = c[h >> 2] | 0;
            c[5260] = h;
            b = b + 8 | 0;
            b = c[b >> 2] | 0;
            c[5261] = b;
            c[5254] = b;
            i = c[i >> 2] | 0;
            i = c[i >> 2] | 0;
            c[5252] = i;
            b = a[b >> 0] | 0;
            a[21810] = b;
            return;
        }
        f = (Sd(Pd(b) | 0) | 0) > 0 & 1;
        i = c[5258] | 0;
        b = h + 24 | 0;
        c[b >> 2] = f;
        c[g >> 2] = e;
        b = c[i >> 2] | 0;
        h = b + 16 | 0;
        h = c[h >> 2] | 0;
        c[5260] = h;
        b = b + 8 | 0;
        b = c[b >> 2] | 0;
        c[5261] = b;
        c[5254] = b;
        i = c[i >> 2] | 0;
        i = c[i >> 2] | 0;
        c[5252] = i;
        b = a[b >> 0] | 0;
        a[21810] = b;
        return;
    }
    function* eb(a) {
        a = a | 0;
        c[5264] = 1;
        return;
    }
    function fb(b) {
        b = b | 0;
        var d = 0, e = 0;
        e = b + 4 | 0;
        d = c[e >> 2] | 0;
        c[e >> 2] = d + 1;
        return a[(c[(c[5283] | 0) + ((c[b >> 2] | 0) * 28 | 0) + 4 >> 2] | 0) + d >> 0] | 0;
    }
    function* gb() {
        var b = 0, e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0;
        x = i;
        i = i + 64 | 0;
        r = x + 48 | 0;
        v = x + 40 | 0;
        u = x + 32 | 0;
        t = x + 24 | 0;
        s = x + 16 | 0;
        q = x + 8 | 0;
        p = x;
        o = x + 52 | 0;
        c[5297] = 0;
        c[5298] = 0;
        a[21817] = 0;
        oc(o);
        if (a[21813] | 0)
            na(2, 2) | 0;
        c[5264] = 0;
        f = c[5298] | 0;
        h = c[5297] | 0;
        g = c[5283] | 0;
        a:
            do
                if ((a[21817] | 0) == 0 ? (f | 0) < (c[g + (h * 28 | 0) + 12 >> 2] | 0) : 0) {
                    n = c[449] | 0;
                    m = f;
                    f = g;
                    b:
                        while (1) {
                            j = m + 1 | 0;
                            c[5298] = j;
                            g = c[f + (h * 28 | 0) + 4 >> 2] | 0;
                            l = a[g + m >> 0] | 0;
                            k = l & 255;
                            c:
                                do
                                    switch (k | 0) {
                                    case 104:
                                        break b;
                                    case 65: {
                                            h = m + 2 | 0;
                                            c[5298] = h;
                                            f = d[g + j >> 0] | 0;
                                            if (f & 128) {
                                                c[5298] = m + 3;
                                                f = d[g + h >> 0] | f << 8 & 32512;
                                            }
                                            yield* Gb(f);
                                            break;
                                        }
                                    case 90:
                                    case 66: {
                                            a[21816] = (sc(c[c[5292] >> 2] | 0) | 0) << 24 >> 24 == 0 & 1;
                                            ub();
                                            h = c[5297] | 0;
                                            f = c[5283] | 0;
                                            j = c[5298] | 0;
                                            g = c[f + (h * 28 | 0) + 4 >> 2] | 0;
                                            w = 11;
                                            break;
                                        }
                                    case 74: {
                                            w = 11;
                                            break;
                                        }
                                    case 67: {
                                            k = m + 2 | 0;
                                            c[5298] = k;
                                            h = d[g + j >> 0] | 0;
                                            if (!(h & 128))
                                                g = h;
                                            else {
                                                c[5298] = m + 3;
                                                g = d[g + k >> 0] | h << 8 & 32512;
                                            }
                                            if (!(a[f + (g * 28 | 0) >> 0] | 0)) {
                                                c[p >> 2] = c[(c[5284] | 0) + (g << 2) >> 2];
                                                yield* fc(13411, p);
                                                break c;
                                            }
                                            yield* Lb(21188, g);
                                            f = c[(c[5283] | 0) + (g * 28 | 0) + 24 >> 2] | 0;
                                            if (f | 0)
                                                do {
                                                    yield* Hb(c[f >> 2] | 0);
                                                    f = c[f + 8 >> 2] | 0;
                                                } while ((f | 0) != 0);
                                            yield* tb(c[5297] | 0);
                                            yield* tb(c[5298] | 0);
                                            yield* tb(c[5294] | 0);
                                            c[5297] = g;
                                            c[5298] = 0;
                                            break;
                                        }
                                    case 68: {
                                            yield* vb(c[c[5292] >> 2] | 0);
                                            break;
                                        }
                                    case 75: {
                                            f = c[((h | 0) == 0 ? 21176 : c[5293] | 0) >> 2] | 0;
                                            if ((f | 0) == 10) {
                                                yield* hb(21188);
                                                break c;
                                            } else {
                                                yield* jb(1, f);
                                                break c;
                                            }
                                        }
                                    case 76: {
                                            h = m + 2 | 0;
                                            c[5298] = h;
                                            f = d[g + j >> 0] | 0;
                                            if (f & 128) {
                                                c[5298] = m + 3;
                                                f = d[g + h >> 0] | f << 8 & 32512;
                                            }
                                            yield* Cb(f);
                                            break;
                                        }
                                    case 77: {
                                            h = m + 2 | 0;
                                            c[5298] = h;
                                            f = d[g + j >> 0] | 0;
                                            if (f & 128) {
                                                c[5298] = m + 3;
                                                f = d[g + h >> 0] | f << 8 & 32512;
                                            }
                                            yield* Eb(f);
                                            break;
                                        }
                                    case 79: {
                                            d:
                                                while (1) {
                                                    f = j + 1 | 0;
                                                    c[5298] = f;
                                                    h = a[g + j >> 0] | 0;
                                                    e:
                                                        do
                                                            switch (h << 24 >> 24) {
                                                            case 34:
                                                                break d;
                                                            case 92: {
                                                                    c[5298] = j + 2;
                                                                    f = a[g + f >> 0] | 0;
                                                                    if (f << 24 >> 24 == 34)
                                                                        break d;
                                                                    switch (f & 255 | 0) {
                                                                    case 97: {
                                                                            yield* ac(7);
                                                                            break e;
                                                                        }
                                                                    case 98: {
                                                                            yield* ac(8);
                                                                            break e;
                                                                        }
                                                                    case 102: {
                                                                            yield* ac(12);
                                                                            break e;
                                                                        }
                                                                    case 110: {
                                                                            yield* ac(10);
                                                                            break e;
                                                                        }
                                                                    case 113: {
                                                                            yield* ac(34);
                                                                            break e;
                                                                        }
                                                                    case 114: {
                                                                            yield* ac(13);
                                                                            break e;
                                                                        }
                                                                    case 116: {
                                                                            yield* ac(9);
                                                                            break e;
                                                                        }
                                                                    case 92: {
                                                                            yield* ac(92);
                                                                            break e;
                                                                        }
                                                                    default:
                                                                        break e;
                                                                    }
                                                                }
                                                            default:
                                                                yield* ac(h & 255);
                                                            }
                                                        while (0);
                                                    j = c[5298] | 0;
                                                    g = c[(c[5283] | 0) + ((c[5297] | 0) * 28 | 0) + 4 >> 2] | 0;
                                                }
                                            (yield* _c(n)) | 0;
                                            break;
                                        }
                                    case 82:
                                        if (!h) {
                                            yield* fc(13436, q);
                                            break c;
                                        } else {
                                            Jb(c[f + (h * 28 | 0) + 24 >> 2] | 0);
                                            Jb(c[(c[5283] | 0) + ((c[5297] | 0) * 28 | 0) + 20 >> 2] | 0);
                                            (yield* sb()) | 0;
                                            c[5298] = (yield* sb()) | 0;
                                            c[5297] = (yield* sb()) | 0;
                                            break c;
                                        }
                                    case 83: {
                                            h = m + 2 | 0;
                                            c[5298] = h;
                                            f = d[g + j >> 0] | 0;
                                            if (f & 128) {
                                                c[5298] = m + 3;
                                                f = d[g + h >> 0] | f << 8 & 32512;
                                            }
                                            yield* Ab(f);
                                            break;
                                        }
                                    case 84: {
                                            m = sc(c[c[5292] >> 2] | 0) | 0;
                                            a[21816] = m;
                                            lc(c[5292] | 0);
                                            if (!(m << 24 >> 24)) {
                                                m = nc(c[5307] | 0) | 0;
                                                c[c[5292] >> 2] = m;
                                                break c;
                                            } else {
                                                m = nc(c[5308] | 0) | 0;
                                                c[c[5292] >> 2] = m;
                                                break c;
                                            }
                                        }
                                    case 80:
                                    case 87: {
                                            yield* Gc(c[c[5292] >> 2] | 0, c[5295] | 0, 3, c[5274] | 0);
                                            if (l << 24 >> 24 == 87)
                                                yield* $b(10);
                                            yield* zb(4);
                                            (yield* _c(n)) | 0;
                                            ub();
                                            break;
                                        }
                                    case 99: {
                                            c[5298] = m + 2;
                                            switch (d[g + j >> 0] | 0) {
                                            case 76: {
                                                    h = c[5292] | 0;
                                                    g = c[h >> 2] | 0;
                                                    j = c[g + 4 >> 2] | 0;
                                                    f = c[g + 8 >> 2] | 0;
                                                    if ((j | 0) == 1)
                                                        if (f) {
                                                            if (!(a[c[g + 24 >> 2] >> 0] | 0)) {
                                                                yield* Fc(h, f);
                                                                break c;
                                                            }
                                                        } else
                                                            f = 0;
                                                    yield* Fc(h, f + j | 0);
                                                    break c;
                                                }
                                            case 83: {
                                                    m = c[5292] | 0;
                                                    yield* Fc(m, c[(c[m >> 2] | 0) + 8 >> 2] | 0);
                                                    break c;
                                                }
                                            case 82: {
                                                    if ((yield* Ec(c[5292] | 0, c[5296] | 0)) | 0)
                                                        break c;
                                                    yield* fc(13462, s);
                                                    break c;
                                                }
                                            case 73: {
                                                    yield* jb(2, c[5294] | 0);
                                                    break c;
                                                }
                                            case 88: {
                                                    yield* vb(c[5307] | 0);
                                                    yield* Fc(c[5292] | 0, Dd() | 0);
                                                    break c;
                                                }
                                            default:
                                                break c;
                                            }
                                        }
                                    case 100: {
                                            h = m + 2 | 0;
                                            c[5298] = h;
                                            f = d[g + j >> 0] | 0;
                                            if (f & 128) {
                                                c[5298] = m + 3;
                                                f = d[g + h >> 0] | f << 8 & 32512;
                                            }
                                            yield* Db(f);
                                            break;
                                        }
                                    case 105: {
                                            h = m + 2 | 0;
                                            c[5298] = h;
                                            f = d[g + j >> 0] | 0;
                                            if (f & 128) {
                                                c[5298] = m + 3;
                                                f = d[g + h >> 0] | f << 8 & 32512;
                                            }
                                            yield* Fb(f);
                                            break;
                                        }
                                    case 108: {
                                            h = m + 2 | 0;
                                            c[5298] = h;
                                            f = d[g + j >> 0] | 0;
                                            if (f & 128) {
                                                c[5298] = m + 3;
                                                f = d[g + h >> 0] | f << 8 & 32512;
                                            }
                                            yield* Bb(f);
                                            break;
                                        }
                                    case 110: {
                                            m = c[5292] | 0;
                                            yield* tc(c[5307] | 0, c[m >> 2] | 0, m, 0);
                                            break;
                                        }
                                    case 112: {
                                            ub();
                                            break;
                                        }
                                    case 115: {
                                            h = m + 2 | 0;
                                            c[5298] = h;
                                            f = d[g + j >> 0] | 0;
                                            if (f & 128) {
                                                c[5298] = m + 3;
                                                f = d[g + h >> 0] | f << 8 & 32512;
                                            }
                                            yield* zb(f);
                                            break;
                                        }
                                    case 119: {
                                            c[5298] = m + 2;
                                            f = a[g + j >> 0] | 0;
                                            if (f << 24 >> 24 != 34)
                                                do {
                                                    yield* ac(f & 255);
                                                    m = c[5298] | 0;
                                                    c[5298] = m + 1;
                                                    f = a[(c[(c[5283] | 0) + ((c[5297] | 0) * 28 | 0) + 4 >> 2] | 0) + m >> 0] | 0;
                                                } while (f << 24 >> 24 != 34);
                                            (yield* _c(n)) | 0;
                                            break;
                                        }
                                    case 120: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                l = c[5292] | 0;
                                                m = c[l >> 2] | 0;
                                                c[l >> 2] = c[c[l + 4 >> 2] >> 2];
                                                c[c[(c[5292] | 0) + 4 >> 2] >> 2] = m;
                                            }
                                            break;
                                        }
                                    case 48: {
                                            yield* vb(c[5307] | 0);
                                            break;
                                        }
                                    case 49: {
                                            yield* vb(c[5308] | 0);
                                            break;
                                        }
                                    case 33: {
                                            m = sc(c[c[5292] >> 2] | 0) | 0;
                                            a[21816] = m;
                                            lc(c[5292] | 0);
                                            if (!(m << 24 >> 24)) {
                                                m = nc(c[5307] | 0) | 0;
                                                c[c[5292] >> 2] = m;
                                                break c;
                                            } else {
                                                m = nc(c[5308] | 0) | 0;
                                                c[c[5292] >> 2] = m;
                                                break c;
                                            }
                                        }
                                    case 38: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                if (!((sc(c[c[(c[5292] | 0) + 4 >> 2] >> 2] | 0) | 0) << 24 >> 24))
                                                    f = (sc(c[c[5292] >> 2] | 0) | 0) << 24 >> 24 == 0;
                                                else
                                                    f = 0;
                                                a[21816] = f & 1;
                                                ub();
                                                m = a[21816] | 0;
                                                lc(c[5292] | 0);
                                                if (!(m << 24 >> 24)) {
                                                    m = nc(c[5307] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                } else {
                                                    m = nc(c[5308] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                }
                                            }
                                            break;
                                        }
                                    case 124: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                if (!((sc(c[c[(c[5292] | 0) + 4 >> 2] >> 2] | 0) | 0) << 24 >> 24))
                                                    f = 1;
                                                else
                                                    f = (sc(c[c[5292] >> 2] | 0) | 0) << 24 >> 24 == 0;
                                                a[21816] = f & 1;
                                                ub();
                                                m = a[21816] | 0;
                                                lc(c[5292] | 0);
                                                if (!(m << 24 >> 24)) {
                                                    m = nc(c[5307] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                } else {
                                                    m = nc(c[5308] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                }
                                            }
                                            break;
                                        }
                                    case 43: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                m = c[5292] | 0;
                                                yield* wc(c[c[m + 4 >> 2] >> 2] | 0, c[m >> 2] | 0, o, 0);
                                                ub();
                                                ub();
                                                yield* wb(c[o >> 2] | 0);
                                                oc(o);
                                            }
                                            break;
                                        }
                                    case 45: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                m = c[5292] | 0;
                                                yield* tc(c[c[m + 4 >> 2] >> 2] | 0, c[m >> 2] | 0, o, 0);
                                                ub();
                                                ub();
                                                yield* wb(c[o >> 2] | 0);
                                                oc(o);
                                            }
                                            break;
                                        }
                                    case 42: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                m = c[5292] | 0;
                                                yield* xc(c[c[m + 4 >> 2] >> 2] | 0, c[m >> 2] | 0, o, c[5296] | 0);
                                                ub();
                                                ub();
                                                yield* wb(c[o >> 2] | 0);
                                                oc(o);
                                            }
                                            break;
                                        }
                                    case 47: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                m = c[5292] | 0;
                                                if (!((yield* zc(c[c[m + 4 >> 2] >> 2] | 0, c[m >> 2] | 0, o, c[5296] | 0)) | 0)) {
                                                    ub();
                                                    ub();
                                                    yield* wb(c[o >> 2] | 0);
                                                    oc(o);
                                                    break c;
                                                } else {
                                                    yield* fc(13495, t);
                                                    break c;
                                                }
                                            }
                                            break;
                                        }
                                    case 37: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24)
                                                if (!((sc(c[c[5292] >> 2] | 0) | 0) << 24 >> 24)) {
                                                    m = c[5292] | 0;
                                                    (yield* Bc(c[c[m + 4 >> 2] >> 2] | 0, c[m >> 2] | 0, o, c[5296] | 0)) | 0;
                                                    ub();
                                                    ub();
                                                    yield* wb(c[o >> 2] | 0);
                                                    oc(o);
                                                    break c;
                                                } else {
                                                    yield* fc(13510, u);
                                                    break c;
                                                }
                                            break;
                                        }
                                    case 94: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                m = c[5292] | 0;
                                                yield* Cc(c[c[m + 4 >> 2] >> 2] | 0, c[m >> 2] | 0, o, c[5296] | 0);
                                                if ((sc(c[c[(c[5292] | 0) + 4 >> 2] >> 2] | 0) | 0) << 24 >> 24 ? (rc(c[c[5292] >> 2] | 0) | 0) << 24 >> 24 : 0)
                                                    yield* fc(13525, v);
                                                ub();
                                                ub();
                                                yield* wb(c[o >> 2] | 0);
                                                oc(o);
                                            }
                                            break;
                                        }
                                    case 61: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                m = c[5292] | 0;
                                                a[21816] = (pc(c[c[m + 4 >> 2] >> 2] | 0, c[m >> 2] | 0) | 0) == 0 & 1;
                                                ub();
                                                m = a[21816] | 0;
                                                lc(c[5292] | 0);
                                                if (!(m << 24 >> 24)) {
                                                    m = nc(c[5307] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                } else {
                                                    m = nc(c[5308] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                }
                                            }
                                            break;
                                        }
                                    case 35: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                m = c[5292] | 0;
                                                a[21816] = (pc(c[c[m + 4 >> 2] >> 2] | 0, c[m >> 2] | 0) | 0) != 0 & 1;
                                                ub();
                                                m = a[21816] | 0;
                                                lc(c[5292] | 0);
                                                if (!(m << 24 >> 24)) {
                                                    m = nc(c[5307] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                } else {
                                                    m = nc(c[5308] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                }
                                            }
                                            break;
                                        }
                                    case 60: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                m = c[5292] | 0;
                                                a[21816] = (pc(c[c[m + 4 >> 2] >> 2] | 0, c[m >> 2] | 0) | 0) == -1 & 1;
                                                ub();
                                                m = a[21816] | 0;
                                                lc(c[5292] | 0);
                                                if (!(m << 24 >> 24)) {
                                                    m = nc(c[5307] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                } else {
                                                    m = nc(c[5308] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                }
                                            }
                                            break;
                                        }
                                    case 123: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                m = c[5292] | 0;
                                                a[21816] = (pc(c[c[m + 4 >> 2] >> 2] | 0, c[m >> 2] | 0) | 0) < 1 & 1;
                                                ub();
                                                m = a[21816] | 0;
                                                lc(c[5292] | 0);
                                                if (!(m << 24 >> 24)) {
                                                    m = nc(c[5307] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                } else {
                                                    m = nc(c[5308] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                }
                                            }
                                            break;
                                        }
                                    case 62: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                m = c[5292] | 0;
                                                a[21816] = (pc(c[c[m + 4 >> 2] >> 2] | 0, c[m >> 2] | 0) | 0) == 1 & 1;
                                                ub();
                                                m = a[21816] | 0;
                                                lc(c[5292] | 0);
                                                if (!(m << 24 >> 24)) {
                                                    m = nc(c[5307] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                } else {
                                                    m = nc(c[5308] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                }
                                            }
                                            break;
                                        }
                                    case 125: {
                                            if (((yield* xb(2)) | 0) << 24 >> 24) {
                                                m = c[5292] | 0;
                                                a[21816] = (pc(c[c[m + 4 >> 2] >> 2] | 0, c[m >> 2] | 0) | 0) >>> 31 & 255 ^ 1;
                                                ub();
                                                m = a[21816] | 0;
                                                lc(c[5292] | 0);
                                                if (!(m << 24 >> 24)) {
                                                    m = nc(c[5307] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                } else {
                                                    m = nc(c[5308] | 0) | 0;
                                                    c[c[5292] >> 2] = m;
                                                    break c;
                                                }
                                            }
                                            break;
                                        }
                                    default: {
                                            c[r >> 2] = k;
                                            yield* fc(13540, r);
                                        }
                                    }
                                while (0);
                            f:
                                do
                                    if ((w | 0) == 11) {
                                        w = 0;
                                        m = j + 1 | 0;
                                        c[5298] = m;
                                        k = a[g + j >> 0] | 0;
                                        c[5298] = j + 2;
                                        g = d[g + m >> 0] << 8 | k & 255;
                                        switch (l << 24 >> 24) {
                                        case 74:
                                            break;
                                        case 66: {
                                                if (!(a[21816] | 0))
                                                    break f;
                                                break;
                                            }
                                        default:
                                            if (l << 24 >> 24 != 90 | (a[21816] | 0) != 0)
                                                break f;
                                        }
                                        g = g >>> 6;
                                        j = k & 63;
                                        f = c[f + (h * 28 | 0) + 16 >> 2] | 0;
                                        if (g)
                                            while (1) {
                                                f = c[f + 256 >> 2] | 0;
                                                if ((g | 0) > 1)
                                                    g = g + -1 | 0;
                                                else
                                                    break;
                                            }
                                        c[5298] = c[f + (j << 2) >> 2];
                                    }
                                while (0);
                            m = c[5298] | 0;
                            g = c[5297] | 0;
                            f = c[5283] | 0;
                            if (!(((a[21817] | 0) == 0 ? (m | 0) < (c[f + (g * 28 | 0) + 12 >> 2] | 0) : 0) & (c[5264] | 0) == 0)) {
                                b = g;
                                e = f;
                                break a;
                            } else
                                h = g;
                        }
                    Ea(0);
                } else {
                    b = h;
                    e = g;
                }
            while (0);
        g:
            do
                if (b | 0)
                    while (1) {
                        Jb(c[e + (b * 28 | 0) + 24 >> 2] | 0);
                        Jb(c[(c[5283] | 0) + ((c[5297] | 0) * 28 | 0) + 20 >> 2] | 0);
                        (yield* sb()) | 0;
                        c[5298] = (yield* sb()) | 0;
                        b = (yield* sb()) | 0;
                        c[5297] = b;
                        if (!b)
                            break g;
                        e = c[5283] | 0;
                    }
            while (0);
        if (c[5292] | 0)
            do
                ub();
            while ((c[5292] | 0) != 0);
        if (!(a[21813] | 0)) {
            i = x;
            return;
        }
        na(2, 1) | 0;
        if (!(c[5264] | 0)) {
            i = x;
            return;
        }
        (yield* Kd(13565)) | 0;
        i = x;
        return;
    }
    function* hb(b) {
        b = b | 0;
        var d = 0, e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0;
        l = i;
        i = i + 16 | 0;
        k = l;
        e = b;
        j = c[(c[5283] | 0) + ((c[e >> 2] | 0) * 28 | 0) + 4 >> 2] | 0;
        d = 0;
        e = c[e + 4 >> 2] | 0;
        a:
            while (1) {
                g = e + 1 | 0;
                switch (a[j + e >> 0] | 0) {
                case 46: {
                        f = d;
                        d = g;
                        h = 4;
                        break a;
                    }
                case 58: {
                        f = d;
                        e = 0;
                        break a;
                    }
                default: {
                    }
                }
                d = d + 1 | 0;
                e = g;
            }
        if ((h | 0) == 4)
            if ((a[j + d >> 0] | 0) == 58)
                e = 0;
            else {
                d = 0;
                e = e + 2 | 0;
                while (1) {
                    d = d + 1 | 0;
                    if ((a[j + e >> 0] | 0) == 58) {
                        e = d;
                        break;
                    } else
                        e = e + 1 | 0;
                }
            }
        g = b + 4 | 0;
        d = c[g >> 2] | 0;
        c[g >> 2] = d + 1;
        d = a[j + d >> 0] | 0;
        b:
            do
                if ((f | 0) == 1 & (e | 0) == 0)
                    switch (d << 24 >> 24) {
                    case 0: {
                            yield* vb(c[5307] | 0);
                            c[g >> 2] = (c[g >> 2] | 0) + 1;
                            i = l;
                            return;
                        }
                    case 1: {
                            yield* vb(c[5308] | 0);
                            c[g >> 2] = (c[g >> 2] | 0) + 1;
                            i = l;
                            return;
                        }
                    default: {
                            if ((d & 255) <= 9)
                                break b;
                            oc(k);
                            yield* Fc(k, d & 255);
                            yield* wb(c[k >> 2] | 0);
                            c[g >> 2] = (c[g >> 2] | 0) + 1;
                            i = l;
                            return;
                        }
                    }
            while (0);
        if (!f) {
            e = (yield* kc(1, e)) | 0;
            c[k >> 2] = e;
            e = c[e + 24 >> 2] | 0;
            a[e >> 0] = 0;
            f = d;
            e = e + 1 | 0;
        } else {
            e = (yield* kc(f, e)) | 0;
            c[k >> 2] = e;
            f = d;
            e = c[e + 24 >> 2] | 0;
        }
        c:
            while (1) {
                d:
                    do
                        switch (f << 24 >> 24) {
                        case 58:
                            break c;
                        case 46: {
                                d = e;
                                break;
                            }
                        default: {
                                d = e + 1 | 0;
                                if ((f & 255) > 9) {
                                    a[e >> 0] = 9;
                                    break d;
                                } else {
                                    a[e >> 0] = f;
                                    break d;
                                }
                            }
                        }
                    while (0);
                f = c[g >> 2] | 0;
                c[g >> 2] = f + 1;
                f = a[(c[(c[5283] | 0) + ((c[b >> 2] | 0) * 28 | 0) + 4 >> 2] | 0) + f >> 0] | 0;
                e = d;
            }
        yield* wb(c[k >> 2] | 0);
        i = l;
        return;
    }
    function* ib() {
        var a = 0;
        a = c[5298] | 0;
        c[5298] = a + 1;
        return d[(c[(c[5283] | 0) + ((c[5297] | 0) * 28 | 0) + 4 >> 2] | 0) + a >> 0] | 0 | 0;
    }
    function* jb(a, b) {
        a = a | 0;
        b = b | 0;
        var d = 0, e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0;
        p = i;
        i = i + 32 | 0;
        l = p + 16 | 0;
        o = p + 12 | 0;
        n = p + 8 | 0;
        m = p + 4 | 0;
        j = p;
        oc(o);
        oc(n);
        oc(m);
        c[l >> 2] = nc(c[5307] | 0) | 0;
        yield* Fc(m, b);
        d = (yield* Ia[a & 3]()) | 0;
        a:
            while (1) {
                switch (d | 0) {
                case 43: {
                        e = 4;
                        break a;
                    }
                case 45: {
                        e = 5;
                        break a;
                    }
                case 32:
                    break;
                default: {
                        k = 0;
                        break a;
                    }
                }
                d = (yield* Ia[a & 3]()) | 0;
            }
        if ((e | 0) == 4) {
            d = (yield* Ia[a & 3]()) | 0;
            k = 0;
        } else if ((e | 0) == 5) {
            d = (yield* Ia[a & 3]()) | 0;
            k = 1;
        }
        if ((d | 0) < 16) {
            e = (yield* Ia[a & 3]()) | 0;
            yield* Fc(l, (d | 0) < (b | 0) | (e | 0) > 15 ? d : b + -1 | 0);
            if ((e | 0) < 16) {
                f = b + -1 | 0;
                d = e;
                do {
                    yield* xc(c[l >> 2] | 0, c[m >> 2] | 0, n, 0);
                    yield* Fc(o, (d | 0) < (b | 0) ? d : f);
                    yield* wc(c[n >> 2] | 0, c[o >> 2] | 0, l, 0);
                    d = (yield* Ia[a & 3]()) | 0;
                } while ((d | 0) < 16);
            } else
                d = e;
        }
        if ((d | 0) == 46) {
            g = (yield* Ia[a & 3]()) | 0;
            h = b + -1 | 0;
            g = (g | 0) < (b | 0) ? g : h;
            lc(n);
            lc(o);
            f = nc(c[5308] | 0) | 0;
            c[j >> 2] = f;
            d = nc(c[5307] | 0) | 0;
            c[n >> 2] = d;
            if ((g | 0) < 16) {
                e = 0;
                do {
                    yield* xc(d, c[m >> 2] | 0, n, 0);
                    yield* Fc(o, g);
                    yield* wc(c[n >> 2] | 0, c[o >> 2] | 0, n, 0);
                    yield* xc(c[j >> 2] | 0, c[m >> 2] | 0, j, 0);
                    e = e + 1 | 0;
                    d = (yield* Ia[a & 3]()) | 0;
                    g = (d | 0) > 15 | (d | 0) < (b | 0) ? d : h;
                    d = c[n >> 2] | 0;
                } while ((g | 0) < 16);
                f = c[j >> 2] | 0;
            } else
                e = 0;
            (yield* zc(d, f, n, e)) | 0;
            yield* wc(c[l >> 2] | 0, c[n >> 2] | 0, l, 0);
        }
        if (!(k << 24 >> 24)) {
            l = c[l >> 2] | 0;
            yield* wb(l);
            lc(o);
            lc(n);
            lc(m);
            i = p;
            return;
        }
        yield* tc(c[5307] | 0, c[l >> 2] | 0, l, 0);
        l = c[l >> 2] | 0;
        yield* wb(l);
        lc(o);
        lc(n);
        lc(m);
        i = p;
        return;
    }
    function* kb() {
        var a = 0, b = 0;
        a = (yield* Od()) | 0;
        if ((a | 0) == 92) {
            a = (yield* Od()) | 0;
            if ((a | 0) == 10) {
                a = (yield* Od()) | 0;
                c[5299] = 0;
            }
        }
        b = a + -48 | 0;
        if (b >>> 0 < 10)
            return b | 0;
        if ((a + -65 | 0) >>> 0 < 6) {
            b = a + -55 | 0;
            return b | 0;
        }
        if ((a + -97 | 0) >>> 0 < 6) {
            b = a + -87 | 0;
            return b | 0;
        }
        switch (a | 0) {
        case 43:
        case 45:
        case 46: {
                b = a;
                return b | 0;
            }
        default: {
            }
        }
        b = (a | 0) < 33 ? 32 : 58;
        return b | 0;
    }
    function lb() {
        rb(0);
        c[5265] = 0;
        c[5266] = 0;
        a[21811] = 0;
        a[21812] = 0;
        return;
    }
    function* mb(b) {
        b = b | 0;
        var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0;
        e = a[b >> 0] | 0;
        if (!((c[5302] | 0) == 0 & e << 24 >> 24 != 0))
            return;
        i = e;
        j = e & 255;
        a:
            while (1) {
                b:
                    do
                        if (!(a[21811] | 0)) {
                            if (a[21812] | 0)
                                switch (i << 24 >> 24) {
                                case 10: {
                                        b = b + 1 | 0;
                                        break b;
                                    }
                                case 58: {
                                        a[21812] = 0;
                                        g = a[b >> 0] | 0;
                                        h = c[5266] | 0;
                                        c[5266] = h + 1;
                                        i = c[5265] | 0;
                                        j = c[5283] | 0;
                                        e = j + (i * 28 | 0) + 8 | 0;
                                        f = c[e >> 2] | 0;
                                        if ((h | 0) < (f | 0))
                                            e = c[j + (i * 28 | 0) + 4 >> 2] | 0;
                                        else {
                                            k = f << 1;
                                            c[e >> 2] = k;
                                            k = (yield* Ob(k)) | 0;
                                            f = j + (i * 28 | 0) + 4 | 0;
                                            de(k | 0, c[f >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                            Vd(c[f >> 2] | 0);
                                            c[f >> 2] = k;
                                            e = k;
                                        }
                                        a[e + h >> 0] = g;
                                        k = j + (i * 28 | 0) + 12 | 0;
                                        c[k >> 2] = (c[k >> 2] | 0) + 1;
                                        b = b + 1 | 0;
                                        break b;
                                    }
                                case 46: {
                                        g = c[5266] | 0;
                                        c[5266] = g + 1;
                                        h = c[5265] | 0;
                                        i = c[5283] | 0;
                                        e = i + (h * 28 | 0) + 8 | 0;
                                        f = c[e >> 2] | 0;
                                        if ((g | 0) < (f | 0))
                                            e = c[i + (h * 28 | 0) + 4 >> 2] | 0;
                                        else {
                                            k = f << 1;
                                            c[e >> 2] = k;
                                            k = (yield* Ob(k)) | 0;
                                            j = i + (h * 28 | 0) + 4 | 0;
                                            de(k | 0, c[j >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                            Vd(c[j >> 2] | 0);
                                            c[j >> 2] = k;
                                            e = k;
                                        }
                                        a[e + g >> 0] = 46;
                                        k = i + (h * 28 | 0) + 12 | 0;
                                        c[k >> 2] = (c[k >> 2] | 0) + 1;
                                        b = b + 1 | 0;
                                        break b;
                                    }
                                default: {
                                        b = b + 1 | 0;
                                        if ((i & 255) > 64) {
                                            g = c[5266] | 0;
                                            c[5266] = g + 1;
                                            h = c[5265] | 0;
                                            i = c[5283] | 0;
                                            e = i + (h * 28 | 0) + 8 | 0;
                                            f = c[e >> 2] | 0;
                                            if ((g | 0) < (f | 0))
                                                e = c[i + (h * 28 | 0) + 4 >> 2] | 0;
                                            else {
                                                k = f << 1;
                                                c[e >> 2] = k;
                                                k = (yield* Ob(k)) | 0;
                                                f = i + (h * 28 | 0) + 4 | 0;
                                                de(k | 0, c[f >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                Vd(c[f >> 2] | 0);
                                                c[f >> 2] = k;
                                                e = k;
                                            }
                                            a[e + g >> 0] = j + 201;
                                            k = i + (h * 28 | 0) + 12 | 0;
                                            c[k >> 2] = (c[k >> 2] | 0) + 1;
                                            break b;
                                        } else {
                                            g = c[5266] | 0;
                                            c[5266] = g + 1;
                                            h = c[5265] | 0;
                                            i = c[5283] | 0;
                                            e = i + (h * 28 | 0) + 8 | 0;
                                            f = c[e >> 2] | 0;
                                            if ((g | 0) < (f | 0))
                                                e = c[i + (h * 28 | 0) + 4 >> 2] | 0;
                                            else {
                                                k = f << 1;
                                                c[e >> 2] = k;
                                                k = (yield* Ob(k)) | 0;
                                                f = i + (h * 28 | 0) + 4 | 0;
                                                de(k | 0, c[f >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                Vd(c[f >> 2] | 0);
                                                c[f >> 2] = k;
                                                e = k;
                                            }
                                            a[e + g >> 0] = j + 208;
                                            k = i + (h * 28 | 0) + 12 | 0;
                                            c[k >> 2] = (c[k >> 2] | 0) + 1;
                                            break b;
                                        }
                                    }
                                }
                            c:
                                do
                                    switch (j | 0) {
                                    case 34: {
                                            a[21811] = 1;
                                            break;
                                        }
                                    case 78: {
                                            f = b + 1 | 0;
                                            e = a[f >> 0] | 0;
                                            if (e << 24 >> 24 == 45) {
                                                b = b + 2 | 0;
                                                e = a[b >> 0] | 0;
                                                g = 1;
                                            } else {
                                                g = 0;
                                                b = f;
                                            }
                                            if (((e & 255) + -48 | 0) >>> 0 < 10) {
                                                f = 0;
                                                do {
                                                    b = b + 1 | 0;
                                                    f = (f * 10 | 0) + -48 + (e & 255) | 0;
                                                    e = a[b >> 0] | 0;
                                                } while (((e & 255) + -48 | 0) >>> 0 < 10);
                                                e = f;
                                            } else
                                                e = 0;
                                            h = g << 24 >> 24 == 0 ? e : 0 - e | 0;
                                            g = h >> 6;
                                            h = (h | 0) % 64 | 0;
                                            f = c[5265] | 0;
                                            e = c[(c[5283] | 0) + (f * 28 | 0) + 16 >> 2] | 0;
                                            if (!e) {
                                                e = (yield* Ob(260)) | 0;
                                                c[(c[5283] | 0) + (f * 28 | 0) + 16 >> 2] = e;
                                                c[(c[(c[5283] | 0) + (f * 28 | 0) + 16 >> 2] | 0) + 256 >> 2] = 0;
                                                e = c[(c[5283] | 0) + (f * 28 | 0) + 16 >> 2] | 0;
                                            }
                                            if ((g | 0) > 0)
                                                while (1) {
                                                    f = e + 256 | 0;
                                                    e = c[f >> 2] | 0;
                                                    if (!e) {
                                                        e = (yield* Ob(260)) | 0;
                                                        c[f >> 2] = e;
                                                        c[e + 256 >> 2] = 0;
                                                        e = c[f >> 2] | 0;
                                                    }
                                                    if ((g | 0) > 1)
                                                        g = g + -1 | 0;
                                                    else
                                                        break;
                                                }
                                            c[e + (h << 2) >> 2] = c[5266];
                                            break;
                                        }
                                    case 90:
                                    case 74:
                                    case 66: {
                                            k = b + 1 | 0;
                                            g = c[5266] | 0;
                                            c[5266] = g + 1;
                                            h = c[5265] | 0;
                                            j = c[5283] | 0;
                                            e = j + (h * 28 | 0) + 8 | 0;
                                            f = c[e >> 2] | 0;
                                            if ((g | 0) < (f | 0))
                                                e = c[j + (h * 28 | 0) + 4 >> 2] | 0;
                                            else {
                                                f = f << 1;
                                                c[e >> 2] = f;
                                                f = (yield* Ob(f)) | 0;
                                                m = j + (h * 28 | 0) + 4 | 0;
                                                de(f | 0, c[m >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                Vd(c[m >> 2] | 0);
                                                c[m >> 2] = f;
                                                e = f;
                                            }
                                            a[e + g >> 0] = i;
                                            e = j + (h * 28 | 0) + 12 | 0;
                                            c[e >> 2] = (c[e >> 2] | 0) + 1;
                                            e = a[k >> 0] | 0;
                                            if (e << 24 >> 24 == 45) {
                                                b = b + 2 | 0;
                                                e = a[b >> 0] | 0;
                                                g = 1;
                                            } else {
                                                g = 0;
                                                b = k;
                                            }
                                            if (((e & 255) + -48 | 0) >>> 0 < 10) {
                                                f = 0;
                                                do {
                                                    b = b + 1 | 0;
                                                    f = (f * 10 | 0) + -48 + (e & 255) | 0;
                                                    e = a[b >> 0] | 0;
                                                } while (((e & 255) + -48 | 0) >>> 0 < 10);
                                                e = f;
                                            } else
                                                e = 0;
                                            g = g << 24 >> 24 == 0 ? e : 0 - e | 0;
                                            if ((g | 0) > 65535) {
                                                l = 52;
                                                break a;
                                            }
                                            if (!(c[5302] | 0)) {
                                                h = c[5266] | 0;
                                                c[5266] = h + 1;
                                                i = c[5265] | 0;
                                                j = c[5283] | 0;
                                                e = j + (i * 28 | 0) + 8 | 0;
                                                f = c[e >> 2] | 0;
                                                if ((h | 0) < (f | 0))
                                                    e = c[j + (i * 28 | 0) + 4 >> 2] | 0;
                                                else {
                                                    m = f << 1;
                                                    c[e >> 2] = m;
                                                    m = (yield* Ob(m)) | 0;
                                                    k = j + (i * 28 | 0) + 4 | 0;
                                                    de(m | 0, c[k >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                    Vd(c[k >> 2] | 0);
                                                    c[k >> 2] = m;
                                                    e = m;
                                                }
                                                a[e + h >> 0] = g;
                                                m = j + (i * 28 | 0) + 12 | 0;
                                                c[m >> 2] = (c[m >> 2] | 0) + 1;
                                                g = g >>> 8;
                                                if (!(c[5302] | 0)) {
                                                    h = c[5266] | 0;
                                                    c[5266] = h + 1;
                                                    i = c[5265] | 0;
                                                    j = c[5283] | 0;
                                                    e = j + (i * 28 | 0) + 8 | 0;
                                                    f = c[e >> 2] | 0;
                                                    if ((h | 0) < (f | 0))
                                                        e = c[j + (i * 28 | 0) + 4 >> 2] | 0;
                                                    else {
                                                        m = f << 1;
                                                        c[e >> 2] = m;
                                                        m = (yield* Ob(m)) | 0;
                                                        k = j + (i * 28 | 0) + 4 | 0;
                                                        de(m | 0, c[k >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                        Vd(c[k >> 2] | 0);
                                                        c[k >> 2] = m;
                                                        e = m;
                                                    }
                                                    a[e + h >> 0] = g;
                                                    m = j + (i * 28 | 0) + 12 | 0;
                                                    c[m >> 2] = (c[m >> 2] | 0) + 1;
                                                }
                                            }
                                            break;
                                        }
                                    case 70: {
                                            f = b + 1 | 0;
                                            e = a[f >> 0] | 0;
                                            if (e << 24 >> 24 == 45) {
                                                b = b + 2 | 0;
                                                e = a[b >> 0] | 0;
                                                g = 1;
                                            } else {
                                                g = 0;
                                                b = f;
                                            }
                                            if (((e & 255) + -48 | 0) >>> 0 < 10) {
                                                f = 0;
                                                do {
                                                    b = b + 1 | 0;
                                                    f = (f * 10 | 0) + -48 + (e & 255) | 0;
                                                    e = a[b >> 0] | 0;
                                                } while (((e & 255) + -48 | 0) >>> 0 < 10);
                                                e = b;
                                                b = f;
                                            } else {
                                                e = b;
                                                b = 0;
                                            }
                                            h = g << 24 >> 24 == 0 ? b : 0 - b | 0;
                                            rb(h);
                                            b = e + 1 | 0;
                                            d:
                                                do
                                                    if ((a[e >> 0] | 0) != 46) {
                                                        f = e;
                                                        e:
                                                            while (1) {
                                                                e = a[b >> 0] | 0;
                                                                switch (e << 24 >> 24) {
                                                                case 46: {
                                                                        b = f;
                                                                        break e;
                                                                    }
                                                                case 42: {
                                                                        e = f + 2 | 0;
                                                                        b = a[e >> 0] | 0;
                                                                        if (b << 24 >> 24 == 45) {
                                                                            e = f + 3 | 0;
                                                                            b = a[e >> 0] | 0;
                                                                            g = 1;
                                                                        } else
                                                                            g = 0;
                                                                        if (((b & 255) + -48 | 0) >>> 0 < 10) {
                                                                            f = 0;
                                                                            do {
                                                                                e = e + 1 | 0;
                                                                                f = (f * 10 | 0) + -48 + (b & 255) | 0;
                                                                                b = a[e >> 0] | 0;
                                                                            } while (((b & 255) + -48 | 0) >>> 0 < 10);
                                                                            b = f;
                                                                        } else
                                                                            b = 0;
                                                                        m = (yield* Pb(c[(c[5283] | 0) + (h * 28 | 0) + 20 >> 2] | 0, g << 24 >> 24 == 0 ? b : 0 - b | 0, 1)) | 0;
                                                                        c[(c[5283] | 0) + (h * 28 | 0) + 20 >> 2] = m;
                                                                        break;
                                                                    }
                                                                case 45: {
                                                                        b = f + 2 | 0;
                                                                        e = a[b >> 0] | 0;
                                                                        g = 1;
                                                                        l = 75;
                                                                        break;
                                                                    }
                                                                default: {
                                                                        g = 0;
                                                                        l = 75;
                                                                    }
                                                                }
                                                                if ((l | 0) == 75) {
                                                                    l = 0;
                                                                    if (((e & 255) + -48 | 0) >>> 0 < 10) {
                                                                        f = 0;
                                                                        do {
                                                                            b = b + 1 | 0;
                                                                            f = (f * 10 | 0) + -48 + (e & 255) | 0;
                                                                            e = a[b >> 0] | 0;
                                                                        } while (((e & 255) + -48 | 0) >>> 0 < 10);
                                                                        e = f;
                                                                    } else
                                                                        e = 0;
                                                                    e = (yield* Pb(c[(c[5283] | 0) + (h * 28 | 0) + 20 >> 2] | 0, g << 24 >> 24 == 0 ? e : 0 - e | 0, 0)) | 0;
                                                                    c[(c[5283] | 0) + (h * 28 | 0) + 20 >> 2] = e;
                                                                    e = b;
                                                                }
                                                                b = e + 1 | 0;
                                                                if ((a[e >> 0] | 0) == 46)
                                                                    break d;
                                                                else
                                                                    f = e;
                                                            }
                                                        b = b + 2 | 0;
                                                    }
                                                while (0);
                                            f:
                                                while (1) {
                                                    e = a[b >> 0] | 0;
                                                    switch (e << 24 >> 24) {
                                                    case 91:
                                                        break f;
                                                    case 44: {
                                                            b = b + 1 | 0;
                                                            e = a[b >> 0] | 0;
                                                            break;
                                                        }
                                                    default: {
                                                        }
                                                    }
                                                    if (e << 24 >> 24 == 45) {
                                                        b = b + 1 | 0;
                                                        e = a[b >> 0] | 0;
                                                        g = 1;
                                                    } else
                                                        g = 0;
                                                    if (((e & 255) + -48 | 0) >>> 0 < 10) {
                                                        f = 0;
                                                        do {
                                                            b = b + 1 | 0;
                                                            f = (f * 10 | 0) + -48 + (e & 255) | 0;
                                                            e = a[b >> 0] | 0;
                                                        } while (((e & 255) + -48 | 0) >>> 0 < 10);
                                                        e = f;
                                                    } else
                                                        e = 0;
                                                    m = (yield* Pb(c[(c[5283] | 0) + (h * 28 | 0) + 24 >> 2] | 0, g << 24 >> 24 == 0 ? e : 0 - e | 0, 0)) | 0;
                                                    c[(c[5283] | 0) + (h * 28 | 0) + 24 >> 2] = m;
                                                }
                                            j = 21060;
                                            k = c[j + 4 >> 2] | 0;
                                            m = 20984;
                                            c[m >> 2] = c[j >> 2];
                                            c[m + 4 >> 2] = k;
                                            c[5265] = h;
                                            c[5266] = 0;
                                            break;
                                        }
                                    case 93: {
                                            a[(c[5283] | 0) + ((c[5265] | 0) * 28 | 0) >> 0] = 1;
                                            j = 20984;
                                            k = c[j + 4 >> 2] | 0;
                                            m = 21060;
                                            c[m >> 2] = c[j >> 2];
                                            c[m + 4 >> 2] = k;
                                            break;
                                        }
                                    case 67: {
                                            k = b + 1 | 0;
                                            g = c[5266] | 0;
                                            c[5266] = g + 1;
                                            h = c[5265] | 0;
                                            j = c[5283] | 0;
                                            e = j + (h * 28 | 0) + 8 | 0;
                                            f = c[e >> 2] | 0;
                                            if ((g | 0) < (f | 0))
                                                e = c[j + (h * 28 | 0) + 4 >> 2] | 0;
                                            else {
                                                m = f << 1;
                                                c[e >> 2] = m;
                                                m = (yield* Ob(m)) | 0;
                                                f = j + (h * 28 | 0) + 4 | 0;
                                                de(m | 0, c[f >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                Vd(c[f >> 2] | 0);
                                                c[f >> 2] = m;
                                                e = m;
                                            }
                                            a[e + g >> 0] = i;
                                            e = j + (h * 28 | 0) + 12 | 0;
                                            c[e >> 2] = (c[e >> 2] | 0) + 1;
                                            e = a[k >> 0] | 0;
                                            if (e << 24 >> 24 == 45) {
                                                b = b + 2 | 0;
                                                e = a[b >> 0] | 0;
                                                g = 1;
                                            } else {
                                                g = 0;
                                                b = k;
                                            }
                                            if (((e & 255) + -48 | 0) >>> 0 < 10) {
                                                f = 0;
                                                do {
                                                    b = b + 1 | 0;
                                                    f = (f * 10 | 0) + -48 + (e & 255) | 0;
                                                    e = a[b >> 0] | 0;
                                                } while (((e & 255) + -48 | 0) >>> 0 < 10);
                                                e = f;
                                            } else
                                                e = 0;
                                            k = g << 24 >> 24 == 0 ? e : 0 - e | 0;
                                            if ((k | 0) < 128) {
                                                if (!(c[5302] | 0)) {
                                                    g = c[5266] | 0;
                                                    c[5266] = g + 1;
                                                    h = c[5265] | 0;
                                                    i = c[5283] | 0;
                                                    e = i + (h * 28 | 0) + 8 | 0;
                                                    f = c[e >> 2] | 0;
                                                    if ((g | 0) < (f | 0))
                                                        e = c[i + (h * 28 | 0) + 4 >> 2] | 0;
                                                    else {
                                                        m = f << 1;
                                                        c[e >> 2] = m;
                                                        m = (yield* Ob(m)) | 0;
                                                        j = i + (h * 28 | 0) + 4 | 0;
                                                        de(m | 0, c[j >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                        Vd(c[j >> 2] | 0);
                                                        c[j >> 2] = m;
                                                        e = m;
                                                    }
                                                    a[e + g >> 0] = k;
                                                    m = i + (h * 28 | 0) + 12 | 0;
                                                    c[m >> 2] = (c[m >> 2] | 0) + 1;
                                                }
                                            } else {
                                                g = k >>> 8 | 128;
                                                if (!(c[5302] | 0)) {
                                                    h = c[5266] | 0;
                                                    c[5266] = h + 1;
                                                    i = c[5265] | 0;
                                                    j = c[5283] | 0;
                                                    e = j + (i * 28 | 0) + 8 | 0;
                                                    f = c[e >> 2] | 0;
                                                    if ((h | 0) < (f | 0))
                                                        e = c[j + (i * 28 | 0) + 4 >> 2] | 0;
                                                    else {
                                                        m = f << 1;
                                                        c[e >> 2] = m;
                                                        m = (yield* Ob(m)) | 0;
                                                        f = j + (i * 28 | 0) + 4 | 0;
                                                        de(m | 0, c[f >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                        Vd(c[f >> 2] | 0);
                                                        c[f >> 2] = m;
                                                        e = m;
                                                    }
                                                    a[e + h >> 0] = g;
                                                    m = j + (i * 28 | 0) + 12 | 0;
                                                    c[m >> 2] = (c[m >> 2] | 0) + 1;
                                                    if (!(c[5302] | 0)) {
                                                        g = c[5266] | 0;
                                                        c[5266] = g + 1;
                                                        h = c[5265] | 0;
                                                        i = c[5283] | 0;
                                                        e = i + (h * 28 | 0) + 8 | 0;
                                                        f = c[e >> 2] | 0;
                                                        if ((g | 0) < (f | 0))
                                                            e = c[i + (h * 28 | 0) + 4 >> 2] | 0;
                                                        else {
                                                            m = f << 1;
                                                            c[e >> 2] = m;
                                                            m = (yield* Ob(m)) | 0;
                                                            j = i + (h * 28 | 0) + 4 | 0;
                                                            de(m | 0, c[j >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                            Vd(c[j >> 2] | 0);
                                                            c[j >> 2] = m;
                                                            e = m;
                                                        }
                                                        a[e + g >> 0] = k;
                                                        m = i + (h * 28 | 0) + 12 | 0;
                                                        c[m >> 2] = (c[m >> 2] | 0) + 1;
                                                    }
                                                }
                                            }
                                            b = (a[b >> 0] | 0) == 44 ? b + 1 | 0 : b;
                                            e = a[b >> 0] | 0;
                                            if (e << 24 >> 24 != 58)
                                                do {
                                                    b = b + 1 | 0;
                                                    if (!(c[5302] | 0)) {
                                                        h = c[5266] | 0;
                                                        c[5266] = h + 1;
                                                        i = c[5265] | 0;
                                                        j = c[5283] | 0;
                                                        f = j + (i * 28 | 0) + 8 | 0;
                                                        g = c[f >> 2] | 0;
                                                        if ((h | 0) < (g | 0))
                                                            f = c[j + (i * 28 | 0) + 4 >> 2] | 0;
                                                        else {
                                                            m = g << 1;
                                                            c[f >> 2] = m;
                                                            m = (yield* Ob(m)) | 0;
                                                            k = j + (i * 28 | 0) + 4 | 0;
                                                            de(m | 0, c[k >> 2] | 0, (c[f >> 2] | 0) / 2 | 0 | 0) | 0;
                                                            Vd(c[k >> 2] | 0);
                                                            c[k >> 2] = m;
                                                            f = m;
                                                        }
                                                        a[f + h >> 0] = e;
                                                        m = j + (i * 28 | 0) + 12 | 0;
                                                        c[m >> 2] = (c[m >> 2] | 0) + 1;
                                                    }
                                                    e = a[b >> 0] | 0;
                                                } while (e << 24 >> 24 != 58);
                                            if (!(c[5302] | 0)) {
                                                g = c[5266] | 0;
                                                c[5266] = g + 1;
                                                h = c[5265] | 0;
                                                i = c[5283] | 0;
                                                e = i + (h * 28 | 0) + 8 | 0;
                                                f = c[e >> 2] | 0;
                                                if ((g | 0) < (f | 0))
                                                    e = c[i + (h * 28 | 0) + 4 >> 2] | 0;
                                                else {
                                                    m = f << 1;
                                                    c[e >> 2] = m;
                                                    m = (yield* Ob(m)) | 0;
                                                    k = i + (h * 28 | 0) + 4 | 0;
                                                    de(m | 0, c[k >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                    Vd(c[k >> 2] | 0);
                                                    c[k >> 2] = m;
                                                    e = m;
                                                }
                                                a[e + g >> 0] = 58;
                                                m = i + (h * 28 | 0) + 12 | 0;
                                                c[m >> 2] = (c[m >> 2] | 0) + 1;
                                            }
                                            break;
                                        }
                                    case 99: {
                                            b = b + 1 | 0;
                                            g = c[5266] | 0;
                                            c[5266] = g + 1;
                                            h = c[5265] | 0;
                                            j = c[5283] | 0;
                                            e = j + (h * 28 | 0) + 8 | 0;
                                            f = c[e >> 2] | 0;
                                            if ((g | 0) < (f | 0))
                                                e = c[j + (h * 28 | 0) + 4 >> 2] | 0;
                                            else {
                                                m = f << 1;
                                                c[e >> 2] = m;
                                                m = (yield* Ob(m)) | 0;
                                                k = j + (h * 28 | 0) + 4 | 0;
                                                de(m | 0, c[k >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                Vd(c[k >> 2] | 0);
                                                c[k >> 2] = m;
                                                e = m;
                                            }
                                            a[e + g >> 0] = i;
                                            g = j + (h * 28 | 0) + 12 | 0;
                                            c[g >> 2] = (c[g >> 2] | 0) + 1;
                                            g = a[b >> 0] | 0;
                                            if (!(c[5302] | 0)) {
                                                h = c[5266] | 0;
                                                c[5266] = h + 1;
                                                i = c[5265] | 0;
                                                j = c[5283] | 0;
                                                e = j + (i * 28 | 0) + 8 | 0;
                                                f = c[e >> 2] | 0;
                                                if ((h | 0) < (f | 0))
                                                    e = c[j + (i * 28 | 0) + 4 >> 2] | 0;
                                                else {
                                                    m = f << 1;
                                                    c[e >> 2] = m;
                                                    m = (yield* Ob(m)) | 0;
                                                    k = j + (i * 28 | 0) + 4 | 0;
                                                    de(m | 0, c[k >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                    Vd(c[k >> 2] | 0);
                                                    c[k >> 2] = m;
                                                    e = m;
                                                }
                                                a[e + h >> 0] = g;
                                                m = j + (i * 28 | 0) + 12 | 0;
                                                c[m >> 2] = (c[m >> 2] | 0) + 1;
                                            }
                                            break;
                                        }
                                    case 75: {
                                            g = c[5266] | 0;
                                            c[5266] = g + 1;
                                            h = c[5265] | 0;
                                            j = c[5283] | 0;
                                            e = j + (h * 28 | 0) + 8 | 0;
                                            f = c[e >> 2] | 0;
                                            if ((g | 0) < (f | 0))
                                                e = c[j + (h * 28 | 0) + 4 >> 2] | 0;
                                            else {
                                                m = f << 1;
                                                c[e >> 2] = m;
                                                m = (yield* Ob(m)) | 0;
                                                k = j + (h * 28 | 0) + 4 | 0;
                                                de(m | 0, c[k >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                Vd(c[k >> 2] | 0);
                                                c[k >> 2] = m;
                                                e = m;
                                            }
                                            a[e + g >> 0] = i;
                                            m = j + (h * 28 | 0) + 12 | 0;
                                            c[m >> 2] = (c[m >> 2] | 0) + 1;
                                            a[21812] = 1;
                                            break;
                                        }
                                    case 83:
                                    case 76:
                                    case 77:
                                    case 65:
                                    case 115:
                                    case 108:
                                    case 105:
                                    case 100: {
                                            k = b + 1 | 0;
                                            g = c[5266] | 0;
                                            c[5266] = g + 1;
                                            h = c[5265] | 0;
                                            j = c[5283] | 0;
                                            e = j + (h * 28 | 0) + 8 | 0;
                                            f = c[e >> 2] | 0;
                                            if ((g | 0) < (f | 0))
                                                e = c[j + (h * 28 | 0) + 4 >> 2] | 0;
                                            else {
                                                m = f << 1;
                                                c[e >> 2] = m;
                                                m = (yield* Ob(m)) | 0;
                                                f = j + (h * 28 | 0) + 4 | 0;
                                                de(m | 0, c[f >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                Vd(c[f >> 2] | 0);
                                                c[f >> 2] = m;
                                                e = m;
                                            }
                                            a[e + g >> 0] = i;
                                            e = j + (h * 28 | 0) + 12 | 0;
                                            c[e >> 2] = (c[e >> 2] | 0) + 1;
                                            e = a[k >> 0] | 0;
                                            if (e << 24 >> 24 == 45) {
                                                b = b + 2 | 0;
                                                e = a[b >> 0] | 0;
                                                g = 1;
                                            } else {
                                                g = 0;
                                                b = k;
                                            }
                                            if (((e & 255) + -48 | 0) >>> 0 < 10) {
                                                f = 0;
                                                do {
                                                    b = b + 1 | 0;
                                                    f = (f * 10 | 0) + -48 + (e & 255) | 0;
                                                    e = a[b >> 0] | 0;
                                                } while (((e & 255) + -48 | 0) >>> 0 < 10);
                                                e = f;
                                            } else
                                                e = 0;
                                            k = g << 24 >> 24 == 0 ? e : 0 - e | 0;
                                            if ((k | 0) < 128) {
                                                if (c[5302] | 0)
                                                    break c;
                                                g = c[5266] | 0;
                                                c[5266] = g + 1;
                                                h = c[5265] | 0;
                                                i = c[5283] | 0;
                                                e = i + (h * 28 | 0) + 8 | 0;
                                                f = c[e >> 2] | 0;
                                                if ((g | 0) < (f | 0))
                                                    e = c[i + (h * 28 | 0) + 4 >> 2] | 0;
                                                else {
                                                    m = f << 1;
                                                    c[e >> 2] = m;
                                                    m = (yield* Ob(m)) | 0;
                                                    j = i + (h * 28 | 0) + 4 | 0;
                                                    de(m | 0, c[j >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                    Vd(c[j >> 2] | 0);
                                                    c[j >> 2] = m;
                                                    e = m;
                                                }
                                                a[e + g >> 0] = k;
                                                m = i + (h * 28 | 0) + 12 | 0;
                                                c[m >> 2] = (c[m >> 2] | 0) + 1;
                                                break c;
                                            }
                                            g = k >>> 8 | 128;
                                            if (!(c[5302] | 0)) {
                                                h = c[5266] | 0;
                                                c[5266] = h + 1;
                                                i = c[5265] | 0;
                                                j = c[5283] | 0;
                                                e = j + (i * 28 | 0) + 8 | 0;
                                                f = c[e >> 2] | 0;
                                                if ((h | 0) < (f | 0))
                                                    e = c[j + (i * 28 | 0) + 4 >> 2] | 0;
                                                else {
                                                    m = f << 1;
                                                    c[e >> 2] = m;
                                                    m = (yield* Ob(m)) | 0;
                                                    f = j + (i * 28 | 0) + 4 | 0;
                                                    de(m | 0, c[f >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                    Vd(c[f >> 2] | 0);
                                                    c[f >> 2] = m;
                                                    e = m;
                                                }
                                                a[e + h >> 0] = g;
                                                m = j + (i * 28 | 0) + 12 | 0;
                                                c[m >> 2] = (c[m >> 2] | 0) + 1;
                                                if (!(c[5302] | 0)) {
                                                    g = c[5266] | 0;
                                                    c[5266] = g + 1;
                                                    h = c[5265] | 0;
                                                    i = c[5283] | 0;
                                                    e = i + (h * 28 | 0) + 8 | 0;
                                                    f = c[e >> 2] | 0;
                                                    if ((g | 0) < (f | 0))
                                                        e = c[i + (h * 28 | 0) + 4 >> 2] | 0;
                                                    else {
                                                        m = f << 1;
                                                        c[e >> 2] = m;
                                                        m = (yield* Ob(m)) | 0;
                                                        j = i + (h * 28 | 0) + 4 | 0;
                                                        de(m | 0, c[j >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                        Vd(c[j >> 2] | 0);
                                                        c[j >> 2] = m;
                                                        e = m;
                                                    }
                                                    a[e + g >> 0] = k;
                                                    m = i + (h * 28 | 0) + 12 | 0;
                                                    c[m >> 2] = (c[m >> 2] | 0) + 1;
                                                }
                                            }
                                            break;
                                        }
                                    case 64: {
                                            b = b + 1 | 0;
                                            switch (d[b >> 0] | 0) {
                                            case 105: {
                                                    rb(0);
                                                    c[5265] = 0;
                                                    c[5266] = 0;
                                                    a[21811] = 0;
                                                    a[21812] = 0;
                                                    break c;
                                                }
                                            case 114: {
                                                    yield* gb();
                                                    break c;
                                                }
                                            default:
                                                break c;
                                            }
                                        }
                                    case 10:
                                        break;
                                    default: {
                                            g = c[5266] | 0;
                                            c[5266] = g + 1;
                                            h = c[5265] | 0;
                                            j = c[5283] | 0;
                                            e = j + (h * 28 | 0) + 8 | 0;
                                            f = c[e >> 2] | 0;
                                            if ((g | 0) < (f | 0))
                                                e = c[j + (h * 28 | 0) + 4 >> 2] | 0;
                                            else {
                                                m = f << 1;
                                                c[e >> 2] = m;
                                                m = (yield* Ob(m)) | 0;
                                                k = j + (h * 28 | 0) + 4 | 0;
                                                de(m | 0, c[k >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                                Vd(c[k >> 2] | 0);
                                                c[k >> 2] = m;
                                                e = m;
                                            }
                                            a[e + g >> 0] = i;
                                            m = j + (h * 28 | 0) + 12 | 0;
                                            c[m >> 2] = (c[m >> 2] | 0) + 1;
                                        }
                                    }
                                while (0);
                            b = b + 1 | 0;
                        } else {
                            if (i << 24 >> 24 == 34) {
                                a[21811] = 0;
                                i = a[b >> 0] | 0;
                            }
                            j = c[5266] | 0;
                            c[5266] = j + 1;
                            g = c[5265] | 0;
                            h = c[5283] | 0;
                            e = h + (g * 28 | 0) + 8 | 0;
                            f = c[e >> 2] | 0;
                            if ((j | 0) < (f | 0))
                                e = c[h + (g * 28 | 0) + 4 >> 2] | 0;
                            else {
                                m = f << 1;
                                c[e >> 2] = m;
                                m = (yield* Ob(m)) | 0;
                                k = h + (g * 28 | 0) + 4 | 0;
                                de(m | 0, c[k >> 2] | 0, (c[e >> 2] | 0) / 2 | 0 | 0) | 0;
                                Vd(c[k >> 2] | 0);
                                c[k >> 2] = m;
                                e = m;
                            }
                            a[e + j >> 0] = i;
                            m = h + (g * 28 | 0) + 12 | 0;
                            c[m >> 2] = (c[m >> 2] | 0) + 1;
                            b = b + 1 | 0;
                        }
                    while (0);
                e = a[b >> 0] | 0;
                if ((c[5302] | 0) == 0 & e << 24 >> 24 != 0) {
                    i = e;
                    j = e & 255;
                } else {
                    l = 164;
                    break;
                }
            }
        if ((l | 0) == 52) {
            (yield* Fd(13589, 17, 1, c[508] | 0)) | 0;
            Ea(1);
        } else if ((l | 0) == 164)
            return;
    }
    function* nb() {
        c[5285] = 0;
        yield* ob();
        c[c[5284] >> 2] = 13607;
        c[5288] = 0;
        yield* pb();
        c[5291] = 0;
        yield* qb();
        c[5292] = 0;
        c[5293] = 0;
        c[5294] = 10;
        c[5295] = 10;
        c[5296] = 0;
        a[21816] = 0;
        yield* mc();
        return;
    }
    function* ob() {
        var b = 0, d = 0, e = 0, f = 0, g = 0, h = 0;
        d = c[5285] | 0;
        e = c[5283] | 0;
        f = c[5284] | 0;
        b = d + 32 | 0;
        c[5285] = b;
        c[5283] = (yield* Ob(b * 28 | 0)) | 0;
        c[5284] = (yield* Ob(c[5285] << 2)) | 0;
        if ((d | 0) > 0) {
            b = 0;
            do {
                g = (c[5283] | 0) + (b * 28 | 0) | 0;
                h = e + (b * 28 | 0) | 0;
                c[g >> 2] = c[h >> 2];
                c[g + 4 >> 2] = c[h + 4 >> 2];
                c[g + 8 >> 2] = c[h + 8 >> 2];
                c[g + 12 >> 2] = c[h + 12 >> 2];
                c[g + 16 >> 2] = c[h + 16 >> 2];
                c[g + 20 >> 2] = c[h + 20 >> 2];
                c[g + 24 >> 2] = c[h + 24 >> 2];
                c[(c[5284] | 0) + (b << 2) >> 2] = c[f + (b << 2) >> 2];
                b = b + 1 | 0;
            } while ((b | 0) != (d | 0));
            b = d;
        } else
            b = 0;
        if ((b | 0) < (c[5285] | 0))
            do {
                h = c[5283] | 0;
                a[h + (b * 28 | 0) >> 0] = 0;
                c[h + (b * 28 | 0) + 4 >> 2] = (yield* Ob(1024)) | 0;
                c[h + (b * 28 | 0) + 8 >> 2] = 1024;
                h = h + (b * 28 | 0) + 12 | 0;
                b = b + 1 | 0;
                c[h >> 2] = 0;
                c[h + 4 >> 2] = 0;
                c[h + 8 >> 2] = 0;
                c[h + 12 >> 2] = 0;
            } while ((b | 0) < (c[5285] | 0));
        if (!d)
            return;
        Vd(e);
        Vd(f);
        return;
    }
    function* pb() {
        var a = 0, b = 0, d = 0, e = 0, f = 0;
        d = c[5288] | 0;
        e = c[5286] | 0;
        f = c[5287] | 0;
        b = d + 32 | 0;
        c[5288] = b;
        c[5286] = (yield* Ob(b << 2)) | 0;
        c[5287] = (yield* Ob(c[5288] << 2)) | 0;
        if ((d | 0) > 3) {
            a = 3;
            do {
                c[(c[5286] | 0) + (a << 2) >> 2] = c[e + (a << 2) >> 2];
                c[(c[5287] | 0) + (a << 2) >> 2] = c[f + (a << 2) >> 2];
                a = a + 1 | 0;
            } while ((a | 0) != (d | 0));
            a = d;
        } else
            a = 3;
        b = c[5288] | 0;
        if ((a | 0) < (b | 0))
            do {
                c[(c[5286] | 0) + (a << 2) >> 2] = 0;
                a = a + 1 | 0;
            } while ((a | 0) < (b | 0));
        if (!d)
            return;
        Vd(e);
        Vd(f);
        return;
    }
    function* qb() {
        var a = 0, b = 0, d = 0, e = 0, f = 0;
        d = c[5291] | 0;
        e = c[5289] | 0;
        f = c[5290] | 0;
        b = d + 32 | 0;
        c[5291] = b;
        c[5289] = (yield* Ob(b << 2)) | 0;
        c[5290] = (yield* Ob(c[5291] << 2)) | 0;
        if ((d | 0) > 1) {
            a = 1;
            do {
                c[(c[5289] | 0) + (a << 2) >> 2] = c[e + (a << 2) >> 2];
                c[(c[5290] | 0) + (a << 2) >> 2] = c[f + (a << 2) >> 2];
                a = a + 1 | 0;
            } while ((a | 0) != (d | 0));
            a = d;
        } else
            a = 1;
        b = c[5288] | 0;
        if ((a | 0) < (b | 0))
            do {
                c[(c[5289] | 0) + (a << 2) >> 2] = 0;
                a = a + 1 | 0;
            } while ((a | 0) < (b | 0));
        if (!d)
            return;
        Vd(e);
        Vd(f);
        return;
    }
    function rb(b) {
        b = b | 0;
        var d = 0, e = 0, f = 0;
        f = c[5283] | 0;
        a[f + (b * 28 | 0) >> 0] = 0;
        c[f + (b * 28 | 0) + 12 >> 2] = 0;
        d = f + (b * 28 | 0) + 24 | 0;
        e = c[d >> 2] | 0;
        if (e | 0) {
            Tb(e);
            c[d >> 2] = 0;
        }
        d = f + (b * 28 | 0) + 20 | 0;
        e = c[d >> 2] | 0;
        if (e | 0) {
            Tb(e);
            c[d >> 2] = 0;
        }
        e = f + (b * 28 | 0) + 16 | 0;
        d = c[e >> 2] | 0;
        if (!d)
            return;
        do {
            b = d;
            d = c[d + 256 >> 2] | 0;
            Vd(b);
            c[e >> 2] = d;
        } while ((d | 0) != 0);
        return;
    }
    function* sb() {
        var a = 0, b = 0, d = 0;
        b = i;
        i = i + 16 | 0;
        a = c[5293] | 0;
        if (!a) {
            yield* fc(13614, b);
            a = 0;
            i = b;
            return a | 0;
        } else {
            c[5293] = c[a + 4 >> 2];
            d = c[a >> 2] | 0;
            Vd(a);
            a = d;
            i = b;
            return a | 0;
        }
        return 0;
    }
    function* tb(a) {
        a = a | 0;
        var b = 0;
        b = (yield* Ob(8)) | 0;
        c[b + 4 >> 2] = c[5293];
        c[b >> 2] = a;
        c[5293] = b;
        return;
    }
    function ub() {
        var a = 0;
        a = c[5292] | 0;
        if (!a)
            return;
        c[5292] = c[a + 4 >> 2];
        lc(a);
        Vd(a);
        return;
    }
    function* vb(a) {
        a = a | 0;
        var b = 0;
        b = (yield* Ob(8)) | 0;
        c[b >> 2] = nc(a) | 0;
        c[b + 4 >> 2] = c[5292];
        c[5292] = b;
        return;
    }
    function* wb(a) {
        a = a | 0;
        var b = 0;
        b = (yield* Ob(8)) | 0;
        c[b >> 2] = a;
        c[b + 4 >> 2] = c[5292];
        c[5292] = b;
        return;
    }
    function* xb(a) {
        a = a | 0;
        var b = 0, d = 0, e = 0, f = 0;
        f = i;
        i = i + 16 | 0;
        e = f;
        d = c[5292] | 0;
        b = (a | 0) > 0;
        if (b & (d | 0) != 0)
            while (1) {
                d = c[d + 4 >> 2] | 0;
                b = (a | 0) > 1;
                if (!(b & (d | 0) != 0))
                    break;
                else
                    a = a + -1 | 0;
            }
        if (!b) {
            e = 1;
            i = f;
            return e | 0;
        }
        yield* fc(13660, e);
        e = 0;
        i = f;
        return e | 0;
    }
    function* yb(d, e) {
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, j = 0, k = 0, l = 0;
        k = i;
        i = i + 16 | 0;
        j = k;
        f = c[(c[5289] | 0) + (d << 2) >> 2] | 0;
        if (!f) {
            f = (yield* Ob(12)) | 0;
            c[(c[5289] | 0) + (d << 2) >> 2] = f;
            c[f >> 2] = 0;
            c[f + 8 >> 2] = 0;
            a[f + 4 >> 0] = 0;
        }
        d = c[f >> 2] | 0;
        if (!d) {
            d = (yield* Ob(8)) | 0;
            c[f >> 2] = d;
            c[d >> 2] = 0;
            b[d + 4 >> 1] = 0;
        }
        c[j >> 2] = e & 63;
        h = d + 4 | 0;
        l = b[h >> 1] | 0;
        g = l << 16 >> 16;
        f = e >> 6;
        if ((f | 0) > 0 | l << 16 >> 16 > 1) {
            e = 1;
            do {
                c[j + (e << 2) >> 2] = f & 63;
                e = e + 1 | 0;
                f = f >> 6;
            } while ((f | 0) > 0 | (e | 0) < (g | 0));
        } else
            e = 1;
        if ((e | 0) > (g | 0))
            do {
                f = (yield* Ob(256)) | 0;
                if (!(b[h >> 1] | 0)) {
                    g = 0;
                    do {
                        c[f + (g << 2) >> 2] = nc(c[5307] | 0) | 0;
                        g = g + 1 | 0;
                    } while ((g | 0) != 64);
                } else {
                    c[f >> 2] = c[d >> 2];
                    $d(f + 4 | 0, 0, 252) | 0;
                }
                c[d >> 2] = f;
                l = (b[h >> 1] | 0) + 1 << 16 >> 16;
                b[h >> 1] = l;
            } while ((e | 0) > (l << 16 >> 16 | 0));
        else
            f = c[d >> 2] | 0;
        if ((e | 0) <= 1) {
            h = f;
            l = c[j >> 2] | 0;
            l = h + (l << 2) | 0;
            i = k;
            return l | 0;
        }
        while (1) {
            e = e + -1 | 0;
            d = f + (c[j + (e << 2) >> 2] << 2) | 0;
            f = c[d >> 2] | 0;
            if (!f) {
                f = (yield* Ob(256)) | 0;
                c[d >> 2] = f;
                if ((e | 0) > 1) {
                    $d(f | 0, 0, 256) | 0;
                    continue;
                }
                d = 0;
                do {
                    c[f + (d << 2) >> 2] = nc(c[5307] | 0) | 0;
                    d = d + 1 | 0;
                } while ((d | 0) != 64);
            }
            if ((e | 0) <= 1)
                break;
        }
        l = c[j >> 2] | 0;
        l = f + (l << 2) | 0;
        i = k;
        return l | 0;
    }
    function* zb(a) {
        a = a | 0;
        var b = 0, d = 0, e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0;
        l = i;
        i = i + 64 | 0;
        g = l + 56 | 0;
        f = l + 48 | 0;
        j = l + 40 | 0;
        k = l + 32 | 0;
        h = l + 24 | 0;
        e = l + 16 | 0;
        d = l + 8 | 0;
        b = l;
        if ((a | 0) > 3) {
            b = c[(c[5286] | 0) + (a << 2) >> 2] | 0;
            if (!b) {
                b = (yield* Ob(8)) | 0;
                c[(c[5286] | 0) + (a << 2) >> 2] = b;
                oc(b);
                if (!b) {
                    i = l;
                    return;
                }
            }
            lc(b);
            c[b >> 2] = nc(c[c[5292] >> 2] | 0) | 0;
            i = l;
            return;
        }
        a:
            do
                if (!((rc(c[c[5292] >> 2] | 0) | 0) << 24 >> 24)) {
                    d = Dc(c[c[5292] >> 2] | 0) | 0;
                    b = d;
                    d = (d | 0) == 0 & (sc(c[c[5292] >> 2] | 0) | 0) << 24 >> 24 == 0 & 1;
                    e = 11;
                } else
                    switch (a | 0) {
                    case 0: {
                            yield* gc(13673, b);
                            b = 2;
                            d = 0;
                            e = 14;
                            break a;
                        }
                    case 1: {
                            yield* gc(13698, d);
                            b = 2;
                            e = 21;
                            break a;
                        }
                    case 2: {
                            yield* gc(13723, e);
                            b = 0;
                            e = 24;
                            break a;
                        }
                    default: {
                            b = 0;
                            d = 0;
                            e = 11;
                            break a;
                        }
                    }
            while (0);
        b:
            do
                if ((e | 0) == 11)
                    switch (a | 0) {
                    case 0: {
                            if ((b | 0) > 1 | d << 24 >> 24 != 0) {
                                e = 14;
                                break b;
                            }
                            c[5294] = 2;
                            yield* gc(13748, h);
                            i = l;
                            return;
                        }
                    case 1: {
                            if (!((b | 0) > 1 | d << 24 >> 24 != 0)) {
                                c[5295] = 2;
                                yield* gc(13801, j);
                                i = l;
                                return;
                            }
                            if (!(d << 24 >> 24)) {
                                e = 21;
                                break b;
                            }
                            c[5295] = 2147483647;
                            c[f >> 2] = 2147483647;
                            yield* gc(13827, f);
                            i = l;
                            return;
                        }
                    case 2: {
                            if (!(d << 24 >> 24)) {
                                e = 24;
                                break b;
                            }
                            c[5296] = 2147483647;
                            c[g >> 2] = 2147483647;
                            yield* gc(13854, g);
                            i = l;
                            return;
                        }
                    default: {
                            i = l;
                            return;
                        }
                    }
            while (0);
        if ((e | 0) == 14)
            if ((b | 0) < 17 & d << 24 >> 24 == 0) {
                c[5294] = b;
                i = l;
                return;
            } else {
                c[5294] = 16;
                yield* gc(13774, k);
                i = l;
                return;
            }
        else if ((e | 0) == 21) {
            c[5295] = b;
            i = l;
            return;
        } else if ((e | 0) == 24) {
            c[5296] = b;
            i = l;
            return;
        }
    }
    function* Ab(a) {
        a = a | 0;
        var b = 0, d = 0, e = 0, f = 0, g = 0, h = 0, j = 0;
        j = i;
        i = i + 16 | 0;
        h = j + 8 | 0;
        g = j;
        e = c[5292] | 0;
        if (e | 0) {
            b = 2;
            f = e;
            while (1) {
                f = c[f + 4 >> 2] | 0;
                d = (b | 0) > 1;
                if (!(d & (f | 0) != 0))
                    break;
                else
                    b = b + -1 | 0;
            }
            if (!d) {
                b = Dc(c[c[e + 4 >> 2] >> 2] | 0) | 0;
                do
                    if (b >>> 0 <= 16777215) {
                        if ((b | 0) == 0 ? (sc(c[c[(c[5292] | 0) + 4 >> 2] >> 2] | 0) | 0) << 24 >> 24 == 0 : 0)
                            break;
                        b = (yield* yb(a, b)) | 0;
                        if (!b) {
                            i = j;
                            return;
                        }
                        lc(b);
                        c[b >> 2] = nc(c[c[5292] >> 2] | 0) | 0;
                        lc(c[(c[5292] | 0) + 4 >> 2] | 0);
                        b = c[5292] | 0;
                        c[c[b + 4 >> 2] >> 2] = c[b >> 2];
                        oc(c[5292] | 0);
                        b = c[5292] | 0;
                        if (!b) {
                            i = j;
                            return;
                        }
                        c[5292] = c[b + 4 >> 2];
                        lc(b);
                        Vd(b);
                        i = j;
                        return;
                    }
                while (0);
                c[h >> 2] = c[(c[5290] | 0) + (a << 2) >> 2];
                yield* fc(13881, h);
                i = j;
                return;
            }
        }
        yield* fc(13660, g);
        i = j;
        return;
    }
    function* Bb(a) {
        a = a | 0;
        var b = 0;
        switch (a | 0) {
        case 0: {
                b = c[5307] | 0;
                a = (yield* Ob(8)) | 0;
                c[a >> 2] = nc(b) | 0;
                c[a + 4 >> 2] = c[5292];
                c[5292] = a;
                yield* Fc(a, c[5294] | 0);
                return;
            }
        case 1: {
                a = c[5307] | 0;
                b = (yield* Ob(8)) | 0;
                c[b >> 2] = nc(a) | 0;
                c[b + 4 >> 2] = c[5292];
                c[5292] = b;
                yield* Fc(b, c[5295] | 0);
                return;
            }
        case 2: {
                a = c[5307] | 0;
                b = (yield* Ob(8)) | 0;
                c[b >> 2] = nc(a) | 0;
                c[b + 4 >> 2] = c[5292];
                c[5292] = b;
                yield* Fc(b, c[5296] | 0);
                return;
            }
        default: {
                a = c[(c[5286] | 0) + (a << 2) >> 2] | 0;
                if (!a) {
                    a = c[5307] | 0;
                    b = (yield* Ob(8)) | 0;
                    c[b >> 2] = nc(a) | 0;
                    c[b + 4 >> 2] = c[5292];
                    c[5292] = b;
                    return;
                } else {
                    a = c[a >> 2] | 0;
                    b = (yield* Ob(8)) | 0;
                    c[b >> 2] = nc(a) | 0;
                    c[b + 4 >> 2] = c[5292];
                    c[5292] = b;
                    return;
                }
            }
        }
    }
    function* Cb(a) {
        a = a | 0;
        var b = 0, d = 0, e = 0;
        e = i;
        i = i + 16 | 0;
        d = e + 8 | 0;
        b = c[5292] | 0;
        if (!b) {
            yield* fc(13660, e);
            i = e;
            return;
        }
        b = Dc(c[b >> 2] | 0) | 0;
        do
            if (b >>> 0 <= 16777215) {
                if ((b | 0) == 0 ? (sc(c[c[5292] >> 2] | 0) | 0) << 24 >> 24 == 0 : 0)
                    break;
                b = (yield* yb(a, b)) | 0;
                if (!b) {
                    i = e;
                    return;
                }
                a = c[5292] | 0;
                if (a | 0) {
                    c[5292] = c[a + 4 >> 2];
                    lc(a);
                    Vd(a);
                }
                a = c[b >> 2] | 0;
                d = (yield* Ob(8)) | 0;
                c[d >> 2] = nc(a) | 0;
                c[d + 4 >> 2] = c[5292];
                c[5292] = d;
                i = e;
                return;
            }
        while (0);
        c[d >> 2] = c[(c[5290] | 0) + (a << 2) >> 2];
        yield* fc(13881, d);
        i = e;
        return;
    }
    function* Db(a) {
        a = a | 0;
        var b = 0, d = 0;
        d = i;
        i = i + 32 | 0;
        a:
            do
                switch (a | 0) {
                case 0: {
                        b = c[5294] | 0;
                        if ((b | 0) > 2) {
                            c[5294] = b + -1;
                            break a;
                        } else {
                            yield* gc(13915, d);
                            break a;
                        }
                    }
                case 1: {
                        b = c[5295] | 0;
                        if ((b | 0) > 2) {
                            c[5295] = b + -1;
                            break a;
                        } else {
                            yield* gc(13937, d + 8 | 0);
                            break a;
                        }
                    }
                case 2: {
                        b = c[5296] | 0;
                        if ((b | 0) > 0) {
                            c[5296] = b + -1;
                            break a;
                        } else {
                            yield* gc(13959, d + 16 | 0);
                            break a;
                        }
                    }
                default: {
                        b = c[(c[5286] | 0) + (a << 2) >> 2] | 0;
                        if (!b) {
                            b = (yield* Ob(8)) | 0;
                            c[(c[5286] | 0) + (a << 2) >> 2] = b;
                            oc(b);
                            if (!b)
                                break a;
                        }
                        yield* tc(c[b >> 2] | 0, c[5308] | 0, b, 0);
                    }
                }
            while (0);
        i = d;
        return;
    }
    function* Eb(a) {
        a = a | 0;
        var b = 0, d = 0, e = 0;
        e = i;
        i = i + 16 | 0;
        d = e + 8 | 0;
        b = c[5292] | 0;
        if (!b) {
            yield* fc(13660, e);
            i = e;
            return;
        }
        b = Dc(c[b >> 2] | 0) | 0;
        do
            if (b >>> 0 <= 16777215) {
                if ((b | 0) == 0 ? (sc(c[c[5292] >> 2] | 0) | 0) << 24 >> 24 == 0 : 0)
                    break;
                b = (yield* yb(a, b)) | 0;
                if (!b) {
                    i = e;
                    return;
                }
                a = c[5292] | 0;
                if (a | 0) {
                    c[5292] = c[a + 4 >> 2];
                    lc(a);
                    Vd(a);
                }
                yield* tc(c[b >> 2] | 0, c[5308] | 0, b, 0);
                i = e;
                return;
            }
        while (0);
        c[d >> 2] = c[(c[5290] | 0) + (a << 2) >> 2];
        yield* fc(13881, d);
        i = e;
        return;
    }
    function* Fb(a) {
        a = a | 0;
        var b = 0, d = 0;
        d = i;
        i = i + 32 | 0;
        switch (a | 0) {
        case 0: {
                b = c[5294] | 0;
                if ((b | 0) < 16) {
                    c[5294] = b + 1;
                    i = d;
                    return;
                } else {
                    yield* gc(13992, d);
                    i = d;
                    return;
                }
            }
        case 1: {
                b = c[5295] | 0;
                if ((b | 0) == 2147483647) {
                    yield* gc(14012, d + 8 | 0);
                    i = d;
                    return;
                } else {
                    c[5295] = b + 1;
                    i = d;
                    return;
                }
            }
        case 2: {
                b = c[5296] | 0;
                if ((b | 0) == 2147483647) {
                    yield* gc(14032, d + 16 | 0);
                    i = d;
                    return;
                } else {
                    c[5296] = b + 1;
                    i = d;
                    return;
                }
            }
        default: {
                b = c[(c[5286] | 0) + (a << 2) >> 2] | 0;
                if (!b) {
                    b = (yield* Ob(8)) | 0;
                    c[(c[5286] | 0) + (a << 2) >> 2] = b;
                    oc(b);
                    if (!b) {
                        i = d;
                        return;
                    }
                }
                yield* wc(c[b >> 2] | 0, c[5308] | 0, b, 0);
                i = d;
                return;
            }
        }
    }
    function* Gb(a) {
        a = a | 0;
        var b = 0, d = 0, e = 0;
        e = i;
        i = i + 16 | 0;
        d = e + 8 | 0;
        b = c[5292] | 0;
        if (!b) {
            yield* fc(13660, e);
            i = e;
            return;
        }
        b = Dc(c[b >> 2] | 0) | 0;
        do
            if (b >>> 0 <= 16777215) {
                if ((b | 0) == 0 ? (sc(c[c[5292] >> 2] | 0) | 0) << 24 >> 24 == 0 : 0)
                    break;
                b = (yield* yb(a, b)) | 0;
                if (!b) {
                    i = e;
                    return;
                }
                a = c[5292] | 0;
                if (a | 0) {
                    c[5292] = c[a + 4 >> 2];
                    lc(a);
                    Vd(a);
                }
                yield* wc(c[b >> 2] | 0, c[5308] | 0, b, 0);
                i = e;
                return;
            }
        while (0);
        c[d >> 2] = c[(c[5290] | 0) + (a << 2) >> 2];
        yield* fc(13881, d);
        i = e;
        return;
    }
    function* Hb(b) {
        b = b | 0;
        var d = 0;
        if ((b | 0) > 0) {
            d = (yield* Ob(8)) | 0;
            c[d + 4 >> 2] = c[(c[5286] | 0) + (b << 2) >> 2];
            oc(d);
            c[(c[5286] | 0) + (b << 2) >> 2] = d;
            return;
        } else {
            d = 0 - b | 0;
            b = (yield* Ob(12)) | 0;
            c[b + 8 >> 2] = c[(c[5289] | 0) + (d << 2) >> 2];
            c[b >> 2] = 0;
            a[b + 4 >> 0] = 0;
            c[(c[5289] | 0) + (d << 2) >> 2] = b;
            return;
        }
    }
    function Ib(a, b) {
        a = a | 0;
        b = b | 0;
        var d = 0;
        if (!a)
            return;
        if ((b | 0) > 1) {
            b = b + -1 | 0;
            d = 0;
            do {
                Ib(c[a + (d << 2) >> 2] | 0, b);
                d = d + 1 | 0;
            } while ((d | 0) != 64);
        } else {
            b = 0;
            do {
                lc(a + (b << 2) | 0);
                b = b + 1 | 0;
            } while ((b | 0) != 64);
        }
        Vd(a);
        return;
    }
    function Jb(d) {
        d = d | 0;
        var e = 0, f = 0, g = 0;
        if (!d)
            return;
        do {
            e = c[d >> 2] | 0;
            if ((e | 0) > 0) {
                e = (c[5286] | 0) + (e << 2) | 0;
                f = c[e >> 2] | 0;
                if (f | 0) {
                    c[e >> 2] = c[f + 4 >> 2];
                    lc(f);
                    Vd(f);
                }
            } else {
                e = (c[5289] | 0) + (0 - e << 2) | 0;
                f = c[e >> 2] | 0;
                if (f | 0) {
                    c[e >> 2] = c[f + 8 >> 2];
                    if ((a[f + 4 >> 0] | 0) == 0 ? (g = c[f >> 2] | 0, g | 0) : 0) {
                        Ib(c[g >> 2] | 0, b[g + 4 >> 1] | 0);
                        Vd(c[f >> 2] | 0);
                    }
                    Vd(f);
                }
            }
            d = c[d + 8 >> 2] | 0;
        } while ((d | 0) != 0);
        return;
    }
    function* Kb(a, b) {
        a = a | 0;
        b = b | 0;
        var d = 0, e = 0, f = 0;
        f = (yield* Ob(256)) | 0;
        if ((b | 0) > 1) {
            b = b + -1 | 0;
            e = 0;
            do {
                d = c[a + (e << 2) >> 2] | 0;
                if (!d)
                    c[f + (e << 2) >> 2] = 0;
                else
                    c[f + (e << 2) >> 2] = (yield* Kb(d, b)) | 0;
                e = e + 1 | 0;
            } while ((e | 0) != 64);
            return f | 0;
        } else {
            d = 0;
            do {
                b = c[a + (d << 2) >> 2] | 0;
                if (!b)
                    c[f + (d << 2) >> 2] = 0;
                else
                    c[f + (d << 2) >> 2] = nc(b) | 0;
                d = d + 1 | 0;
            } while ((d | 0) != 64);
            return f | 0;
        }
        return 0;
    }
    function* Lb(d, e) {
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0;
        q = i;
        i = i + 32 | 0;
        p = q + 24 | 0;
        n = q + 16 | 0;
        m = q + 8 | 0;
        l = q;
        f = c[(c[5283] | 0) + (e * 28 | 0) + 20 >> 2] | 0;
        g = fb(d) | 0;
        e = (f | 0) != 0;
        a:
            do
                if (g << 24 >> 24 != 58) {
                    while (1) {
                        if (!e)
                            break;
                        b:
                            do
                                switch (g << 24 >> 24) {
                                case 48: {
                                        e = c[f >> 2] | 0;
                                        if ((e | 0) > 0) {
                                            k = (yield* Ob(8)) | 0;
                                            c[k + 4 >> 2] = c[(c[5286] | 0) + (e << 2) >> 2];
                                            c[k >> 2] = c[c[5292] >> 2];
                                            oc(c[5292] | 0);
                                            c[(c[5286] | 0) + (e << 2) >> 2] = k;
                                        } else
                                            o = 16;
                                        break;
                                    }
                                case 49: {
                                        e = c[f >> 2] | 0;
                                        if ((e | 0) < 0) {
                                            g = Dc(c[c[5292] >> 2] | 0) | 0;
                                            (yield* yb(g, 0)) | 0;
                                            e = c[f >> 2] | 0;
                                            if ((e | 0) > 0) {
                                                k = (yield* Ob(8)) | 0;
                                                c[k + 4 >> 2] = c[(c[5286] | 0) + (e << 2) >> 2];
                                                oc(k);
                                                c[(c[5286] | 0) + (e << 2) >> 2] = k;
                                            } else {
                                                k = 0 - e | 0;
                                                j = (yield* Ob(12)) | 0;
                                                c[j + 8 >> 2] = c[(c[5289] | 0) + (k << 2) >> 2];
                                                c[j >> 2] = 0;
                                                a[j + 4 >> 0] = 0;
                                                c[(c[5289] | 0) + (k << 2) >> 2] = j;
                                            }
                                            h = 0 - (c[f >> 2] | 0) | 0;
                                            j = c[5289] | 0;
                                            e = c[j + (g << 2) >> 2] | 0;
                                            if ((g | 0) == (h | 0))
                                                k = c[e + 8 >> 2] | 0;
                                            else
                                                k = e;
                                            e = c[j + (h << 2) >> 2] | 0;
                                            g = e + 4 | 0;
                                            if (!(c[f + 4 >> 2] | 0)) {
                                                a[g >> 0] = 0;
                                                h = c[k >> 2] | 0;
                                                k = (yield* Ob(8)) | 0;
                                                j = h + 4 | 0;
                                                b[k + 4 >> 1] = b[j >> 1] | 0;
                                                c[k >> 2] = (yield* Kb(c[h >> 2] | 0, b[j >> 1] | 0)) | 0;
                                                c[e >> 2] = k;
                                                break b;
                                            } else {
                                                a[g >> 0] = 1;
                                                c[e >> 2] = c[k >> 2];
                                                break b;
                                            }
                                        } else
                                            o = 18;
                                        break;
                                    }
                                default: {
                                        e = c[f >> 2] | 0;
                                        o = 16;
                                    }
                                }
                            while (0);
                        if ((o | 0) == 16)
                            if ((e | 0) < 0) {
                                c[l >> 2] = c[(c[5290] | 0) + (0 - e << 2) >> 2];
                                yield* fc(14052, l);
                                o = 19;
                            } else
                                o = 18;
                        if ((o | 0) == 18) {
                            c[m >> 2] = c[(c[5287] | 0) + (e << 2) >> 2];
                            yield* fc(14090, m);
                            o = 19;
                        }
                        if ((o | 0) == 19) {
                            o = 0;
                            f = f + 12 | 0;
                        }
                        e = c[5292] | 0;
                        if (e | 0) {
                            c[5292] = c[e + 4 >> 2];
                            lc(e);
                            Vd(e);
                        }
                        f = c[f + 8 >> 2] | 0;
                        g = fb(d) | 0;
                        e = (f | 0) != 0;
                        if (g << 24 >> 24 == 58)
                            break a;
                    }
                    yield* fc(14129, n);
                    i = q;
                    return;
                }
            while (0);
        if (!e) {
            i = q;
            return;
        }
        yield* fc(14129, p);
        i = q;
        return;
    }
    function* Mb(a) {
        a = a | 0;
        var b = 0;
        b = Ud((Rc(a) | 0) + 1 | 0) | 0;
        if (!b)
            yield* Nb();
        else
            return pd(b, a) | 0;
        return 0;
    }
    function* Nb() {
        (yield* Fd(14155, 39, 1, c[508] | 0)) | 0;
        Ea(1);
    }
    function* Ob(a) {
        a = a | 0;
        a = Ud(a) | 0;
        if (!a)
            yield* Nb();
        else
            return a | 0;
        return 0;
    }
    function* Pb(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        var e = 0;
        e = Ud(12) | 0;
        if (!e)
            yield* Nb();
        else {
            c[e >> 2] = b;
            c[e + 4 >> 2] = d;
            c[e + 8 >> 2] = a;
            return e | 0;
        }
        return 0;
    }
    function* Qb(a) {
        a = a | 0;
        var b = 0;
        b = c[5267] | 0;
        if (b | 0)
            Vd(b);
        c[5267] = c[5268];
        a = (yield* Rb(a, 1)) | 0;
        c[5268] = a;
        return a | 0;
    }
    function* Rb(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0;
        m = i;
        i = i + 48 | 0;
        l = m + 24 | 0;
        k = m + 16 | 0;
        j = m + 8 | 0;
        h = m;
        g = m + 28 | 0;
        if (!b) {
            d = Ud(d) | 0;
            if (!d)
                yield* Nb();
            a[d >> 0] = 0;
            l = d;
            i = m;
            return l | 0;
        }
        f = (yield* Rb(c[b + 8 >> 2] | 0, d + 12 | 0)) | 0;
        d = (d | 0) != 1;
        e = c[b >> 2] | 0;
        do
            if (!(c[b + 4 >> 2] | 0))
                if (d) {
                    c[k >> 2] = e;
                    (yield* Bd(g, 14204, k)) | 0;
                    break;
                } else {
                    c[l >> 2] = e;
                    (yield* Bd(g, 14208, l)) | 0;
                    break;
                }
            else if (d) {
                c[h >> 2] = e;
                (yield* Bd(g, 14195, h)) | 0;
                break;
            } else {
                c[j >> 2] = e;
                (yield* Bd(g, 14200, j)) | 0;
                break;
            }
        while (0);
        l = Qd(f, g) | 0;
        i = m;
        return l | 0;
    }
    function* Sb(b) {
        b = b | 0;
        var d = 0, e = 0, f = 0, g = 0;
        d = c[5267] | 0;
        if (d | 0)
            Vd(d);
        c[5267] = c[5268];
        f = (b | 0) == 0;
        if (f)
            d = 1;
        else {
            d = 1;
            e = b;
            do {
                e = c[e + 8 >> 2] | 0;
                d = d + 1 | 0;
            } while ((e | 0) != 0);
        }
        g = Ud(d) | 0;
        if (!g)
            yield* Nb();
        c[5268] = g;
        if (f) {
            f = 0;
            f = g + f | 0;
            a[f >> 0] = 0;
            return g | 0;
        } else
            e = 0;
        while (1) {
            d = e + 1 | 0;
            a[g + e >> 0] = c[b >> 2] | 0 ? 49 : 48;
            b = c[b + 8 >> 2] | 0;
            if (!b)
                break;
            else
                e = d;
        }
        f = g + d | 0;
        a[f >> 0] = 0;
        return g | 0;
    }
    function Tb(a) {
        a = a | 0;
        var b = 0;
        if (!a)
            return;
        do {
            b = a;
            a = c[a + 8 >> 2] | 0;
            Vd(b);
        } while ((a | 0) != 0);
        return;
    }
    function* Ub(a, b) {
        a = a | 0;
        b = b | 0;
        var d = 0, e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
        n = i;
        i = i + 48 | 0;
        m = n + 32 | 0;
        l = n + 24 | 0;
        k = n + 16 | 0;
        h = n + 8 | 0;
        g = n;
        j = (a | 0) == 0;
        if (!j) {
            f = a;
            do {
                e = f + 8 | 0;
                d = c[e >> 2] | 0;
                if (d | 0)
                    do {
                        if ((c[d >> 2] | 0) == (c[f >> 2] | 0))
                            yield* Vb(14211, g);
                        d = c[d + 8 >> 2] | 0;
                    } while ((d | 0) != 0);
                if (c[f + 4 >> 2] | 0)
                    yield* Wb(14259, h);
                f = c[e >> 2] | 0;
            } while ((f | 0) != 0);
        }
        if (!b) {
            i = n;
            return;
        } else
            f = b;
        do {
            e = f + 8 | 0;
            d = c[e >> 2] | 0;
            if (d | 0)
                do {
                    if ((c[d >> 2] | 0) == (c[f >> 2] | 0))
                        yield* Vb(14317, k);
                    d = c[d + 8 >> 2] | 0;
                } while ((d | 0) != 0);
            if (c[f + 4 >> 2] | 0)
                yield* Vb(14347, l);
            f = c[e >> 2] | 0;
        } while ((f | 0) != 0);
        if (j) {
            i = n;
            return;
        }
        do {
            d = b;
            do {
                if ((c[d >> 2] | 0) == (c[a >> 2] | 0))
                    yield* Vb(14366, m);
                d = c[d + 8 >> 2] | 0;
            } while ((d | 0) != 0);
            a = c[a + 8 >> 2] | 0;
        } while ((a | 0) != 0);
        i = n;
        return;
    }
    function* Vb(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0;
        e = i;
        i = i + 32 | 0;
        g = e;
        f = e + 8 | 0;
        c[f >> 2] = d;
        d = c[508] | 0;
        h = c[5301] | 0;
        c[g >> 2] = (a[21815] | 0) == 0 ? c[5282] | 0 : 14237;
        c[g + 4 >> 2] = h;
        (yield* Ad(d, 14251, g)) | 0;
        (yield* dd(d, b, f)) | 0;
        (yield* Nd(10, d)) | 0;
        c[5302] = 1;
        i = e;
        return;
    }
    function* Wb(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0;
        h = i;
        i = i + 32 | 0;
        g = h + 8 | 0;
        f = h;
        e = h + 16 | 0;
        c[e >> 2] = d;
        if (c[5274] | 0) {
            d = c[508] | 0;
            g = c[5301] | 0;
            c[f >> 2] = (a[21815] | 0) == 0 ? c[5282] | 0 : 14237;
            c[f + 4 >> 2] = g;
            (yield* Ad(d, 14284, f)) | 0;
            (yield* dd(d, b, e)) | 0;
            (yield* Nd(10, d)) | 0;
            c[5302] = 1;
            i = h;
            return;
        }
        if (!(c[5273] | 0)) {
            i = h;
            return;
        }
        d = c[508] | 0;
        f = c[5301] | 0;
        c[g >> 2] = (a[21815] | 0) == 0 ? c[5282] | 0 : 14237;
        c[g + 4 >> 2] = f;
        (yield* Ad(d, 14299, g)) | 0;
        (yield* dd(d, b, e)) | 0;
        (yield* Nd(10, d)) | 0;
        i = h;
        return;
    }
    function* Xb(a) {
        a = a | 0;
        var b = 0;
        if ((c[5270] | 0) >= (a | 0))
            return;
        b = c[5269] | 0;
        if (b | 0)
            Vd(b);
        b = Ud(a) | 0;
        if (!b)
            yield* Nb();
        c[5269] = b;
        c[5270] = a;
        return;
    }
    function* Yb() {
        var b = 0, d = 0;
        d = i;
        i = i + 16 | 0;
        c[5277] = 0;
        c[5279] = 0;
        c[5280] = 1;
        c[5281] = 2;
        if (!(c[5271] | 0))
            lb();
        else
            (yield* Id(14408, d)) | 0;
        c[5302] = 0;
        a[21814] = 0;
        if ((c[5270] | 0) >= 64) {
            i = d;
            return;
        }
        b = c[5269] | 0;
        if (b | 0)
            Vd(b);
        b = Ud(64) | 0;
        if (!b)
            yield* Nb();
        c[5269] = b;
        c[5270] = 64;
        i = d;
        return;
    }
    function* Zb(b) {
        b = b | 0;
        var d = 0, e = 0;
        e = i;
        i = i + 16 | 0;
        d = e;
        a[21814] = 1;
        if (!(c[5271] | 0)) {
            yield* mb(b);
            i = e;
            return;
        }
        c[d >> 2] = b;
        (yield* Id(14411, d)) | 0;
        d = Rc(b) | 0;
        d = (c[5281] | 0) + d | 0;
        c[5281] = d;
        if ((d | 0) <= 60) {
            i = e;
            return;
        }
        (yield* Md(10)) | 0;
        c[5281] = 0;
        i = e;
        return;
    }
    function* _b() {
        var b = 0, d = 0, e = 0;
        e = i;
        i = i + 16 | 0;
        d = e;
        b = a[21814] | 0;
        if (!((c[5302] | 0) != 0 | b << 24 >> 24 == 0)) {
            if (!(c[5271] | 0))
                yield* gb();
            else {
                (yield* Kd(14414)) | 0;
                c[5281] = 0;
            }
            b = a[21814] | 0;
        }
        if (!(b << 24 >> 24)) {
            c[5302] = 0;
            i = e;
            return;
        }
        c[5277] = 0;
        c[5279] = 0;
        c[5280] = 1;
        c[5281] = 2;
        if (!(c[5271] | 0))
            lb();
        else
            (yield* Id(14408, d)) | 0;
        c[5302] = 0;
        a[21814] = 0;
        if ((c[5270] | 0) >= 64) {
            i = e;
            return;
        }
        b = c[5269] | 0;
        if (b | 0)
            Vd(b);
        b = Ud(64) | 0;
        if (!b)
            yield* Nb();
        c[5269] = b;
        c[5270] = 64;
        i = e;
        return;
    }
    function* $b(a) {
        a = a | 0;
        var b = 0, d = 0;
        if ((a | 0) == 10) {
            c[5299] = 0;
            (yield* Md(10)) | 0;
            return;
        }
        d = (c[5299] | 0) + 1 | 0;
        c[5299] = d;
        b = c[5300] | 0;
        if ((b | 0) != 0 & (d | 0) == (b + -1 | 0)) {
            (yield* Md(92)) | 0;
            (yield* Md(10)) | 0;
            c[5299] = 1;
        }
        (yield* Md(a)) | 0;
        return;
    }
    function* ac(a) {
        a = a | 0;
        var b = 0, d = 0;
        if ((a | 0) == 10) {
            c[5299] = 0;
            (yield* Md(10)) | 0;
            return;
        }
        if ((c[5274] | 0) == 0 ? (d = (c[5299] | 0) + 1 | 0, c[5299] = d, b = c[5300] | 0, (b | 0) != 0 & (d | 0) == (b + -1 | 0)) : 0) {
            (yield* Md(92)) | 0;
            (yield* Md(10)) | 0;
            c[5299] = 1;
        }
        (yield* Md(a)) | 0;
        return;
    }
    function bc(a, d) {
        a = a | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0;
        e = c[a >> 2] | 0;
        if (!e) {
            c[a >> 2] = d;
            c[d + 20 >> 2] = 0;
            c[d + 24 >> 2] = 0;
            b[d + 16 >> 1] = 0;
            a = 1;
            return a | 0;
        }
        a:
            do
                if ((rd(c[d >> 2] | 0, c[e >> 2] | 0) | 0) < 0) {
                    if (bc(e + 20 | 0, d) | 0) {
                        e = c[a >> 2] | 0;
                        i = e + 16 | 0;
                        j = (b[i >> 1] | 0) + -1 << 16 >> 16;
                        b[i >> 1] = j;
                        switch (j << 16 >> 16 | 0) {
                        case -1: {
                                a = 1;
                                return a | 0;
                            }
                        case -2: {
                                d = e + 20 | 0;
                                f = c[d >> 2] | 0;
                                j = f + 16 | 0;
                                g = f + 24 | 0;
                                h = c[g >> 2] | 0;
                                if ((b[j >> 1] | 0) < 1) {
                                    c[d >> 2] = h;
                                    c[g >> 2] = e;
                                    c[a >> 2] = f;
                                    b[i >> 1] = 0;
                                    b[j >> 1] = 0;
                                    break a;
                                }
                                c[a >> 2] = h;
                                c[g >> 2] = c[h + 20 >> 2];
                                c[d >> 2] = c[(c[a >> 2] | 0) + 24 >> 2];
                                c[(c[a >> 2] | 0) + 20 >> 2] = f;
                                c[(c[a >> 2] | 0) + 24 >> 2] = e;
                                e = (c[a >> 2] | 0) + 16 | 0;
                                switch (b[e >> 1] | 0) {
                                case -1: {
                                        b[i >> 1] = 1;
                                        b[j >> 1] = 0;
                                        break;
                                    }
                                case 0: {
                                        b[i >> 1] = 0;
                                        b[j >> 1] = 0;
                                        break;
                                    }
                                case 1: {
                                        b[i >> 1] = 0;
                                        b[j >> 1] = -1;
                                        break;
                                    }
                                default: {
                                    }
                                }
                                b[e >> 1] = 0;
                                break a;
                            }
                        case 0: {
                                a = 0;
                                return a | 0;
                            }
                        default:
                            break a;
                        }
                    }
                } else if (bc(e + 24 | 0, d) | 0) {
                    h = c[a >> 2] | 0;
                    j = h + 16 | 0;
                    e = (b[j >> 1] | 0) + 1 << 16 >> 16;
                    b[j >> 1] = e;
                    e = e << 16 >> 16;
                    switch (e | 0) {
                    case 2:
                        break;
                    case 1:
                    case 0: {
                            a = e;
                            return a | 0;
                        }
                    default:
                        break a;
                    }
                    e = h + 24 | 0;
                    d = c[e >> 2] | 0;
                    i = d + 16 | 0;
                    f = d + 20 | 0;
                    g = c[f >> 2] | 0;
                    if ((b[i >> 1] | 0) > -1) {
                        c[e >> 2] = g;
                        c[f >> 2] = h;
                        c[a >> 2] = d;
                        b[j >> 1] = 0;
                        b[i >> 1] = 0;
                        break;
                    }
                    c[a >> 2] = g;
                    c[f >> 2] = c[g + 24 >> 2];
                    c[e >> 2] = c[(c[a >> 2] | 0) + 20 >> 2];
                    c[(c[a >> 2] | 0) + 20 >> 2] = h;
                    c[(c[a >> 2] | 0) + 24 >> 2] = d;
                    e = (c[a >> 2] | 0) + 16 | 0;
                    switch (b[e >> 1] | 0) {
                    case -1: {
                            b[j >> 1] = 0;
                            b[i >> 1] = 1;
                            break;
                        }
                    case 0: {
                            b[j >> 1] = 0;
                            b[i >> 1] = 0;
                            break;
                        }
                    case 1: {
                            b[j >> 1] = -1;
                            b[i >> 1] = 0;
                            break;
                        }
                    default: {
                        }
                    }
                    b[e >> 1] = 0;
                }
            while (0);
        a = 0;
        return a | 0;
    }
    function cc() {
        c[5306] = 0;
        c[5303] = 1;
        c[5304] = 1;
        c[5305] = 5;
        return;
    }
    function* dc(a, b) {
        a = a | 0;
        b = b | 0;
        var d = 0, e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0;
        m = i;
        i = i + 48 | 0;
        h = m + 32 | 0;
        k = m + 24 | 0;
        l = m + 16 | 0;
        j = m + 8 | 0;
        d = m;
        if ((Rc(a) | 0) != 1) {
            c[d >> 2] = a;
            yield* Wb(14417, d);
        }
        d = c[5306] | 0;
        a:
            do
                if (!d)
                    f = 6;
                else
                    while (1) {
                        e = rd(a, c[d >> 2] | 0) | 0;
                        if (!e) {
                            g = d;
                            break a;
                        }
                        d = c[((e | 0) < 0 ? d + 20 | 0 : d + 24 | 0) >> 2] | 0;
                        if (!d) {
                            f = 6;
                            break;
                        }
                    }
            while (0);
        do
            if ((f | 0) == 6) {
                d = Ud(28) | 0;
                if (!d)
                    yield* Nb();
                e = Ud((Rc(a) | 0) + 1 | 0) | 0;
                if (!e)
                    yield* Nb();
                else {
                    c[d >> 2] = pd(e, a) | 0;
                    c[d + 4 >> 2] = 0;
                    c[d + 8 >> 2] = 0;
                    c[d + 12 >> 2] = 0;
                    bc(21224, d) | 0;
                    g = d;
                    break;
                }
            }
        while (0);
        switch (b | 0) {
        case 1: {
                e = g + 4 | 0;
                if (c[e >> 2] | 0) {
                    Vd(a);
                    a = 0 - (c[e >> 2] | 0) | 0;
                    i = m;
                    return a | 0;
                }
                d = c[5303] | 0;
                c[5303] = d + 1;
                c[e >> 2] = d;
                if ((d | 0) >= 32767) {
                    yield* Vb(14443, j);
                    Ea(1);
                }
                if ((d | 0) >= (c[5291] | 0)) {
                    yield* qb();
                    d = c[e >> 2] | 0;
                }
                c[(c[5290] | 0) + (d << 2) >> 2] = a;
                a = 0 - d | 0;
                i = m;
                return a | 0;
            }
        case 3:
        case 2: {
                e = g + 8 | 0;
                d = c[e >> 2] | 0;
                if (!d) {
                    d = c[5304] | 0;
                    c[5304] = d + 1;
                    c[e >> 2] = d;
                    if ((d | 0) >= 32767) {
                        yield* Vb(14468, l);
                        Ea(1);
                    }
                    if ((d | 0) >= (c[5285] | 0)) {
                        yield* ob();
                        d = c[e >> 2] | 0;
                    }
                    c[(c[5284] | 0) + (d << 2) >> 2] = a;
                    a = d;
                    i = m;
                    return a | 0;
                } else {
                    if ((b | 0) == 2) {
                        a = d;
                        i = m;
                        return a | 0;
                    }
                    Vd(a);
                    d = c[e >> 2] | 0;
                    if (!((c[5272] | 0) != 0 & (d | 0) < 7)) {
                        a = d;
                        i = m;
                        return a | 0;
                    }
                    a = c[5304] | 0;
                    c[5304] = a + 1;
                    c[e >> 2] = a;
                    i = m;
                    return a | 0;
                }
            }
        case 0: {
                e = g + 12 | 0;
                if (c[e >> 2] | 0) {
                    Vd(a);
                    a = c[e >> 2] | 0;
                    i = m;
                    return a | 0;
                }
                d = c[5305] | 0;
                c[5305] = d + 1;
                c[e >> 2] = d;
                if ((d | 0) >= 32768) {
                    yield* Vb(14487, k);
                    Ea(1);
                }
                if ((d | 0) >= (c[5288] | 0)) {
                    yield* pb();
                    d = c[e >> 2] | 0;
                }
                c[(c[5287] | 0) + (d + -1 << 2) >> 2] = a;
                a = d;
                i = m;
                return a | 0;
            }
        default: {
                yield* Vb(14506, h);
                Ea(1);
            }
        }
        return 0;
    }
    function* ec() {
        var a = 0, b = 0, d = 0, e = 0, f = 0, g = 0, h = 0;
        a = i;
        i = i + 48 | 0;
        b = a + 40 | 0;
        d = a + 32 | 0;
        e = a + 24 | 0;
        f = a + 16 | 0;
        g = a + 8 | 0;
        h = a;
        c[h >> 2] = 2147483647;
        (yield* Id(14563, h)) | 0;
        c[g >> 2] = 16777215;
        (yield* Id(14585, g)) | 0;
        c[f >> 2] = 2147483647;
        (yield* Id(14608, f)) | 0;
        c[e >> 2] = 2147483647;
        (yield* Id(14630, e)) | 0;
        c[d >> 2] = 2147483647;
        (yield* Id(14652, d)) | 0;
        c[b >> 2] = 32767;
        (yield* Id(14675, b)) | 0;
        i = a;
        return;
    }
    function* fc(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, j = 0;
        e = i;
        i = i + 32 | 0;
        h = e;
        g = e + 8 | 0;
        f = c[508] | 0;
        j = c[5298] | 0;
        c[h >> 2] = c[(c[5284] | 0) + (c[5297] << 2) >> 2];
        c[h + 4 >> 2] = j;
        (yield* Ad(f, 14698, h)) | 0;
        c[g >> 2] = d;
        (yield* dd(f, b, g)) | 0;
        (yield* Nd(10, f)) | 0;
        a[21817] = 1;
        i = e;
        return;
    }
    function* gc(a, b) {
        a = a | 0;
        b = b | 0;
        var d = 0, e = 0, f = 0, g = 0, h = 0;
        d = i;
        i = i + 32 | 0;
        g = d;
        f = d + 8 | 0;
        e = c[508] | 0;
        h = c[5298] | 0;
        c[g >> 2] = c[(c[5284] | 0) + (c[5297] << 2) >> 2];
        c[g + 4 >> 2] = h;
        (yield* Ad(e, 14732, g)) | 0;
        c[f >> 2] = b;
        (yield* dd(e, a, f)) | 0;
        (yield* Nd(10, e)) | 0;
        i = d;
        return;
    }
    function* hc() {
        (yield* Kd(17420)) | 0;
        (yield* Kd(17471)) | 0;
        return;
    }
    function* ic() {
        var a = 0, b = 0;
        a = i;
        i = i + 16 | 0;
        b = a;
        c[b >> 2] = 17511;
        c[b + 4 >> 2] = 17514;
        c[b + 8 >> 2] = 17522;
        (yield* Id(17501, b)) | 0;
        i = a;
        return;
    }
    function* jc(a) {
        a = a | 0;
        var b = 0, d = 0, e = 0;
        b = i;
        i = i + 32 | 0;
        d = b + 8 | 0;
        e = b;
        c[e >> 2] = a;
        (yield* Id(17603, e)) | 0;
        c[d >> 2] = 17511;
        c[d + 4 >> 2] = 17514;
        c[d + 8 >> 2] = 17522;
        (yield* Id(17501, d)) | 0;
        (yield* Kd(17607)) | 0;
        i = b;
        return;
    }
    function* kc(a, b) {
        a = a | 0;
        b = b | 0;
        var d = 0, e = 0;
        d = c[5310] | 0;
        if (!d) {
            d = Ud(28) | 0;
            if (!d)
                yield* Nb();
            else
                e = d;
        } else {
            c[5310] = c[d + 16 >> 2];
            e = d;
        }
        c[e >> 2] = 0;
        c[e + 4 >> 2] = a;
        c[e + 8 >> 2] = b;
        c[e + 12 >> 2] = 1;
        a = b + a | 0;
        d = Ud(a) | 0;
        c[e + 20 >> 2] = d;
        if (!d)
            yield* Nb();
        else {
            b = d;
            c[e + 24 >> 2] = b;
            $d(b | 0, 0, a | 0) | 0;
            return e | 0;
        }
        return 0;
    }
    function lc(a) {
        a = a | 0;
        var b = 0, d = 0, e = 0;
        b = c[a >> 2] | 0;
        if (!b)
            return;
        e = b + 12 | 0;
        d = (c[e >> 2] | 0) + -1 | 0;
        c[e >> 2] = d;
        if (!d) {
            d = c[b + 20 >> 2] | 0;
            if (d) {
                Vd(d);
                b = c[a >> 2] | 0;
            }
            c[b + 16 >> 2] = c[5310];
            c[5310] = c[a >> 2];
        }
        c[a >> 2] = 0;
        return;
    }
    function* mc() {
        var b = 0, d = 0, e = 0, f = 0;
        b = c[5310] | 0;
        if (!b) {
            b = Ud(28) | 0;
            if (!b)
                yield* Nb();
            else
                d = b;
        } else {
            c[5310] = c[b + 16 >> 2];
            d = b;
        }
        c[d >> 2] = 0;
        c[d + 4 >> 2] = 1;
        c[d + 8 >> 2] = 0;
        c[d + 12 >> 2] = 1;
        b = Ud(1) | 0;
        c[d + 20 >> 2] = b;
        if (!b)
            yield* Nb();
        c[d + 24 >> 2] = b;
        a[b >> 0] = 0;
        c[5307] = d;
        b = c[5310] | 0;
        if (!b) {
            b = Ud(28) | 0;
            if (!b)
                yield* Nb();
            else
                e = b;
        } else {
            c[5310] = c[b + 16 >> 2];
            e = b;
        }
        c[e >> 2] = 0;
        c[e + 4 >> 2] = 1;
        c[e + 8 >> 2] = 0;
        c[e + 12 >> 2] = 1;
        b = Ud(1) | 0;
        c[e + 20 >> 2] = b;
        if (!b)
            yield* Nb();
        d = b;
        b = e + 24 | 0;
        c[b >> 2] = d;
        a[d >> 0] = 0;
        c[5308] = e;
        a[c[b >> 2] >> 0] = 1;
        b = c[5310] | 0;
        if (!b) {
            b = Ud(28) | 0;
            if (!b)
                yield* Nb();
            else
                f = b;
        } else {
            c[5310] = c[b + 16 >> 2];
            f = b;
        }
        c[f >> 2] = 0;
        c[f + 4 >> 2] = 1;
        c[f + 8 >> 2] = 0;
        c[f + 12 >> 2] = 1;
        b = Ud(1) | 0;
        c[f + 20 >> 2] = b;
        if (!b)
            yield* Nb();
        else {
            d = b;
            e = f + 24 | 0;
            c[e >> 2] = d;
            a[d >> 0] = 0;
            c[5309] = f;
            a[c[e >> 2] >> 0] = 2;
            return;
        }
    }
    function nc(a) {
        a = a | 0;
        var b = 0;
        b = a + 12 | 0;
        c[b >> 2] = (c[b >> 2] | 0) + 1;
        return a | 0;
    }
    function oc(a) {
        a = a | 0;
        var b = 0, d = 0;
        b = c[5307] | 0;
        d = b + 12 | 0;
        c[d >> 2] = (c[d >> 2] | 0) + 1;
        c[a >> 2] = b;
        return;
    }
    function pc(a, b) {
        a = a | 0;
        b = b | 0;
        return qc(a, b, 1) | 0;
    }
    function qc(b, e, f) {
        b = b | 0;
        e = e | 0;
        f = f | 0;
        var g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0;
        q = (f | 0) != 0;
        if (q ? (h = c[b >> 2] | 0, (h | 0) != (c[e >> 2] | 0)) : 0) {
            s = (h | 0) == 0 ? 1 : -1;
            return s | 0;
        }
        h = c[b + 4 >> 2] | 0;
        f = c[e + 4 >> 2] | 0;
        if ((h | 0) != (f | 0)) {
            if ((h | 0) > (f | 0))
                if (q)
                    return ((c[b >> 2] | 0) == 0 ? 1 : -1) | 0;
                else {
                    s = 1;
                    return s | 0;
                }
            if (!q) {
                s = -1;
                return s | 0;
            }
            s = (c[b >> 2] | 0) == 0 ? -1 : 1;
            return s | 0;
        }
        j = c[b + 8 >> 2] | 0;
        k = c[e + 8 >> 2] | 0;
        l = (j | 0) > (k | 0);
        f = (l ? k : j) + h | 0;
        h = c[b + 24 >> 2] | 0;
        e = c[e + 24 >> 2] | 0;
        a:
            do
                if ((f | 0) > 0) {
                    i = h;
                    while (1) {
                        h = a[i >> 0] | 0;
                        if (h << 24 >> 24 != (a[e >> 0] | 0)) {
                            m = h;
                            o = e;
                            break a;
                        }
                        i = i + 1 | 0;
                        e = e + 1 | 0;
                        h = f + -1 | 0;
                        if ((f | 0) > 1)
                            f = h;
                        else {
                            n = h;
                            g = i;
                            p = e;
                            s = 13;
                            break;
                        }
                    }
                } else {
                    n = f;
                    g = h;
                    p = e;
                    s = 13;
                }
            while (0);
        do
            if ((s | 0) == 13) {
                if (n | 0) {
                    m = a[g >> 0] | 0;
                    o = p;
                    break;
                }
                if ((j | 0) == (k | 0)) {
                    s = 0;
                    return s | 0;
                }
                if (l) {
                    f = j - k | 0;
                    if ((f | 0) <= 0) {
                        s = 0;
                        return s | 0;
                    }
                    while (1) {
                        if (a[g >> 0] | 0)
                            break;
                        if ((f | 0) > 1) {
                            f = f + -1 | 0;
                            g = g + 1 | 0;
                        } else {
                            r = 0;
                            s = 32;
                            break;
                        }
                    }
                    if ((s | 0) == 32)
                        return r | 0;
                    if (!q) {
                        s = 1;
                        return s | 0;
                    }
                    s = (c[b >> 2] | 0) == 0 ? 1 : -1;
                    return s | 0;
                } else {
                    f = k - j | 0;
                    if ((f | 0) > 0)
                        g = p;
                    else {
                        s = 0;
                        return s | 0;
                    }
                    while (1) {
                        if (a[g >> 0] | 0)
                            break;
                        if ((f | 0) > 1) {
                            f = f + -1 | 0;
                            g = g + 1 | 0;
                        } else {
                            r = 0;
                            s = 32;
                            break;
                        }
                    }
                    if ((s | 0) == 32)
                        return r | 0;
                    if (!q) {
                        s = -1;
                        return s | 0;
                    }
                    s = (c[b >> 2] | 0) == 0 ? -1 : 1;
                    return s | 0;
                }
            }
        while (0);
        if ((m & 255) > (d[o >> 0] | 0)) {
            if (!q) {
                s = 1;
                return s | 0;
            }
            s = (c[b >> 2] | 0) == 0 ? 1 : -1;
            return s | 0;
        } else {
            if (!q) {
                s = -1;
                return s | 0;
            }
            s = (c[b >> 2] | 0) == 0 ? -1 : 1;
            return s | 0;
        }
        return 0;
    }
    function rc(a) {
        a = a | 0;
        return (c[a >> 2] | 0) == 1 | 0;
    }
    function sc(b) {
        b = b | 0;
        var d = 0, e = 0;
        if ((c[5307] | 0) == (b | 0)) {
            e = 1;
            return e | 0;
        }
        d = (c[b + 8 >> 2] | 0) + (c[b + 4 >> 2] | 0) | 0;
        a:
            do
                if ((d | 0) > 0) {
                    e = d;
                    b = c[b + 24 >> 2] | 0;
                    while (1) {
                        if (a[b >> 0] | 0) {
                            d = e;
                            break a;
                        }
                        d = e + -1 | 0;
                        if ((e | 0) > 1) {
                            e = d;
                            b = b + 1 | 0;
                        } else
                            break;
                    }
                }
            while (0);
        e = (d | 0) == 0 & 1;
        return e | 0;
    }
    function* tc(b, d, e, f) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        var g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;
        a:
            do
                if ((c[b >> 2] | 0) == (c[d >> 2] | 0)) {
                    h = c[b + 4 >> 2] | 0;
                    g = c[d + 4 >> 2] | 0;
                    b:
                        do
                            if ((h | 0) == (g | 0)) {
                                n = c[b + 8 >> 2] | 0;
                                o = c[d + 8 >> 2] | 0;
                                p = (n | 0) > (o | 0);
                                g = (p ? o : n) + h | 0;
                                h = c[b + 24 >> 2] | 0;
                                j = c[d + 24 >> 2] | 0;
                                c:
                                    do
                                        if ((g | 0) > 0) {
                                            l = g;
                                            k = j;
                                            while (1) {
                                                g = a[h >> 0] | 0;
                                                j = a[k >> 0] | 0;
                                                if (g << 24 >> 24 != j << 24 >> 24) {
                                                    q = g;
                                                    r = j;
                                                    break c;
                                                }
                                                h = h + 1 | 0;
                                                j = k + 1 | 0;
                                                g = l + -1 | 0;
                                                if ((l | 0) > 1) {
                                                    l = g;
                                                    k = j;
                                                } else {
                                                    m = 8;
                                                    break;
                                                }
                                            }
                                        } else
                                            m = 8;
                                    while (0);
                                do
                                    if ((m | 0) == 8) {
                                        if (g | 0) {
                                            q = a[h >> 0] | 0;
                                            r = a[j >> 0] | 0;
                                            break;
                                        }
                                        do
                                            if ((n | 0) != (o | 0))
                                                if (p) {
                                                    g = n - o | 0;
                                                    if ((g | 0) <= 0)
                                                        break;
                                                    while (1) {
                                                        if (a[h >> 0] | 0) {
                                                            m = 27;
                                                            break b;
                                                        }
                                                        if ((g | 0) > 1) {
                                                            g = g + -1 | 0;
                                                            h = h + 1 | 0;
                                                        } else
                                                            break;
                                                    }
                                                } else {
                                                    g = o - n | 0;
                                                    if ((g | 0) > 0)
                                                        h = j;
                                                    else
                                                        break;
                                                    while (1) {
                                                        if (a[h >> 0] | 0) {
                                                            m = 19;
                                                            break b;
                                                        }
                                                        if ((g | 0) > 1) {
                                                            g = g + -1 | 0;
                                                            h = h + 1 | 0;
                                                        } else
                                                            break;
                                                    }
                                                }
                                        while (0);
                                        h = p ? n : o;
                                        h = (h | 0) < (f | 0) ? f : h;
                                        g = c[5310] | 0;
                                        if (!g) {
                                            g = Ud(28) | 0;
                                            if (!g)
                                                yield* Nb();
                                            else
                                                i = g;
                                        } else {
                                            c[5310] = c[g + 16 >> 2];
                                            i = g;
                                        }
                                        c[i >> 2] = 0;
                                        c[i + 4 >> 2] = 1;
                                        c[i + 8 >> 2] = h;
                                        c[i + 12 >> 2] = 1;
                                        g = h + 1 | 0;
                                        h = Ud(g) | 0;
                                        c[i + 20 >> 2] = h;
                                        if (!h)
                                            yield* Nb();
                                        else {
                                            d = h;
                                            f = i + 24 | 0;
                                            c[f >> 2] = d;
                                            $d(d | 0, 0, g | 0) | 0;
                                            $d(c[f >> 2] | 0, 0, g | 0) | 0;
                                            break a;
                                        }
                                    }
                                while (0);
                                if ((q & 255) > (r & 255))
                                    m = 27;
                                else
                                    m = 19;
                            } else if ((h | 0) > (g | 0))
                                m = 27;
                            else
                                m = 19;
                        while (0);
                    if ((m | 0) == 19) {
                        i = (yield* vc(d, b, f)) | 0;
                        c[i >> 2] = (c[d >> 2] | 0) == 0 & 1;
                        break;
                    } else if ((m | 0) == 27) {
                        i = (yield* vc(b, d, f)) | 0;
                        c[i >> 2] = c[b >> 2];
                        break;
                    }
                } else {
                    i = (yield* uc(b, d, f)) | 0;
                    c[i >> 2] = c[b >> 2];
                }
            while (0);
        g = c[e >> 2] | 0;
        if (!g) {
            c[e >> 2] = i;
            return;
        }
        d = g + 12 | 0;
        f = (c[d >> 2] | 0) + -1 | 0;
        c[d >> 2] = f;
        if (!f) {
            h = c[g + 20 >> 2] | 0;
            if (h) {
                Vd(h);
                g = c[e >> 2] | 0;
            }
            c[g + 16 >> 2] = c[5310];
            c[5310] = c[e >> 2];
        }
        c[e >> 2] = 0;
        c[e >> 2] = i;
        return;
    }
    function* uc(b, e, f) {
        b = b | 0;
        e = e | 0;
        f = f | 0;
        var g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0;
        i = b + 8 | 0;
        j = c[i >> 2] | 0;
        n = e + 8 | 0;
        k = c[n >> 2] | 0;
        o = (j | 0) > (k | 0) ? j : k;
        q = b + 4 | 0;
        l = c[q >> 2] | 0;
        r = e + 4 | 0;
        m = c[r >> 2] | 0;
        p = ((l | 0) > (m | 0) ? l : m) + 1 | 0;
        h = (o | 0) > (f | 0) ? o : f;
        g = c[5310] | 0;
        if (!g) {
            g = Ud(28) | 0;
            if (!g)
                yield* Nb();
            else
                u = g;
        } else {
            c[5310] = c[g + 16 >> 2];
            u = g;
        }
        c[u >> 2] = 0;
        t = u + 4 | 0;
        c[t >> 2] = p;
        c[u + 8 >> 2] = h;
        c[u + 12 >> 2] = 1;
        h = p + h | 0;
        g = Ud(h) | 0;
        c[u + 20 >> 2] = g;
        if (!g)
            yield* Nb();
        s = u + 24 | 0;
        c[s >> 2] = g;
        $d(g | 0, 0, h | 0) | 0;
        if ((o | 0) < (f | 0)) {
            k = (k | 0) > (j | 0) ? k : j;
            j = k + -1 - f | 0;
            $d((c[s >> 2] | 0) + (((m | 0) > (l | 0) ? m : l) + k + 1) | 0, 0, ((j | 0) > -2 ? j : -2) + f + 2 - k | 0) | 0;
        }
        k = c[i >> 2] | 0;
        l = c[n >> 2] | 0;
        f = c[b + 24 >> 2] | 0;
        m = c[q >> 2] | 0;
        i = f + m + k + -1 | 0;
        n = c[e + 24 >> 2] | 0;
        h = c[r >> 2] | 0;
        j = n + h + l + -1 | 0;
        g = (c[s >> 2] | 0) + o + p + -1 | 0;
        do
            if ((k | 0) != (l | 0)) {
                if ((k | 0) > (l | 0)) {
                    m = l + m + -1 | 0;
                    h = g;
                    while (1) {
                        g = h + -1 | 0;
                        a[h >> 0] = a[i >> 0] | 0;
                        k = k + -1 | 0;
                        if ((k | 0) <= (l | 0))
                            break;
                        else {
                            i = i + -1 | 0;
                            h = g;
                        }
                    }
                    h = l;
                    m = f + m | 0;
                    f = j;
                    break;
                }
                if ((l | 0) > (k | 0)) {
                    f = k + h + -1 | 0;
                    h = g;
                    while (1) {
                        g = h + -1 | 0;
                        a[h >> 0] = a[j >> 0] | 0;
                        l = l + -1 | 0;
                        if ((l | 0) <= (k | 0))
                            break;
                        else {
                            j = j + -1 | 0;
                            h = g;
                        }
                    }
                    h = k;
                    m = i;
                    l = k;
                    f = n + f | 0;
                } else {
                    h = k;
                    m = i;
                    f = j;
                }
            } else {
                h = k;
                m = i;
                l = k;
                f = j;
            }
        while (0);
        i = (c[q >> 2] | 0) + h | 0;
        j = (c[r >> 2] | 0) + l | 0;
        if ((i | 0) > 0 & (j | 0) > 0) {
            h = 0;
            n = i;
            i = f;
            while (1) {
                f = m + -1 | 0;
                l = i + -1 | 0;
                i = (d[m >> 0] | 0) + h + (d[i >> 0] | 0) | 0;
                k = (i & 254) >>> 0 > 9;
                h = k & 1;
                a[g >> 0] = k ? i + 246 | 0 : i;
                g = g + -1 | 0;
                i = n + -1 | 0;
                k = j + -1 | 0;
                if ((n | 0) > 1 & (j | 0) > 1) {
                    n = i;
                    m = f;
                    j = k;
                    i = l;
                } else {
                    m = f;
                    break;
                }
            }
        } else {
            h = 0;
            k = j;
            l = f;
        }
        j = (i | 0) == 0;
        i = j ? k : i;
        if ((i | 0) > 0) {
            j = j ? l : m;
            while (1) {
                r = (d[j >> 0] | 0) + h | 0;
                q = (r & 254) >>> 0 > 9;
                h = q & 1;
                a[g >> 0] = q ? r + 246 | 0 : r;
                g = g + -1 | 0;
                if ((i | 0) > 1) {
                    i = i + -1 | 0;
                    j = j + -1 | 0;
                } else
                    break;
            }
        }
        if ((h | 0) == 1)
            a[g >> 0] = (d[g >> 0] | 0) + 1;
        g = c[s >> 2] | 0;
        if (a[g >> 0] | 0)
            return u | 0;
        h = c[t >> 2] | 0;
        while (1) {
            if ((h | 0) <= 1) {
                g = 29;
                break;
            }
            g = g + 1 | 0;
            c[s >> 2] = g;
            h = h + -1 | 0;
            c[t >> 2] = h;
            if (a[g >> 0] | 0) {
                g = 29;
                break;
            }
        }
        if ((g | 0) == 29)
            return u | 0;
        return 0;
    }
    function* vc(b, e, f) {
        b = b | 0;
        e = e | 0;
        f = f | 0;
        var g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0;
        o = b + 4 | 0;
        i = c[o >> 2] | 0;
        q = e + 4 | 0;
        k = c[q >> 2] | 0;
        u = (i | 0) > (k | 0);
        t = u ? i : k;
        l = b + 8 | 0;
        m = c[l >> 2] | 0;
        p = e + 8 | 0;
        n = c[p >> 2] | 0;
        s = (m | 0) > (n | 0);
        r = s ? m : n;
        u = u ? k : i;
        s = s ? n : m;
        h = (r | 0) > (f | 0) ? r : f;
        g = c[5310] | 0;
        if (!g) {
            g = Ud(28) | 0;
            if (!g)
                yield* Nb();
            else
                x = g;
        } else {
            c[5310] = c[g + 16 >> 2];
            x = g;
        }
        c[x >> 2] = 0;
        w = x + 4 | 0;
        c[w >> 2] = t;
        c[x + 8 >> 2] = h;
        c[x + 12 >> 2] = 1;
        h = h + t | 0;
        g = Ud(h) | 0;
        c[x + 20 >> 2] = g;
        if (!g)
            yield* Nb();
        v = x + 24 | 0;
        c[v >> 2] = g;
        $d(g | 0, 0, h | 0) | 0;
        if ((r | 0) < (f | 0)) {
            n = (n | 0) > (m | 0) ? n : m;
            m = n + -1 - f | 0;
            $d((c[v >> 2] | 0) + (n + ((k | 0) > (i | 0) ? k : i)) | 0, 0, ((m | 0) > -2 ? m : -2) + f + 2 - n | 0) | 0;
        }
        k = c[l >> 2] | 0;
        h = (c[b + 24 >> 2] | 0) + (c[o >> 2] | 0) + k + -1 | 0;
        g = c[p >> 2] | 0;
        l = (c[e + 24 >> 2] | 0) + (c[q >> 2] | 0) + g + -1 | 0;
        i = (c[v >> 2] | 0) + t + r + -1 | 0;
        if ((k | 0) == (s | 0)) {
            k = g - s | 0;
            if ((k | 0) > 0) {
                g = 0;
                while (1) {
                    m = l + -1 | 0;
                    e = (d[l >> 0] | 0) + g | 0;
                    r = 0 - e | 0;
                    g = r >>> 31;
                    l = i + -1 | 0;
                    a[i >> 0] = e | 0 ? 10 - e | 0 : r;
                    if ((k | 0) > 1) {
                        k = k + -1 | 0;
                        i = l;
                        l = m;
                    } else {
                        i = l;
                        l = m;
                        break;
                    }
                }
            } else
                g = 0;
        } else {
            g = k - s | 0;
            if ((g | 0) > 0)
                while (1) {
                    m = h + -1 | 0;
                    k = i + -1 | 0;
                    a[i >> 0] = a[h >> 0] | 0;
                    if ((g | 0) > 1) {
                        g = g + -1 | 0;
                        i = k;
                        h = m;
                    } else {
                        g = 0;
                        i = k;
                        h = m;
                        break;
                    }
                }
            else
                g = 0;
        }
        n = s + u | 0;
        if ((n | 0) > 0) {
            m = 0;
            k = i;
            i = h;
            while (1) {
                h = i + -1 | 0;
                s = (d[i >> 0] | 0) - (d[l >> 0] | 0) - g | 0;
                g = s >>> 31;
                i = k + -1 | 0;
                a[k >> 0] = (s | 0) < 0 ? s + 10 | 0 : s;
                m = m + 1 | 0;
                if ((m | 0) >= (n | 0))
                    break;
                else {
                    k = i;
                    i = h;
                    l = l + -1 | 0;
                }
            }
        }
        if ((t | 0) != (u | 0) ? (j = t - u | 0, (j | 0) > 0) : 0)
            while (1) {
                g = (d[h >> 0] | 0) - g | 0;
                a[i >> 0] = (g | 0) < 0 ? g + 10 | 0 : g;
                if ((j | 0) > 1) {
                    g = g >>> 31;
                    j = j + -1 | 0;
                    i = i + -1 | 0;
                    h = h + -1 | 0;
                } else
                    break;
            }
        g = c[v >> 2] | 0;
        if (a[g >> 0] | 0)
            return x | 0;
        h = c[w >> 2] | 0;
        while (1) {
            if ((h | 0) <= 1) {
                g = 23;
                break;
            }
            g = g + 1 | 0;
            c[v >> 2] = g;
            h = h + -1 | 0;
            c[w >> 2] = h;
            if (a[g >> 0] | 0) {
                g = 23;
                break;
            }
        }
        if ((g | 0) == 23)
            return x | 0;
        return 0;
    }
    function* wc(b, d, e, f) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        var g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;
        a:
            do
                if ((c[b >> 2] | 0) != (c[d >> 2] | 0)) {
                    h = c[b + 4 >> 2] | 0;
                    g = c[d + 4 >> 2] | 0;
                    b:
                        do
                            if ((h | 0) == (g | 0)) {
                                n = c[b + 8 >> 2] | 0;
                                o = c[d + 8 >> 2] | 0;
                                p = (n | 0) > (o | 0);
                                g = (p ? o : n) + h | 0;
                                h = c[b + 24 >> 2] | 0;
                                j = c[d + 24 >> 2] | 0;
                                c:
                                    do
                                        if ((g | 0) > 0) {
                                            l = g;
                                            k = j;
                                            while (1) {
                                                g = a[h >> 0] | 0;
                                                j = a[k >> 0] | 0;
                                                if (g << 24 >> 24 != j << 24 >> 24) {
                                                    q = g;
                                                    r = j;
                                                    break c;
                                                }
                                                h = h + 1 | 0;
                                                j = k + 1 | 0;
                                                g = l + -1 | 0;
                                                if ((l | 0) > 1) {
                                                    l = g;
                                                    k = j;
                                                } else {
                                                    m = 8;
                                                    break;
                                                }
                                            }
                                        } else
                                            m = 8;
                                    while (0);
                                do
                                    if ((m | 0) == 8) {
                                        if (g | 0) {
                                            q = a[h >> 0] | 0;
                                            r = a[j >> 0] | 0;
                                            break;
                                        }
                                        do
                                            if ((n | 0) != (o | 0))
                                                if (p) {
                                                    g = n - o | 0;
                                                    if ((g | 0) <= 0)
                                                        break;
                                                    while (1) {
                                                        if (a[h >> 0] | 0) {
                                                            m = 27;
                                                            break b;
                                                        }
                                                        if ((g | 0) > 1) {
                                                            g = g + -1 | 0;
                                                            h = h + 1 | 0;
                                                        } else
                                                            break;
                                                    }
                                                } else {
                                                    g = o - n | 0;
                                                    if ((g | 0) > 0)
                                                        h = j;
                                                    else
                                                        break;
                                                    while (1) {
                                                        if (a[h >> 0] | 0) {
                                                            m = 19;
                                                            break b;
                                                        }
                                                        if ((g | 0) > 1) {
                                                            g = g + -1 | 0;
                                                            h = h + 1 | 0;
                                                        } else
                                                            break;
                                                    }
                                                }
                                        while (0);
                                        h = p ? n : o;
                                        h = (h | 0) < (f | 0) ? f : h;
                                        g = c[5310] | 0;
                                        if (!g) {
                                            g = Ud(28) | 0;
                                            if (!g)
                                                yield* Nb();
                                            else
                                                i = g;
                                        } else {
                                            c[5310] = c[g + 16 >> 2];
                                            i = g;
                                        }
                                        c[i >> 2] = 0;
                                        c[i + 4 >> 2] = 1;
                                        c[i + 8 >> 2] = h;
                                        c[i + 12 >> 2] = 1;
                                        g = h + 1 | 0;
                                        h = Ud(g) | 0;
                                        c[i + 20 >> 2] = h;
                                        if (!h)
                                            yield* Nb();
                                        else {
                                            d = h;
                                            f = i + 24 | 0;
                                            c[f >> 2] = d;
                                            $d(d | 0, 0, g | 0) | 0;
                                            $d(c[f >> 2] | 0, 0, g | 0) | 0;
                                            break a;
                                        }
                                    }
                                while (0);
                                if ((q & 255) > (r & 255))
                                    m = 27;
                                else
                                    m = 19;
                            } else if ((h | 0) > (g | 0))
                                m = 27;
                            else
                                m = 19;
                        while (0);
                    if ((m | 0) == 19) {
                        i = (yield* vc(d, b, f)) | 0;
                        c[i >> 2] = c[d >> 2];
                        break;
                    } else if ((m | 0) == 27) {
                        i = (yield* vc(b, d, f)) | 0;
                        c[i >> 2] = c[b >> 2];
                        break;
                    }
                } else {
                    i = (yield* uc(b, d, f)) | 0;
                    c[i >> 2] = c[b >> 2];
                }
            while (0);
        g = c[e >> 2] | 0;
        if (!g) {
            c[e >> 2] = i;
            return;
        }
        d = g + 12 | 0;
        f = (c[d >> 2] | 0) + -1 | 0;
        c[d >> 2] = f;
        if (!f) {
            h = c[g + 20 >> 2] | 0;
            if (h) {
                Vd(h);
                g = c[e >> 2] | 0;
            }
            c[g + 16 >> 2] = c[5310];
            c[5310] = c[e >> 2];
        }
        c[e >> 2] = 0;
        c[e >> 2] = i;
        return;
    }
    function* xc(b, d, e, f) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        var g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
        n = i;
        i = i + 16 | 0;
        k = n;
        g = c[b + 8 >> 2] | 0;
        o = g + (c[b + 4 >> 2] | 0) | 0;
        j = c[d + 8 >> 2] | 0;
        l = j + (c[d + 4 >> 2] | 0) | 0;
        h = j + g | 0;
        j = (g | 0) > (j | 0) ? g : j;
        j = (j | 0) < (f | 0) ? f : j;
        j = (h | 0) > (j | 0) ? j : h;
        yield* yc(b, o, d, l, k);
        k = c[k >> 2] | 0;
        c[k >> 2] = (c[b >> 2] | 0) != (c[d >> 2] | 0) & 1;
        d = c[k + 20 >> 2] | 0;
        g = k + 24 | 0;
        c[g >> 2] = d;
        f = o + 1 + l - h | 0;
        h = k + 4 | 0;
        c[h >> 2] = f;
        c[k + 8 >> 2] = j;
        b = a[d >> 0] | 0;
        l = k;
        a:
            do
                if (!(b << 24 >> 24))
                    do {
                        if ((f | 0) <= 1) {
                            b = 0;
                            break a;
                        }
                        d = d + 1 | 0;
                        c[g >> 2] = d;
                        f = f + -1 | 0;
                        c[h >> 2] = f;
                        b = a[d >> 0] | 0;
                    } while (b << 24 >> 24 == 0);
            while (0);
        if ((c[5307] | 0) != (k | 0)) {
            f = j + f | 0;
            b:
                do
                    if ((f | 0) > 0 & b << 24 >> 24 == 0)
                        while (1) {
                            d = d + 1 | 0;
                            b = f + -1 | 0;
                            if ((f | 0) <= 1) {
                                f = b;
                                break b;
                            }
                            if (a[d >> 0] | 0) {
                                f = b;
                                break;
                            } else
                                f = b;
                        }
                while (0);
            if (!f)
                m = 9;
        } else
            m = 9;
        if ((m | 0) == 9)
            c[k >> 2] = 0;
        f = c[e >> 2] | 0;
        if (!f) {
            c[e >> 2] = l;
            i = n;
            return;
        }
        m = f + 12 | 0;
        o = (c[m >> 2] | 0) + -1 | 0;
        c[m >> 2] = o;
        if (!o) {
            b = c[f + 20 >> 2] | 0;
            if (b) {
                Vd(b);
                f = c[e >> 2] | 0;
            }
            c[f + 16 >> 2] = c[5310];
            c[5310] = c[e >> 2];
        }
        c[e >> 2] = 0;
        c[e >> 2] = l;
        i = n;
        return;
    }
    function* yc(b, e, f, g, h) {
        b = b | 0;
        e = e | 0;
        f = f | 0;
        g = g | 0;
        h = h | 0;
        var j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0;
        N = i;
        i = i + 32 | 0;
        I = N + 16 | 0;
        J = N + 12 | 0;
        K = N + 8 | 0;
        L = N + 4 | 0;
        M = N;
        z = g + e | 0;
        if ((z | 0) >= 80 ? (H = 80 / 4 | 0, !((H | 0) > (e | 0) | (H | 0) > (g | 0))) : 0) {
            D = (((e | 0) > (g | 0) ? e : g) + 1 | 0) / 2 | 0;
            B = 0 - D | 0;
            if ((D | 0) > (e | 0)) {
                l = c[5307] | 0;
                k = l + 12 | 0;
                c[k >> 2] = (c[k >> 2] | 0) + 1;
                k = c[b + 24 >> 2] | 0;
                j = c[5310] | 0;
                if (!j) {
                    j = Ud(28) | 0;
                    if (!j)
                        yield* Nb();
                    else
                        m = j;
                } else {
                    c[5310] = c[j + 16 >> 2];
                    m = j;
                }
                c[m >> 2] = 0;
                c[m + 4 >> 2] = e;
                c[m + 8 >> 2] = 0;
                c[m + 12 >> 2] = 1;
                c[m + 20 >> 2] = 0;
                c[m + 24 >> 2] = k;
                H = m;
                F = l;
            } else {
                m = e - D | 0;
                k = b + 24 | 0;
                l = c[k >> 2] | 0;
                j = c[5310] | 0;
                if (!j) {
                    j = Ud(28) | 0;
                    if (!j)
                        yield* Nb();
                    else {
                        n = 0;
                        p = j;
                    }
                } else {
                    n = c[j + 16 >> 2] | 0;
                    c[5310] = n;
                    p = j;
                }
                c[p >> 2] = 0;
                c[p + 4 >> 2] = m;
                c[p + 8 >> 2] = 0;
                c[p + 12 >> 2] = 1;
                c[p + 20 >> 2] = 0;
                c[p + 24 >> 2] = l;
                k = (c[k >> 2] | 0) + e + B | 0;
                if (!n) {
                    j = Ud(28) | 0;
                    if (!j)
                        yield* Nb();
                    else
                        o = j;
                } else {
                    c[5310] = c[n + 16 >> 2];
                    o = n;
                }
                c[o >> 2] = 0;
                c[o + 4 >> 2] = D;
                c[o + 8 >> 2] = 0;
                c[o + 12 >> 2] = 1;
                c[o + 20 >> 2] = 0;
                c[o + 24 >> 2] = k;
                H = o;
                F = p;
            }
            E = F;
            G = H;
            if ((D | 0) > (g | 0)) {
                l = c[5307] | 0;
                k = l + 12 | 0;
                c[k >> 2] = (c[k >> 2] | 0) + 1;
                k = c[f + 24 >> 2] | 0;
                j = c[5310] | 0;
                if (!j) {
                    j = Ud(28) | 0;
                    if (!j)
                        yield* Nb();
                    else
                        q = j;
                } else {
                    c[5310] = c[j + 16 >> 2];
                    q = j;
                }
                c[q >> 2] = 0;
                c[q + 4 >> 2] = g;
                c[q + 8 >> 2] = 0;
                c[q + 12 >> 2] = 1;
                c[q + 20 >> 2] = 0;
                c[q + 24 >> 2] = k;
                s = q;
                t = l;
            } else {
                m = g - D | 0;
                k = f + 24 | 0;
                l = c[k >> 2] | 0;
                j = c[5310] | 0;
                if (!j) {
                    j = Ud(28) | 0;
                    if (!j)
                        yield* Nb();
                    else {
                        r = 0;
                        t = j;
                    }
                } else {
                    r = c[j + 16 >> 2] | 0;
                    c[5310] = r;
                    t = j;
                }
                c[t >> 2] = 0;
                c[t + 4 >> 2] = m;
                c[t + 8 >> 2] = 0;
                c[t + 12 >> 2] = 1;
                c[t + 20 >> 2] = 0;
                c[t + 24 >> 2] = l;
                k = (c[k >> 2] | 0) + g + B | 0;
                if (!r) {
                    j = Ud(28) | 0;
                    if (!j)
                        yield* Nb();
                    else
                        s = j;
                } else {
                    c[5310] = c[r + 16 >> 2];
                    s = r;
                }
                c[s >> 2] = 0;
                c[s + 4 >> 2] = D;
                c[s + 8 >> 2] = 0;
                c[s + 12 >> 2] = 1;
                c[s + 20 >> 2] = 0;
                c[s + 24 >> 2] = k;
            }
            A = t;
            C = s;
            r = F + 4 | 0;
            l = F + 24 | 0;
            j = c[l >> 2] | 0;
            a:
                do
                    if (!(a[j >> 0] | 0)) {
                        k = c[r >> 2] | 0;
                        do {
                            if ((k | 0) <= 1)
                                break a;
                            j = j + 1 | 0;
                            c[l >> 2] = j;
                            k = k + -1 | 0;
                            c[r >> 2] = k;
                        } while (!(a[j >> 0] | 0));
                    }
                while (0);
            g = H + 4 | 0;
            v = H + 24 | 0;
            j = c[v >> 2] | 0;
            b:
                do
                    if (!(a[j >> 0] | 0)) {
                        k = c[g >> 2] | 0;
                        do {
                            if ((k | 0) <= 1)
                                break b;
                            j = j + 1 | 0;
                            c[v >> 2] = j;
                            k = k + -1 | 0;
                            c[g >> 2] = k;
                        } while (!(a[j >> 0] | 0));
                    }
                while (0);
            q = t + 4 | 0;
            n = t + 24 | 0;
            j = c[n >> 2] | 0;
            c:
                do
                    if (!(a[j >> 0] | 0)) {
                        k = c[q >> 2] | 0;
                        do {
                            if ((k | 0) <= 1)
                                break c;
                            j = j + 1 | 0;
                            c[n >> 2] = j;
                            k = k + -1 | 0;
                            c[q >> 2] = k;
                        } while (!(a[j >> 0] | 0));
                    }
                while (0);
            u = s + 4 | 0;
            w = s + 24 | 0;
            j = c[w >> 2] | 0;
            d:
                do
                    if (!(a[j >> 0] | 0)) {
                        k = c[u >> 2] | 0;
                        do {
                            if ((k | 0) <= 1)
                                break d;
                            j = j + 1 | 0;
                            c[w >> 2] = j;
                            k = k + -1 | 0;
                            c[u >> 2] = k;
                        } while (!(a[j >> 0] | 0));
                    }
                while (0);
            m = c[5307] | 0;
            if ((m | 0) != (F | 0)) {
                j = (c[F + 8 >> 2] | 0) + (c[r >> 2] | 0) | 0;
                e:
                    do
                        if ((j | 0) > 0) {
                            l = c[l >> 2] | 0;
                            while (1) {
                                if (a[l >> 0] | 0)
                                    break e;
                                k = j + -1 | 0;
                                if ((j | 0) > 1) {
                                    j = k;
                                    l = l + 1 | 0;
                                } else {
                                    j = k;
                                    break;
                                }
                            }
                        }
                    while (0);
                if (j) {
                    if ((m | 0) == (t | 0))
                        j = 1;
                    else {
                        j = (c[t + 8 >> 2] | 0) + (c[q >> 2] | 0) | 0;
                        f:
                            do
                                if ((j | 0) > 0) {
                                    l = c[n >> 2] | 0;
                                    while (1) {
                                        if (a[l >> 0] | 0)
                                            break f;
                                        k = j + -1 | 0;
                                        if ((j | 0) > 1) {
                                            j = k;
                                            l = l + 1 | 0;
                                        } else {
                                            j = k;
                                            break;
                                        }
                                    }
                                }
                            while (0);
                        j = (j | 0) == 0 & 1;
                    }
                    f = j << 24 >> 24 != 0;
                } else
                    f = 1;
            } else
                f = 1;
            b = m + 12 | 0;
            k = c[b >> 2] | 0;
            c[L >> 2] = m;
            c[b >> 2] = k + 2;
            c[M >> 2] = m;
            yield* tc(F, H, L, 0);
            b = c[L >> 2] | 0;
            k = b + 4 | 0;
            o = c[k >> 2] | 0;
            yield* tc(s, t, M, 0);
            p = c[M >> 2] | 0;
            n = p + 4 | 0;
            e = c[n >> 2] | 0;
            if (f) {
                j = c[5307] | 0;
                r = j + 12 | 0;
                c[r >> 2] = (c[r >> 2] | 0) + 1;
                c[I >> 2] = j;
            } else {
                yield* yc(F, c[r >> 2] | 0, t, c[q >> 2] | 0, I);
                j = c[5307] | 0;
            }
            if ((j | 0) != (b | 0)) {
                k = (c[b + 8 >> 2] | 0) + (c[k >> 2] | 0) | 0;
                g:
                    do
                        if ((k | 0) > 0) {
                            l = k;
                            m = c[b + 24 >> 2] | 0;
                            while (1) {
                                if (a[m >> 0] | 0) {
                                    k = l;
                                    break g;
                                }
                                k = l + -1 | 0;
                                if ((l | 0) > 1) {
                                    l = k;
                                    m = m + 1 | 0;
                                } else
                                    break;
                            }
                        }
                    while (0);
                if (!((k | 0) == 0 | (j | 0) == (p | 0))) {
                    k = (c[p + 8 >> 2] | 0) + (c[n >> 2] | 0) | 0;
                    h:
                        do
                            if ((k | 0) > 0) {
                                l = k;
                                m = c[p + 24 >> 2] | 0;
                                while (1) {
                                    if (a[m >> 0] | 0) {
                                        k = l;
                                        break h;
                                    }
                                    k = l + -1 | 0;
                                    if ((l | 0) > 1) {
                                        l = k;
                                        m = m + 1 | 0;
                                    } else
                                        break;
                                }
                            }
                        while (0);
                    if (k) {
                        yield* yc(b, o, p, e, J);
                        j = c[5307] | 0;
                    } else
                        x = 91;
                } else
                    x = 91;
            } else
                x = 91;
            if ((x | 0) == 91) {
                r = j + 12 | 0;
                c[r >> 2] = (c[r >> 2] | 0) + 1;
                c[J >> 2] = j;
            }
            if ((j | 0) != (H | 0)) {
                b = c[g >> 2] | 0;
                j = (c[H + 8 >> 2] | 0) + b | 0;
                i:
                    do
                        if ((j | 0) > 0) {
                            l = c[v >> 2] | 0;
                            while (1) {
                                if (a[l >> 0] | 0) {
                                    k = j;
                                    break i;
                                }
                                k = j + -1 | 0;
                                if ((j | 0) > 1) {
                                    j = k;
                                    l = l + 1 | 0;
                                } else
                                    break;
                            }
                        } else
                            k = j;
                    while (0);
                j = c[5307] | 0;
                if (!((k | 0) == 0 | (j | 0) == (s | 0))) {
                    n = c[u >> 2] | 0;
                    k = (c[s + 8 >> 2] | 0) + n | 0;
                    j:
                        do
                            if ((k | 0) > 0) {
                                m = c[w >> 2] | 0;
                                while (1) {
                                    if (a[m >> 0] | 0)
                                        break j;
                                    l = k + -1 | 0;
                                    if ((k | 0) > 1) {
                                        k = l;
                                        m = m + 1 | 0;
                                    } else {
                                        k = l;
                                        break;
                                    }
                                }
                            }
                        while (0);
                    if (k)
                        yield* yc(H, b, s, n, K);
                    else
                        x = 105;
                } else
                    x = 105;
            } else {
                j = c[5307] | 0;
                x = 105;
            }
            if ((x | 0) == 105) {
                x = j + 12 | 0;
                c[x >> 2] = (c[x >> 2] | 0) + 1;
                c[K >> 2] = j;
            }
            k = z + 1 | 0;
            j = c[5310] | 0;
            if (!j) {
                j = Ud(28) | 0;
                if (!j)
                    yield* Nb();
                else
                    y = j;
            } else {
                c[5310] = c[j + 16 >> 2];
                y = j;
            }
            c[y >> 2] = 0;
            l = y + 4 | 0;
            c[l >> 2] = k;
            n = y + 8 | 0;
            c[n >> 2] = 0;
            c[y + 12 >> 2] = 1;
            j = Ud(k) | 0;
            c[y + 20 >> 2] = j;
            if (!j)
                yield* Nb();
            z = j;
            p = y + 24 | 0;
            c[p >> 2] = z;
            $d(z | 0, 0, k | 0) | 0;
            c[h >> 2] = y;
            if (f)
                j = y;
            else {
                e = c[I >> 2] | 0;
                b = D << 1;
                q = c[e + 4 >> 2] | 0;
                e = c[e + 24 >> 2] | 0;
                o = (a[e >> 0] | 0) == 0;
                m = (o << 31 >> 31) + q | 0;
                k = c[l >> 2] | 0;
                j = c[n >> 2] | 0;
                r = j + k | 0;
                if ((r | 0) < (m + b | 0))
                    la(18350, 18393, 706, 18402);
                p = c[p >> 2] | 0;
                l = p + k + j + (0 - b) + -1 | 0;
                if (!m)
                    j = 0;
                else {
                    n = ~b - q + (o & 1) | 0;
                    j = 0;
                    k = e + q | 0;
                    while (1) {
                        k = k + -1 | 0;
                        m = m + -1 | 0;
                        y = (d[k >> 0] | 0) + j + (d[l >> 0] | 0) | 0;
                        z = y & 255;
                        x = z << 24 >> 24 > 9;
                        j = x & 1;
                        a[l >> 0] = x ? y + 246 & 255 : z;
                        if (!m)
                            break;
                        else
                            l = l + -1 | 0;
                    }
                    l = p + (n + r) | 0;
                }
                k:
                    while (1) {
                        while (1) {
                            if (!j)
                                break k;
                            k = (d[l >> 0] | 0) + j | 0;
                            z = k & 255;
                            a[l >> 0] = z;
                            if (z << 24 >> 24 > 9)
                                break;
                            else
                                j = 0;
                        }
                        a[l >> 0] = k + 246;
                        l = l + -1 | 0;
                    }
                j = c[h >> 2] | 0;
                o = c[I >> 2] | 0;
                b = c[o + 4 >> 2] | 0;
                o = c[o + 24 >> 2] | 0;
                m = (a[o >> 0] | 0) == 0;
                n = (m << 31 >> 31) + b | 0;
                k = c[j + 4 >> 2] | 0;
                l = c[j + 8 >> 2] | 0;
                e = l + k | 0;
                if ((e | 0) < (n + D | 0))
                    la(18350, 18393, 706, 18402);
                p = c[j + 24 >> 2] | 0;
                l = p + k + l + B + -1 | 0;
                if (!n)
                    j = 0;
                else {
                    m = ~D - b + (m & 1) | 0;
                    j = 0;
                    k = o + b | 0;
                    while (1) {
                        k = k + -1 | 0;
                        n = n + -1 | 0;
                        y = (d[k >> 0] | 0) + j + (d[l >> 0] | 0) | 0;
                        z = y & 255;
                        x = z << 24 >> 24 > 9;
                        j = x & 1;
                        a[l >> 0] = x ? y + 246 & 255 : z;
                        if (!n)
                            break;
                        else
                            l = l + -1 | 0;
                    }
                    l = p + (m + e) | 0;
                }
                l:
                    while (1) {
                        while (1) {
                            if (!j)
                                break l;
                            k = (d[l >> 0] | 0) + j | 0;
                            z = k & 255;
                            a[l >> 0] = z;
                            if (z << 24 >> 24 > 9)
                                break;
                            else
                                j = 0;
                        }
                        a[l >> 0] = k + 246;
                        l = l + -1 | 0;
                    }
                j = c[h >> 2] | 0;
            }
            o = c[K >> 2] | 0;
            b = c[o + 4 >> 2] | 0;
            o = c[o + 24 >> 2] | 0;
            m = (a[o >> 0] | 0) == 0;
            n = (m << 31 >> 31) + b | 0;
            k = c[j + 4 >> 2] | 0;
            l = c[j + 8 >> 2] | 0;
            e = l + k | 0;
            if ((e | 0) < (n + D | 0))
                la(18350, 18393, 706, 18402);
            p = c[j + 24 >> 2] | 0;
            l = p + k + l + B + -1 | 0;
            if (!n)
                j = 0;
            else {
                m = ~D - b + (m & 1) | 0;
                j = 0;
                k = o + b | 0;
                while (1) {
                    k = k + -1 | 0;
                    n = n + -1 | 0;
                    y = (d[k >> 0] | 0) + j + (d[l >> 0] | 0) | 0;
                    z = y & 255;
                    x = z << 24 >> 24 > 9;
                    j = x & 1;
                    a[l >> 0] = x ? y + 246 & 255 : z;
                    if (!n)
                        break;
                    else
                        l = l + -1 | 0;
                }
                l = p + (m + e) | 0;
            }
            m:
                while (1) {
                    while (1) {
                        if (!j)
                            break m;
                        k = (d[l >> 0] | 0) + j | 0;
                        z = k & 255;
                        a[l >> 0] = z;
                        if (z << 24 >> 24 > 9)
                            break;
                        else
                            j = 0;
                    }
                    a[l >> 0] = k + 246;
                    l = l + -1 | 0;
                }
            j = c[h >> 2] | 0;
            o = c[K >> 2] | 0;
            b = c[o + 4 >> 2] | 0;
            o = c[o + 24 >> 2] | 0;
            m = (a[o >> 0] | 0) == 0;
            n = (m << 31 >> 31) + b | 0;
            k = c[j + 4 >> 2] | 0;
            l = c[j + 8 >> 2] | 0;
            e = l + k | 0;
            if ((e | 0) < (n | 0))
                la(18350, 18393, 706, 18402);
            p = c[j + 24 >> 2] | 0;
            l = p + k + l + -1 | 0;
            if (!n)
                j = 0;
            else {
                m = (m & 1) + ~b | 0;
                j = 0;
                k = o + b | 0;
                while (1) {
                    k = k + -1 | 0;
                    n = n + -1 | 0;
                    y = (d[k >> 0] | 0) + j + (d[l >> 0] | 0) | 0;
                    z = y & 255;
                    x = z << 24 >> 24 > 9;
                    j = x & 1;
                    a[l >> 0] = x ? y + 246 & 255 : z;
                    if (!n)
                        break;
                    else
                        l = l + -1 | 0;
                }
                l = p + (m + e) | 0;
            }
            n:
                while (1) {
                    while (1) {
                        if (!j)
                            break n;
                        k = (d[l >> 0] | 0) + j | 0;
                        z = k & 255;
                        a[l >> 0] = z;
                        if (z << 24 >> 24 > 9)
                            break;
                        else
                            j = 0;
                    }
                    a[l >> 0] = k + 246;
                    l = l + -1 | 0;
                }
            j = c[h >> 2] | 0;
            m = c[J >> 2] | 0;
            b = c[m + 4 >> 2] | 0;
            m = c[m + 24 >> 2] | 0;
            n = (a[m >> 0] | 0) == 0;
            o = n & 1;
            n = (n << 31 >> 31) + b | 0;
            k = c[j + 4 >> 2] | 0;
            l = c[j + 8 >> 2] | 0;
            e = l + k | 0;
            if ((e | 0) < (n + D | 0))
                la(18350, 18393, 706, 18402);
            p = c[j + 24 >> 2] | 0;
            l = p + k + l + B + -1 | 0;
            k = m + b + -1 | 0;
            m = n + -1 | 0;
            j = (n | 0) == 0;
            o:
                do
                    if ((c[c[L >> 2] >> 2] | 0) == (c[c[M >> 2] >> 2] | 0)) {
                        if (j)
                            j = 0;
                        else {
                            n = ~D - b + o | 0;
                            j = 0;
                            while (1) {
                                B = (d[k >> 0] | 0) + j + (d[l >> 0] | 0) | 0;
                                D = B & 255;
                                h = D << 24 >> 24 > 9;
                                j = h & 1;
                                a[l >> 0] = h ? B + 246 & 255 : D;
                                if (!m)
                                    break;
                                else {
                                    m = m + -1 | 0;
                                    l = l + -1 | 0;
                                    k = k + -1 | 0;
                                }
                            }
                            l = p + (n + e) | 0;
                        }
                        while (1) {
                            while (1) {
                                if (!j)
                                    break o;
                                k = (d[l >> 0] | 0) + j | 0;
                                D = k & 255;
                                a[l >> 0] = D;
                                if (D << 24 >> 24 > 9)
                                    break;
                                else
                                    j = 0;
                            }
                            a[l >> 0] = k + 246;
                            l = l + -1 | 0;
                        }
                    } else {
                        if (j)
                            j = 0;
                        else {
                            n = ~D - b + o | 0;
                            j = 0;
                            while (1) {
                                D = (d[l >> 0] | 0) - ((d[k >> 0] | 0) + j) | 0;
                                B = D & 128;
                                j = B >>> 7;
                                a[l >> 0] = (B | 0) == 0 ? D : D + 10 | 0;
                                if (!m)
                                    break;
                                else {
                                    m = m + -1 | 0;
                                    l = l + -1 | 0;
                                    k = k + -1 | 0;
                                }
                            }
                            l = p + (n + e) | 0;
                        }
                        while (1) {
                            while (1) {
                                if (!j)
                                    break o;
                                k = (d[l >> 0] | 0) - j | 0;
                                a[l >> 0] = k;
                                if (!(k & 128))
                                    j = 0;
                                else
                                    break;
                            }
                            a[l >> 0] = k + 10;
                            l = l + -1 | 0;
                        }
                    }
                while (0);
            do
                if (F | 0) {
                    B = F + 12 | 0;
                    D = (c[B >> 2] | 0) + -1 | 0;
                    c[B >> 2] = D;
                    if (D | 0)
                        break;
                    j = c[F + 20 >> 2] | 0;
                    if (j | 0)
                        Vd(j);
                    c[F + 16 >> 2] = c[5310];
                    c[5310] = E;
                }
            while (0);
            do
                if (H | 0) {
                    E = H + 12 | 0;
                    F = (c[E >> 2] | 0) + -1 | 0;
                    c[E >> 2] = F;
                    if (F | 0)
                        break;
                    j = c[H + 20 >> 2] | 0;
                    if (j | 0)
                        Vd(j);
                    c[H + 16 >> 2] = c[5310];
                    c[5310] = G;
                }
            while (0);
            do
                if (t | 0) {
                    G = t + 12 | 0;
                    H = (c[G >> 2] | 0) + -1 | 0;
                    c[G >> 2] = H;
                    if (H | 0)
                        break;
                    j = c[t + 20 >> 2] | 0;
                    if (j | 0)
                        Vd(j);
                    c[t + 16 >> 2] = c[5310];
                    c[5310] = A;
                }
            while (0);
            j = c[I >> 2] | 0;
            k = j;
            if (j | 0) {
                G = j + 12 | 0;
                H = (c[G >> 2] | 0) + -1 | 0;
                c[G >> 2] = H;
                if (!H) {
                    l = c[j + 20 >> 2] | 0;
                    if (l | 0)
                        Vd(l);
                    c[j + 16 >> 2] = c[5310];
                    c[5310] = k;
                }
                c[I >> 2] = 0;
            }
            do
                if (s | 0) {
                    H = s + 12 | 0;
                    I = (c[H >> 2] | 0) + -1 | 0;
                    c[H >> 2] = I;
                    if (I | 0)
                        break;
                    j = c[s + 20 >> 2] | 0;
                    if (j | 0)
                        Vd(j);
                    c[s + 16 >> 2] = c[5310];
                    c[5310] = C;
                }
            while (0);
            j = c[J >> 2] | 0;
            k = j;
            if (j | 0) {
                H = j + 12 | 0;
                I = (c[H >> 2] | 0) + -1 | 0;
                c[H >> 2] = I;
                if (!I) {
                    l = c[j + 20 >> 2] | 0;
                    if (l | 0)
                        Vd(l);
                    c[j + 16 >> 2] = c[5310];
                    c[5310] = k;
                }
                c[J >> 2] = 0;
            }
            j = c[K >> 2] | 0;
            k = j;
            if (j | 0) {
                I = j + 12 | 0;
                J = (c[I >> 2] | 0) + -1 | 0;
                c[I >> 2] = J;
                if (!J) {
                    l = c[j + 20 >> 2] | 0;
                    if (l | 0)
                        Vd(l);
                    c[j + 16 >> 2] = c[5310];
                    c[5310] = k;
                }
                c[K >> 2] = 0;
            }
            j = c[L >> 2] | 0;
            k = j;
            if (j | 0) {
                J = j + 12 | 0;
                K = (c[J >> 2] | 0) + -1 | 0;
                c[J >> 2] = K;
                if (!K) {
                    l = c[j + 20 >> 2] | 0;
                    if (l | 0)
                        Vd(l);
                    c[j + 16 >> 2] = c[5310];
                    c[5310] = k;
                }
                c[L >> 2] = 0;
            }
            j = c[M >> 2] | 0;
            k = j;
            if (!j) {
                i = N;
                return;
            }
            K = j + 12 | 0;
            L = (c[K >> 2] | 0) + -1 | 0;
            c[K >> 2] = L;
            if (!L) {
                l = c[j + 20 >> 2] | 0;
                if (l | 0)
                    Vd(l);
                c[j + 16 >> 2] = c[5310];
                c[5310] = k;
            }
            c[M >> 2] = 0;
            i = N;
            return;
        }
        m = z + 1 | 0;
        j = c[5310] | 0;
        if (!j) {
            j = Ud(28) | 0;
            if (!j)
                yield* Nb();
            else
                k = j;
        } else {
            c[5310] = c[j + 16 >> 2];
            k = j;
        }
        c[k >> 2] = 0;
        c[k + 4 >> 2] = m;
        c[k + 8 >> 2] = 0;
        c[k + 12 >> 2] = 1;
        j = Ud(m) | 0;
        c[k + 20 >> 2] = j;
        if (!j)
            yield* Nb();
        r = j;
        j = k + 24 | 0;
        c[j >> 2] = r;
        $d(r | 0, 0, m | 0) | 0;
        c[h >> 2] = k;
        r = b + 24 | 0;
        l = c[r >> 2] | 0;
        q = l + e + -1 | 0;
        e = (c[f + 24 >> 2] | 0) + g + -1 | 0;
        k = c[j >> 2] | 0;
        j = k + m + -1 | 0;
        if ((z | 0) > 0) {
            p = g + -1 | 0;
            b = l;
            l = 0;
            o = j;
            j = 0;
            while (1) {
                m = l - g | 0;
                m = q + ((m | 0) < -1 ? 0 : ~m) | 0;
                n = 0 - ((l | 0) > (p | 0) ? p : l) | 0;
                if (!((n | 0) > 0 | m >>> 0 < b >>> 0)) {
                    n = e + n | 0;
                    do {
                        M = m;
                        m = m + -1 | 0;
                        j = (_(d[n >> 0] | 0, d[M >> 0] | 0) | 0) + j | 0;
                        n = n + 1 | 0;
                    } while (!(m >>> 0 < b >>> 0 | n >>> 0 > e >>> 0));
                }
                a[o >> 0] = (j | 0) % 10 | 0;
                j = (j | 0) / 10 | 0;
                l = l + 1 | 0;
                if ((l | 0) == (z | 0))
                    break;
                b = c[r >> 2] | 0;
                o = o + -1 | 0;
            }
            j = j & 255;
        } else {
            k = j;
            j = 0;
        }
        a[k >> 0] = j;
        i = N;
        return;
    }
    function* zc(b, e, f, g) {
        b = b | 0;
        e = e | 0;
        f = f | 0;
        g = g | 0;
        var h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0;
        if ((c[5307] | 0) == (e | 0)) {
            K = -1;
            return K | 0;
        }
        o = e + 4 | 0;
        h = c[o >> 2] | 0;
        m = e + 8 | 0;
        j = c[m >> 2] | 0;
        i = j + h | 0;
        a:
            do
                if ((i | 0) > 0) {
                    k = i;
                    l = c[e + 24 >> 2] | 0;
                    while (1) {
                        if (a[l >> 0] | 0) {
                            i = k;
                            break a;
                        }
                        i = k + -1 | 0;
                        if ((k | 0) > 1) {
                            k = i;
                            l = l + 1 | 0;
                        } else
                            break;
                    }
                }
            while (0);
        if (!i) {
            K = -1;
            return K | 0;
        }
        do
            if (!j) {
                if ((h | 0) == 1)
                    if ((a[c[e + 24 >> 2] >> 0] | 0) == 1) {
                        j = b + 4 | 0;
                        i = c[j >> 2] | 0;
                        h = c[5310] | 0;
                        if (!h) {
                            h = Ud(28) | 0;
                            if (!h)
                                yield* Nb();
                            else
                                n = h;
                        } else {
                            c[5310] = c[h + 16 >> 2];
                            n = h;
                        }
                        c[n >> 2] = 0;
                        c[n + 4 >> 2] = i;
                        c[n + 8 >> 2] = g;
                        c[n + 12 >> 2] = 1;
                        h = i + g | 0;
                        i = Ud(h) | 0;
                        c[n + 20 >> 2] = i;
                        if (!i)
                            yield* Nb();
                        H = i;
                        I = n + 24 | 0;
                        c[I >> 2] = H;
                        $d(H | 0, 0, h | 0) | 0;
                        c[n >> 2] = (c[b >> 2] | 0) != (c[e >> 2] | 0) & 1;
                        $d((c[I >> 2] | 0) + (c[j >> 2] | 0) | 0, 0, g | 0) | 0;
                        h = c[b + 8 >> 2] | 0;
                        de(c[I >> 2] | 0, c[b + 24 >> 2] | 0, ((h | 0) > (g | 0) ? g : h) + (c[j >> 2] | 0) | 0) | 0;
                        h = c[f >> 2] | 0;
                        if (h | 0) {
                            H = h + 12 | 0;
                            I = (c[H >> 2] | 0) + -1 | 0;
                            c[H >> 2] = I;
                            if (!I) {
                                i = c[h + 20 >> 2] | 0;
                                if (i) {
                                    Vd(i);
                                    h = c[f >> 2] | 0;
                                }
                                c[h + 16 >> 2] = c[5310];
                                c[5310] = c[f >> 2];
                            }
                            c[f >> 2] = 0;
                        }
                        c[f >> 2] = n;
                        j = c[m >> 2] | 0;
                        h = c[o >> 2] | 0;
                        i = e + 24 | 0;
                        if (!j) {
                            j = 0;
                            break;
                        } else {
                            J = 25;
                            break;
                        }
                    } else
                        h = 1;
                i = e + 24 | 0;
                j = 0;
            } else {
                i = e + 24 | 0;
                J = 25;
            }
        while (0);
        b:
            do
                if ((J | 0) == 25) {
                    k = (c[i >> 2] | 0) + h + j | 0;
                    while (1) {
                        k = k + -1 | 0;
                        if (a[k >> 0] | 0)
                            break b;
                        j = j + -1 | 0;
                        if (!j) {
                            j = 0;
                            break;
                        }
                    }
                }
            while (0);
        n = c[b + 4 >> 2] | 0;
        B = n + j | 0;
        o = c[b + 8 >> 2] | 0;
        p = o - j | 0;
        p = (p | 0) < (g | 0) ? g - p | 0 : 0;
        I = Ud(n + 2 + o + p | 0) | 0;
        if (!I)
            yield* Nb();
        $d(I | 0, 0, p + 2 + n + o | 0) | 0;
        de(I + 1 | 0, c[b + 24 >> 2] | 0, o + n | 0) | 0;
        h = h + j | 0;
        H = Ud(h + 1 | 0) | 0;
        if (!H)
            yield* Nb();
        de(H | 0, c[i >> 2] | 0, h | 0) | 0;
        a[H + h >> 0] = 0;
        if (!(a[H >> 0] | 0)) {
            i = H;
            do {
                i = i + 1 | 0;
                h = h + -1 | 0;
            } while ((a[i >> 0] | 0) == 0);
        } else
            i = H;
        q = B + g | 0;
        if (q >>> 0 < h >>> 0) {
            j = g;
            m = 1;
        } else {
            j = B >>> 0 < h >>> 0 ? g : q - h | 0;
            m = 0;
        }
        l = j + 1 | 0;
        k = l - g | 0;
        j = c[5310] | 0;
        if (!j) {
            j = Ud(28) | 0;
            if (!j)
                yield* Nb();
            else
                K = j;
        } else {
            c[5310] = c[j + 16 >> 2];
            K = j;
        }
        c[K >> 2] = 0;
        G = K + 4 | 0;
        c[G >> 2] = k;
        D = K + 8 | 0;
        c[D >> 2] = g;
        c[K + 12 >> 2] = 1;
        j = Ud(l) | 0;
        c[K + 20 >> 2] = j;
        if (!j)
            yield* Nb();
        C = j;
        E = K + 24 | 0;
        c[E >> 2] = C;
        $d(C | 0, 0, l | 0) | 0;
        $d(c[E >> 2] | 0, 0, l | 0) | 0;
        C = h + 1 | 0;
        F = Ud(C) | 0;
        if (!F)
            yield* Nb();
        if (!(m << 24 >> 24)) {
            g = 10 / (((d[i >> 0] | 0) + 1 | 0) >>> 0) | 0;
            c:
                do
                    if ((g | 0) != 1) {
                        j = n + 1 + o + p | 0;
                        d:
                            do
                                if (!g)
                                    $d(I | 0, 0, j | 0) | 0;
                                else {
                                    if ((j | 0) > 0) {
                                        m = I + j | 0;
                                        k = 0;
                                        n = m;
                                        m = m + -1 | 0;
                                        while (1) {
                                            n = n + -1 | 0;
                                            l = (_(d[n >> 0] | 0, g) | 0) + k | 0;
                                            a[m >> 0] = (l | 0) % 10 | 0;
                                            k = (l | 0) / 10 | 0;
                                            m = m + -1 | 0;
                                            if ((j | 0) <= 1) {
                                                j = m;
                                                break;
                                            } else
                                                j = j + -1 | 0;
                                        }
                                        if ((l + 9 | 0) >>> 0 >= 19)
                                            a[j >> 0] = k;
                                    }
                                    switch (g | 0) {
                                    case 1:
                                        break c;
                                    case 0:
                                        break d;
                                    default: {
                                        }
                                    }
                                    if ((h | 0) <= 0)
                                        break c;
                                    j = i + h | 0;
                                    m = h;
                                    k = 0;
                                    n = j;
                                    j = j + -1 | 0;
                                    while (1) {
                                        n = n + -1 | 0;
                                        l = (_(d[n >> 0] | 0, g) | 0) + k | 0;
                                        a[j >> 0] = (l | 0) % 10 | 0;
                                        k = (l | 0) / 10 | 0;
                                        j = j + -1 | 0;
                                        if ((m | 0) <= 1)
                                            break;
                                        else
                                            m = m + -1 | 0;
                                    }
                                    if ((l + 9 | 0) >>> 0 < 19)
                                        break c;
                                    a[j >> 0] = k;
                                    break c;
                                }
                            while (0);
                        $d(i | 0, 0, h | 0) | 0;
                    }
                while (0);
            g = c[E >> 2] | 0;
            r = q - h | 0;
            s = i + 1 | 0;
            t = F + 1 | 0;
            u = F + h | 0;
            v = (C | 0) == 0;
            w = i + h | 0;
            x = (h | 0) == 0;
            y = (h | 0) > 0;
            A = t + h + -1 | 0;
            z = I;
            o = 0;
            q = B >>> 0 < h >>> 0 ? g + h + (0 - B) | 0 : g;
            while (1) {
                k = a[i >> 0] | 0;
                p = I + o | 0;
                j = a[p >> 0] | 0;
                if (k << 24 >> 24 == j << 24 >> 24) {
                    B = o + 1 | 0;
                    l = (j & 255) * 10 | 0;
                    m = k & 255;
                    g = B;
                    k = a[I + B >> 0] | 0;
                    j = 9;
                } else {
                    B = k & 255;
                    j = (j & 255) * 10 | 0;
                    g = o + 1 | 0;
                    n = a[I + g >> 0] | 0;
                    l = j;
                    m = B;
                    k = n;
                    j = (((n & 255) + j | 0) >>> 0) / (B >>> 0) | 0;
                }
                n = d[s >> 0] | 0;
                L = _(n, j) | 0;
                l = l + (k & 255) | 0;
                B = (l - (_(m, j) | 0) | 0) * 10 | 0;
                k = d[I + (o + 2) >> 0] | 0;
                if (L >>> 0 > (B + k | 0) >>> 0) {
                    L = j + -1 | 0;
                    B = (_(n, L) | 0) >>> 0 > (((l - (_(m, L) | 0) | 0) * 10 | 0) + k | 0) >>> 0;
                    j = B ? j + -2 | 0 : L;
                }
                do
                    if (!j)
                        j = 0;
                    else {
                        a[F >> 0] = 0;
                        do
                            if ((j | 0) == 1)
                                de(t | 0, i | 0, h | 0) | 0;
                            else {
                                if (y) {
                                    n = h;
                                    l = 0;
                                    o = w;
                                    k = A;
                                } else
                                    break;
                                while (1) {
                                    o = o + -1 | 0;
                                    m = (_(d[o >> 0] | 0, j) | 0) + l | 0;
                                    a[k >> 0] = (m | 0) % 10 | 0;
                                    l = (m | 0) / 10 | 0;
                                    k = k + -1 | 0;
                                    if ((n | 0) <= 1)
                                        break;
                                    else
                                        n = n + -1 | 0;
                                }
                                if ((m + 9 | 0) >>> 0 < 19)
                                    break;
                                a[k >> 0] = l;
                            }
                        while (0);
                        l = p + h | 0;
                        if (v)
                            break;
                        else {
                            k = 0;
                            m = 0;
                            n = l;
                            o = u;
                        }
                        while (1) {
                            L = (d[n >> 0] | 0) - (d[o >> 0] | 0) - k | 0;
                            k = L >>> 31;
                            a[n >> 0] = (L | 0) < 0 ? L + 10 | 0 : L;
                            m = m + 1 | 0;
                            if ((m | 0) == (C | 0))
                                break;
                            else {
                                n = n + -1 | 0;
                                o = o + -1 | 0;
                            }
                        }
                        if ((k | 0) != 1)
                            break;
                        j = j + -1 | 0;
                        if (x)
                            break;
                        else {
                            k = 0;
                            n = 0;
                            m = w;
                        }
                        while (1) {
                            m = m + -1 | 0;
                            L = (d[l >> 0] | 0) + k + (d[m >> 0] | 0) | 0;
                            k = L >>> 0 > 9;
                            a[l >> 0] = k ? L + 246 | 0 : L;
                            n = n + 1 | 0;
                            if ((n | 0) == (h | 0))
                                break;
                            else {
                                k = k & 1;
                                l = l + -1 | 0;
                            }
                        }
                        if (!k)
                            break;
                        a[z >> 0] = (((d[z >> 0] | 0) + 1 | 0) >>> 0) % 10 | 0;
                    }
                while (0);
                a[q >> 0] = j;
                if (g >>> 0 > r >>> 0)
                    break;
                else {
                    z = z + 1 | 0;
                    o = g;
                    q = q + 1 | 0;
                }
            }
        }
        c[K >> 2] = (c[b >> 2] | 0) != (c[e >> 2] | 0) & 1;
        if ((c[5307] | 0) != (K | 0)) {
            h = (c[D >> 2] | 0) + (c[G >> 2] | 0) | 0;
            e:
                do
                    if ((h | 0) > 0) {
                        i = h;
                        j = c[E >> 2] | 0;
                        while (1) {
                            if (a[j >> 0] | 0) {
                                h = i;
                                break e;
                            }
                            h = i + -1 | 0;
                            if ((i | 0) > 1) {
                                i = h;
                                j = j + 1 | 0;
                            } else
                                break;
                        }
                    }
                while (0);
            if (!h)
                J = 87;
        } else
            J = 87;
        if ((J | 0) == 87)
            c[K >> 2] = 0;
        h = c[E >> 2] | 0;
        f:
            do
                if (!(a[h >> 0] | 0)) {
                    i = c[G >> 2] | 0;
                    do {
                        if ((i | 0) <= 1)
                            break f;
                        h = h + 1 | 0;
                        c[E >> 2] = h;
                        i = i + -1 | 0;
                        c[G >> 2] = i;
                    } while (!(a[h >> 0] | 0));
                }
            while (0);
        h = c[f >> 2] | 0;
        if (h | 0) {
            J = h + 12 | 0;
            L = (c[J >> 2] | 0) + -1 | 0;
            c[J >> 2] = L;
            if (!L) {
                i = c[h + 20 >> 2] | 0;
                if (i) {
                    Vd(i);
                    h = c[f >> 2] | 0;
                }
                c[h + 16 >> 2] = c[5310];
                c[5310] = c[f >> 2];
            }
            c[f >> 2] = 0;
        }
        c[f >> 2] = K;
        Vd(F);
        Vd(I);
        Vd(H);
        L = 0;
        return L | 0;
    }
    function* Ac(b, d, e, f, g) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        g = g | 0;
        var h = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
        o = i;
        i = i + 16 | 0;
        n = o;
        m = c[5307] | 0;
        if ((m | 0) == (d | 0)) {
            e = -1;
            i = o;
            return e | 0;
        }
        l = c[d + 8 >> 2] | 0;
        h = l + (c[d + 4 >> 2] | 0) | 0;
        a:
            do
                if ((h | 0) > 0) {
                    j = h;
                    k = c[d + 24 >> 2] | 0;
                    while (1) {
                        if (a[k >> 0] | 0) {
                            h = j;
                            break a;
                        }
                        h = j + -1 | 0;
                        if ((j | 0) > 1) {
                            j = h;
                            k = k + 1 | 0;
                        } else
                            break;
                    }
                }
            while (0);
        if (!h) {
            e = -1;
            i = o;
            return e | 0;
        }
        h = c[b + 8 >> 2] | 0;
        j = l + g | 0;
        j = (h | 0) > (j | 0) ? h : j;
        l = m + 12 | 0;
        c[l >> 2] = (c[l >> 2] | 0) + 1;
        c[n >> 2] = m;
        (yield* zc(b, d, n, g)) | 0;
        l = (e | 0) != 0;
        h = c[n >> 2] | 0;
        if (l) {
            m = h + 12 | 0;
            c[m >> 2] = (c[m >> 2] | 0) + 1;
            m = h;
        } else
            m = 0;
        yield* xc(h, d, n, j);
        k = c[n >> 2] | 0;
        yield* tc(b, k, f, j);
        h = k;
        if (k | 0) {
            b = k + 12 | 0;
            f = (c[b >> 2] | 0) + -1 | 0;
            c[b >> 2] = f;
            if (!f) {
                j = c[k + 20 >> 2] | 0;
                if (j | 0)
                    Vd(j);
                c[k + 16 >> 2] = c[5310];
                c[5310] = h;
            }
            c[n >> 2] = 0;
        }
        if (!l) {
            e = 0;
            i = o;
            return e | 0;
        }
        h = c[e >> 2] | 0;
        if (h | 0) {
            f = h + 12 | 0;
            n = (c[f >> 2] | 0) + -1 | 0;
            c[f >> 2] = n;
            if (!n) {
                j = c[h + 20 >> 2] | 0;
                if (j) {
                    Vd(j);
                    h = c[e >> 2] | 0;
                }
                c[h + 16 >> 2] = c[5310];
                c[5310] = c[e >> 2];
            }
            c[e >> 2] = 0;
        }
        c[e >> 2] = m;
        e = 0;
        i = o;
        return e | 0;
    }
    function* Bc(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        return (yield* Ac(a, b, 0, c, d)) | 0;
    }
    function* Cc(b, e, f, g) {
        b = b | 0;
        e = e | 0;
        f = f | 0;
        g = g | 0;
        var h = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0;
        q = i;
        i = i + 32 | 0;
        n = q + 8 | 0;
        o = q + 16 | 0;
        p = q + 12 | 0;
        if (c[e + 8 >> 2] | 0)
            yield* gc(18419, q);
        m = c[e + 4 >> 2] | 0;
        if ((m | 0) > 0) {
            k = m;
            l = c[e + 24 >> 2] | 0;
            j = 0;
            while (1) {
                j = (d[l >> 0] | 0) + (j * 10 | 0) | 0;
                h = (k | 0) > 1;
                if (h & (j | 0) < 214748365) {
                    k = k + -1 | 0;
                    l = l + 1 | 0;
                } else
                    break;
            }
            h = h ? 0 : j;
        } else
            h = 0;
        j = (h | 0) < 0 ? 0 : h;
        j = (c[e >> 2] | 0) == 0 ? j : 0 - j | 0;
        if (!j) {
            if (!((m | 0) <= 1 ? !(a[c[e + 24 >> 2] >> 0] | 0) : 0))
                yield* fc(18446, n);
            h = c[f >> 2] | 0;
            if (h | 0) {
                o = h + 12 | 0;
                p = (c[o >> 2] | 0) + -1 | 0;
                c[o >> 2] = p;
                if (!p) {
                    j = c[h + 20 >> 2] | 0;
                    if (j) {
                        Vd(j);
                        h = c[f >> 2] | 0;
                    }
                    c[h + 16 >> 2] = c[5310];
                    c[5310] = c[f >> 2];
                }
                c[f >> 2] = 0;
            }
            p = c[5308] | 0;
            o = p + 12 | 0;
            c[o >> 2] = (c[o >> 2] | 0) + 1;
            c[f >> 2] = p;
            i = q;
            return;
        }
        if ((j | 0) < 0) {
            h = c[b + 8 >> 2] | 0;
            j = 0 - j | 0;
            m = 1;
        } else {
            h = c[b + 8 >> 2] | 0;
            n = _(h, j) | 0;
            g = (h | 0) < (g | 0) ? g : h;
            m = 0;
            g = (n | 0) > (g | 0) ? g : n;
        }
        n = b + 12 | 0;
        k = (c[n >> 2] | 0) + 1 | 0;
        c[n >> 2] = k;
        c[p >> 2] = b;
        if (!(j & 1)) {
            h = h << 1;
            yield* xc(b, b, p, h);
            j = j >> 1;
            if (!(j & 1))
                do {
                    b = c[p >> 2] | 0;
                    h = h << 1;
                    yield* xc(b, b, p, h);
                    j = j >> 1;
                } while ((j & 1 | 0) == 0);
            k = c[p >> 2] | 0;
            l = k;
            k = c[k + 12 >> 2] | 0;
        } else
            l = b;
        c[l + 12 >> 2] = k + 1;
        c[o >> 2] = l;
        k = h;
        a:
            while (1) {
                do {
                    j = j >> 1;
                    if ((j | 0) <= 0)
                        break a;
                    h = h << 1;
                    b = c[p >> 2] | 0;
                    yield* xc(b, b, p, h);
                } while ((j & 1 | 0) == 0);
                b = h + k | 0;
                yield* xc(c[o >> 2] | 0, c[p >> 2] | 0, o, b);
                k = b;
            }
        if (!(m << 24 >> 24)) {
            h = c[f >> 2] | 0;
            if (h | 0) {
                n = h + 12 | 0;
                b = (c[n >> 2] | 0) + -1 | 0;
                c[n >> 2] = b;
                if (!b) {
                    j = c[h + 20 >> 2] | 0;
                    if (j) {
                        Vd(j);
                        h = c[f >> 2] | 0;
                    }
                    c[h + 16 >> 2] = c[5310];
                    c[5310] = c[f >> 2];
                }
                c[f >> 2] = 0;
            }
            h = c[o >> 2] | 0;
            c[f >> 2] = h;
            h = h + 8 | 0;
            if ((c[h >> 2] | 0) > (g | 0))
                c[h >> 2] = g;
        } else {
            k = c[o >> 2] | 0;
            (yield* zc(c[5308] | 0, k, f, g)) | 0;
            h = k;
            if (k | 0) {
                b = k + 12 | 0;
                f = (c[b >> 2] | 0) + -1 | 0;
                c[b >> 2] = f;
                if (!f) {
                    j = c[k + 20 >> 2] | 0;
                    if (j | 0)
                        Vd(j);
                    c[k + 16 >> 2] = c[5310];
                    c[5310] = h;
                }
                c[o >> 2] = 0;
            }
        }
        h = c[p >> 2] | 0;
        j = h;
        if (!h) {
            i = q;
            return;
        }
        o = h + 12 | 0;
        f = (c[o >> 2] | 0) + -1 | 0;
        c[o >> 2] = f;
        if (!f) {
            k = c[h + 20 >> 2] | 0;
            if (k | 0)
                Vd(k);
            c[h + 16 >> 2] = c[5310];
            c[5310] = j;
        }
        c[p >> 2] = 0;
        i = q;
        return;
    }
    function Dc(a) {
        a = a | 0;
        var b = 0, e = 0, f = 0, g = 0;
        b = c[a + 4 >> 2] | 0;
        if ((b | 0) > 0) {
            g = c[a + 24 >> 2] | 0;
            e = 0;
            while (1) {
                e = (d[g >> 0] | 0) + (e * 10 | 0) | 0;
                f = (b | 0) > 1;
                if ((e | 0) < 214748365 & f) {
                    b = b + -1 | 0;
                    g = g + 1 | 0;
                } else {
                    b = f;
                    break;
                }
            }
            b = b ? 0 : e;
        } else
            b = 0;
        g = (b | 0) < 0 ? 0 : b;
        return ((c[a >> 2] | 0) == 0 ? g : 0 - g | 0) | 0;
    }
    function* Ec(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0;
        y = i;
        i = i + 16 | 0;
        u = y + 8 | 0;
        v = y + 4 | 0;
        x = y;
        e = c[b >> 2] | 0;
        g = c[5307] | 0;
        f = qc(e, g, 1) | 0;
        if ((f | 0) < 0) {
            b = 0;
            i = y;
            return b | 0;
        }
        if (!f) {
            if (!e)
                e = g;
            else {
                w = e + 12 | 0;
                x = (c[w >> 2] | 0) + -1 | 0;
                c[w >> 2] = x;
                if (!x) {
                    f = c[e + 20 >> 2] | 0;
                    if (f) {
                        Vd(f);
                        e = c[b >> 2] | 0;
                    }
                    c[e + 16 >> 2] = c[5310];
                    c[5310] = c[b >> 2];
                }
                c[b >> 2] = 0;
                e = c[5307] | 0;
            }
            x = e + 12 | 0;
            c[x >> 2] = (c[x >> 2] | 0) + 1;
            c[b >> 2] = e;
            b = 1;
            i = y;
            return b | 0;
        }
        f = c[5308] | 0;
        h = qc(e, f, 1) | 0;
        if (!h) {
            if (!e)
                e = f;
            else {
                w = e + 12 | 0;
                x = (c[w >> 2] | 0) + -1 | 0;
                c[w >> 2] = x;
                if (!x) {
                    f = c[e + 20 >> 2] | 0;
                    if (f) {
                        Vd(f);
                        e = c[b >> 2] | 0;
                    }
                    c[e + 16 >> 2] = c[5310];
                    c[5310] = c[b >> 2];
                }
                c[b >> 2] = 0;
                e = c[5308] | 0;
            }
            x = e + 12 | 0;
            c[x >> 2] = (c[x >> 2] | 0) + 1;
            c[b >> 2] = e;
            b = 1;
            i = y;
            return b | 0;
        }
        t = c[e + 8 >> 2] | 0;
        t = (t | 0) < (d | 0) ? d : t;
        e = g + 12 | 0;
        s = c[e >> 2] | 0;
        c[u >> 2] = g;
        c[v >> 2] = g;
        c[e >> 2] = s + 3;
        c[x >> 2] = g;
        e = c[5310] | 0;
        if (!e) {
            e = Ud(28) | 0;
            if (!e)
                yield* Nb();
            else
                w = e;
        } else {
            c[5310] = c[e + 16 >> 2];
            w = e;
        }
        c[w >> 2] = 0;
        c[w + 4 >> 2] = 1;
        c[w + 8 >> 2] = 1;
        q = w + 12 | 0;
        c[q >> 2] = 1;
        e = Ud(2) | 0;
        r = w + 20 | 0;
        c[r >> 2] = e;
        if (!e)
            yield* Nb();
        s = e;
        p = w + 24 | 0;
        c[p >> 2] = s;
        a[s >> 0] = 0;
        a[s + 1 >> 0] = 0;
        s = w;
        a[(c[p >> 2] | 0) + 1 >> 0] = 5;
        if ((h | 0) >= 0) {
            yield* Fc(u, 10);
            yield* Fc(v, c[(c[b >> 2] | 0) + 4 >> 2] | 0);
            yield* xc(c[v >> 2] | 0, w, v, 0);
            e = c[v >> 2] | 0;
            c[e + 8 >> 2] = 0;
            yield* Cc(c[u >> 2] | 0, e, u, 0);
            f = e;
            if (!e) {
                e = 0;
                f = 3;
            } else {
                o = e + 12 | 0;
                p = (c[o >> 2] | 0) + -1 | 0;
                c[o >> 2] = p;
                if (!p) {
                    d = c[e + 20 >> 2] | 0;
                    if (d | 0)
                        Vd(d);
                    c[e + 16 >> 2] = c[5310];
                    c[5310] = f;
                }
                c[v >> 2] = 0;
                e = 0;
                f = 3;
            }
        } else {
            e = c[5308] | 0;
            f = e + 12 | 0;
            c[f >> 2] = (c[f >> 2] | 0) + 1;
            c[u >> 2] = e;
            e = c[v >> 2] | 0;
            f = c[(c[b >> 2] | 0) + 8 >> 2] | 0;
        }
        p = t + 1 | 0;
        while (1) {
            o = f + 1 | 0;
            g = e;
            a:
                while (1) {
                    if (g | 0) {
                        m = g + 12 | 0;
                        n = (c[m >> 2] | 0) + -1 | 0;
                        c[m >> 2] = n;
                        if (!n) {
                            d = c[g + 20 >> 2] | 0;
                            if (d | 0)
                                Vd(d);
                            c[g + 16 >> 2] = c[5310];
                            c[5310] = e;
                        }
                        c[v >> 2] = 0;
                    }
                    e = c[u >> 2] | 0;
                    m = e + 12 | 0;
                    c[m >> 2] = (c[m >> 2] | 0) + 1;
                    c[v >> 2] = e;
                    (yield* zc(c[b >> 2] | 0, e, u, f)) | 0;
                    yield* wc(c[u >> 2] | 0, e, u, 0);
                    yield* xc(c[u >> 2] | 0, w, u, f);
                    n = c[u >> 2] | 0;
                    yield* tc(n, e, x, o);
                    h = c[x >> 2] | 0;
                    d = c[h + 8 >> 2] | 0;
                    d = ((d | 0) < (f | 0) ? d : f) + (c[h + 4 >> 2] | 0) | 0;
                    g = c[h + 24 >> 2] | 0;
                    j = e;
                    b:
                        do
                            if ((d | 0) > 0) {
                                l = d;
                                while (1) {
                                    k = g + 1 | 0;
                                    if (a[g >> 0] | 0) {
                                        d = l;
                                        g = k;
                                        break b;
                                    }
                                    d = l + -1 | 0;
                                    if ((l | 0) > 1) {
                                        l = d;
                                        g = k;
                                    } else {
                                        g = k;
                                        break;
                                    }
                                }
                            }
                        while (0);
                    switch (d | 0) {
                    case 0: {
                            d = m;
                            g = n;
                            break a;
                        }
                    case 1:
                        break;
                    default: {
                            g = e;
                            e = j;
                            continue a;
                        }
                    }
                    if ((a[g + -1 >> 0] | 0) == 1) {
                        d = m;
                        g = n;
                        break;
                    } else {
                        g = e;
                        e = j;
                    }
                }
            if ((f | 0) > (t | 0)) {
                m = e;
                break;
            }
            o = f * 3 | 0;
            f = (o | 0) > (p | 0) ? p : o;
        }
        k = g;
        l = h;
        e = c[b >> 2] | 0;
        if (e | 0) {
            o = e + 12 | 0;
            p = (c[o >> 2] | 0) + -1 | 0;
            c[o >> 2] = p;
            if (!p) {
                f = c[e + 20 >> 2] | 0;
                if (f) {
                    Vd(f);
                    e = c[b >> 2] | 0;
                }
                c[e + 16 >> 2] = c[5310];
                c[5310] = c[b >> 2];
            }
            c[b >> 2] = 0;
        }
        (yield* zc(g, c[5308] | 0, b, t)) | 0;
        if (g | 0) {
            t = g + 12 | 0;
            b = (c[t >> 2] | 0) + -1 | 0;
            c[t >> 2] = b;
            if (!b) {
                e = c[g + 20 >> 2] | 0;
                if (e | 0)
                    Vd(e);
                c[g + 16 >> 2] = c[5310];
                c[5310] = k;
            }
            c[u >> 2] = 0;
        }
        if (m | 0) {
            b = (c[d >> 2] | 0) + -1 | 0;
            c[d >> 2] = b;
            if (!b) {
                e = c[m + 20 >> 2] | 0;
                if (e | 0)
                    Vd(e);
                c[m + 16 >> 2] = c[5310];
                c[5310] = j;
            }
            c[v >> 2] = 0;
        }
        if (w | 0 ? (b = (c[q >> 2] | 0) + -1 | 0, c[q >> 2] = b, (b | 0) == 0) : 0) {
            e = c[r >> 2] | 0;
            if (e | 0)
                Vd(e);
            c[w + 16 >> 2] = c[5310];
            c[5310] = s;
        }
        if (!h) {
            b = 1;
            i = y;
            return b | 0;
        }
        w = h + 12 | 0;
        b = (c[w >> 2] | 0) + -1 | 0;
        c[w >> 2] = b;
        if (!b) {
            e = c[h + 20 >> 2] | 0;
            if (e | 0)
                Vd(e);
            c[h + 16 >> 2] = c[5310];
            c[5310] = l;
        }
        c[x >> 2] = 0;
        b = 1;
        i = y;
        return b | 0;
    }
    function* Fc(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0;
        k = i;
        i = i + 32 | 0;
        h = k;
        e = (d | 0) < 0 ? 0 - d | 0 : d;
        g = h + 1 | 0;
        a[h >> 0] = (e | 0) % 10 | 0;
        if ((e + 9 | 0) >>> 0 > 18) {
            f = 1;
            while (1) {
                e = (e | 0) / 10 | 0;
                h = g + 1 | 0;
                a[g >> 0] = (e | 0) % 10 | 0;
                f = f + 1 | 0;
                if ((e + 9 | 0) >>> 0 <= 18) {
                    g = h;
                    break;
                } else
                    g = h;
            }
        } else
            f = 1;
        e = c[b >> 2] | 0;
        if (e | 0) {
            l = e + 12 | 0;
            h = (c[l >> 2] | 0) + -1 | 0;
            c[l >> 2] = h;
            if (!h) {
                h = c[e + 20 >> 2] | 0;
                if (h) {
                    Vd(h);
                    e = c[b >> 2] | 0;
                }
                c[e + 16 >> 2] = c[5310];
                c[5310] = c[b >> 2];
            }
            c[b >> 2] = 0;
        }
        e = c[5310] | 0;
        if (!e) {
            e = Ud(28) | 0;
            if (!e)
                yield* Nb();
            else
                j = e;
        } else {
            c[5310] = c[e + 16 >> 2];
            j = e;
        }
        c[j >> 2] = 0;
        c[j + 4 >> 2] = f;
        c[j + 8 >> 2] = 0;
        c[j + 12 >> 2] = 1;
        e = Ud(f) | 0;
        c[j + 20 >> 2] = e;
        if (!e)
            yield* Nb();
        l = e;
        e = j + 24 | 0;
        c[e >> 2] = l;
        $d(l | 0, 0, f | 0) | 0;
        c[b >> 2] = j;
        if ((d | 0) <= -1)
            c[j >> 2] = 1;
        if ((f | 0) <= 0) {
            i = k;
            return;
        }
        e = c[e >> 2] | 0;
        while (1) {
            g = g + -1 | 0;
            a[e >> 0] = a[g >> 0] | 0;
            if ((f | 0) <= 1)
                break;
            else {
                f = f + -1 | 0;
                e = e + 1 | 0;
            }
        }
        i = k;
        return;
    }
    function* Gc(b, e, f, g) {
        b = b | 0;
        e = e | 0;
        f = f | 0;
        g = g | 0;
        var h = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0;
        D = i;
        i = i + 80 | 0;
        v = D + 8 | 0;
        t = D;
        u = D + 40 | 0;
        x = D + 32 | 0;
        y = D + 28 | 0;
        z = D + 24 | 0;
        B = D + 20 | 0;
        w = D + 16 | 0;
        C = D + 12 | 0;
        if ((c[b >> 2] | 0) == 1)
            yield* La[f & 7](45);
        q = c[5307] | 0;
        if ((q | 0) != (b | 0)) {
            r = b + 4 | 0;
            k = c[r >> 2] | 0;
            A = b + 8 | 0;
            l = (c[A >> 2] | 0) + k | 0;
            p = (l | 0) > 0;
            a:
                do
                    if (p) {
                        n = l;
                        o = c[b + 24 >> 2] | 0;
                        while (1) {
                            if (a[o >> 0] | 0) {
                                m = n;
                                break a;
                            }
                            m = n + -1 | 0;
                            if ((n | 0) > 1) {
                                n = m;
                                o = o + 1 | 0;
                            } else
                                break;
                        }
                    } else
                        m = l;
                while (0);
            if (m | 0) {
                if ((e | 0) == 10) {
                    m = b + 24 | 0;
                    h = c[m >> 2] | 0;
                    do
                        if ((k | 0) <= 1)
                            if (a[h >> 0] | 0)
                                if ((k | 0) > 0) {
                                    k = 1;
                                    j = h;
                                    s = 14;
                                    break;
                                } else {
                                    l = h;
                                    break;
                                }
                            else {
                                l = h + 1 | 0;
                                break;
                            }
                        else {
                            j = h;
                            s = 14;
                        }
                    while (0);
                    if ((s | 0) == 14)
                        while (1) {
                            h = j + 1 | 0;
                            yield* La[f & 7]((d[j >> 0] | 0) + 48 | 0);
                            if ((k | 0) > 1) {
                                k = k + -1 | 0;
                                j = h;
                                s = 14;
                            } else {
                                l = h;
                                break;
                            }
                        }
                    do
                        if (g | 0) {
                            if ((c[5307] | 0) != (b | 0)) {
                                h = (c[A >> 2] | 0) + (c[r >> 2] | 0) | 0;
                                b:
                                    do
                                        if ((h | 0) > 0) {
                                            k = c[m >> 2] | 0;
                                            while (1) {
                                                if (a[k >> 0] | 0)
                                                    break b;
                                                j = h + -1 | 0;
                                                if ((h | 0) > 1) {
                                                    h = j;
                                                    k = k + 1 | 0;
                                                } else {
                                                    h = j;
                                                    break;
                                                }
                                            }
                                        }
                                    while (0);
                                if (h | 0)
                                    break;
                            }
                            yield* La[f & 7](48);
                        }
                    while (0);
                    if ((c[A >> 2] | 0) <= 0) {
                        i = D;
                        return;
                    }
                    yield* La[f & 7](46);
                    if ((c[A >> 2] | 0) > 0) {
                        j = 0;
                        h = l;
                    } else {
                        i = D;
                        return;
                    }
                    while (1) {
                        yield* La[f & 7]((d[h >> 0] | 0) + 48 | 0);
                        j = j + 1 | 0;
                        if ((j | 0) >= (c[A >> 2] | 0))
                            break;
                        else
                            h = h + 1 | 0;
                    }
                    i = D;
                    return;
                }
                if (g) {
                    c:
                        do
                            if (p) {
                                m = c[b + 24 >> 2] | 0;
                                while (1) {
                                    if (a[m >> 0] | 0) {
                                        k = l;
                                        break c;
                                    }
                                    k = l + -1 | 0;
                                    if ((l | 0) > 1) {
                                        l = k;
                                        m = m + 1 | 0;
                                    } else
                                        break;
                                }
                            } else
                                k = l;
                        while (0);
                    if (!k) {
                        yield* La[f & 7](48);
                        k = c[5307] | 0;
                    } else
                        k = q;
                } else
                    k = q;
                g = k + 12 | 0;
                c[g >> 2] = (c[g >> 2] | 0) + 1;
                c[x >> 2] = k;
                (yield* zc(b, c[5308] | 0, x, 0)) | 0;
                k = c[5307] | 0;
                g = k + 12 | 0;
                r = c[g >> 2] | 0;
                c[y >> 2] = k;
                c[B >> 2] = k;
                c[g >> 2] = r + 3;
                c[z >> 2] = k;
                k = c[x >> 2] | 0;
                yield* tc(b, k, y, 0);
                c[k >> 2] = 0;
                b = c[y >> 2] | 0;
                c[b >> 2] = 0;
                yield* Fc(z, e);
                g = c[5307] | 0;
                r = g + 12 | 0;
                c[r >> 2] = (c[r >> 2] | 0) + 1;
                c[C >> 2] = g;
                yield* Fc(C, e + -1 | 0);
                d:
                    do
                        if ((c[5307] | 0) == (k | 0))
                            h = k;
                        else {
                            g = 0;
                            while (1) {
                                l = (c[k + 8 >> 2] | 0) + (c[k + 4 >> 2] | 0) | 0;
                                e:
                                    do
                                        if ((l | 0) > 0) {
                                            m = l;
                                            n = c[k + 24 >> 2] | 0;
                                            while (1) {
                                                if (a[n >> 0] | 0) {
                                                    l = m;
                                                    break e;
                                                }
                                                l = m + -1 | 0;
                                                if ((m | 0) > 1) {
                                                    m = l;
                                                    n = n + 1 | 0;
                                                } else
                                                    break;
                                            }
                                        }
                                    while (0);
                                if (!l) {
                                    h = k;
                                    j = g;
                                    s = 47;
                                    break;
                                }
                                q = c[z >> 2] | 0;
                                (yield* Ac(k, q, 0, B, 0)) | 0;
                                r = Ud(8) | 0;
                                if (!r) {
                                    s = 41;
                                    break;
                                }
                                p = c[B >> 2] | 0;
                                l = c[p + 4 >> 2] | 0;
                                if ((l | 0) > 0) {
                                    o = c[p + 24 >> 2] | 0;
                                    m = 0;
                                    while (1) {
                                        m = (d[o >> 0] | 0) + (m * 10 | 0) | 0;
                                        n = (l | 0) > 1;
                                        if (n & (m | 0) < 214748365) {
                                            l = l + -1 | 0;
                                            o = o + 1 | 0;
                                        } else {
                                            l = n;
                                            break;
                                        }
                                    }
                                    l = l ? 0 : m;
                                } else
                                    l = 0;
                                o = (l | 0) < 0 ? 0 : l;
                                c[r >> 2] = (c[p >> 2] | 0) == 0 ? o : 0 - o | 0;
                                c[r + 4 >> 2] = g;
                                (yield* zc(k, q, x, 0)) | 0;
                                k = c[x >> 2] | 0;
                                if ((c[5307] | 0) == (k | 0)) {
                                    h = k;
                                    j = r;
                                    break;
                                } else
                                    g = r;
                            }
                            if ((s | 0) == 41)
                                yield* Nb();
                            else if ((s | 0) == 47)
                                if (!j)
                                    break;
                            if ((e | 0) < 17)
                                while (1) {
                                    t = j;
                                    j = c[j + 4 >> 2] | 0;
                                    yield* La[f & 7](d[18478 + (c[t >> 2] | 0) >> 0] | 0);
                                    Vd(t);
                                    if (!j)
                                        break d;
                                }
                            do {
                                m = j;
                                j = c[j + 4 >> 2] | 0;
                                l = c[m >> 2] | 0;
                                k = c[(c[C >> 2] | 0) + 4 >> 2] | 0;
                                yield* La[f & 7](32);
                                c[t >> 2] = l;
                                (yield* Bd(u, 18474, t)) | 0;
                                l = Rc(u) | 0;
                                if ((l | 0) < (k | 0))
                                    do {
                                        yield* La[f & 7](48);
                                        k = k + -1 | 0;
                                    } while ((k | 0) > (l | 0));
                                if ((l | 0) > 0) {
                                    k = 0;
                                    do {
                                        yield* La[f & 7](d[u + k >> 0] | 0);
                                        k = k + 1 | 0;
                                    } while ((k | 0) != (l | 0));
                                }
                                Vd(m);
                            } while ((j | 0) != 0);
                        }
                    while (0);
                if ((c[A >> 2] | 0) > 0) {
                    yield* La[f & 7](46);
                    l = c[5308] | 0;
                    j = l + 12 | 0;
                    c[j >> 2] = (c[j >> 2] | 0) + 1;
                    c[w >> 2] = l;
                    j = c[A >> 2] | 0;
                    f:
                        do
                            if ((c[l + 4 >> 2] | 0) <= (j | 0)) {
                                p = c[z >> 2] | 0;
                                if ((e | 0) < 17) {
                                    h = b;
                                    while (1) {
                                        yield* xc(h, p, y, j);
                                        n = c[y >> 2] | 0;
                                        h = c[n + 4 >> 2] | 0;
                                        if ((h | 0) > 0) {
                                            m = c[n + 24 >> 2] | 0;
                                            j = 0;
                                            while (1) {
                                                j = (d[m >> 0] | 0) + (j * 10 | 0) | 0;
                                                k = (h | 0) > 1;
                                                if (k & (j | 0) < 214748365) {
                                                    h = h + -1 | 0;
                                                    m = m + 1 | 0;
                                                } else {
                                                    h = k;
                                                    break;
                                                }
                                            }
                                            h = h ? 0 : j;
                                        } else
                                            h = 0;
                                        j = (h | 0) < 0 ? 0 : h;
                                        j = (c[n >> 2] | 0) == 0 ? j : 0 - j | 0;
                                        yield* Fc(x, j);
                                        h = c[x >> 2] | 0;
                                        yield* tc(n, h, y, 0);
                                        yield* La[f & 7](d[18478 + j >> 0] | 0);
                                        yield* xc(l, p, w, 0);
                                        l = c[w >> 2] | 0;
                                        j = c[A >> 2] | 0;
                                        if ((c[l + 4 >> 2] | 0) > (j | 0))
                                            break f;
                                        h = c[y >> 2] | 0;
                                    }
                                } else {
                                    h = b;
                                    o = 0;
                                }
                                while (1) {
                                    yield* xc(h, p, y, j);
                                    n = c[y >> 2] | 0;
                                    h = c[n + 4 >> 2] | 0;
                                    if ((h | 0) > 0) {
                                        m = c[n + 24 >> 2] | 0;
                                        j = 0;
                                        while (1) {
                                            j = (d[m >> 0] | 0) + (j * 10 | 0) | 0;
                                            k = (h | 0) > 1;
                                            if (k & (j | 0) < 214748365) {
                                                h = h + -1 | 0;
                                                m = m + 1 | 0;
                                            } else {
                                                h = k;
                                                break;
                                            }
                                        }
                                        h = h ? 0 : j;
                                    } else
                                        h = 0;
                                    k = (h | 0) < 0 ? 0 : h;
                                    k = (c[n >> 2] | 0) == 0 ? k : 0 - k | 0;
                                    yield* Fc(x, k);
                                    h = c[x >> 2] | 0;
                                    yield* tc(n, h, y, 0);
                                    j = c[(c[C >> 2] | 0) + 4 >> 2] | 0;
                                    if (o | 0)
                                        yield* La[f & 7](32);
                                    c[v >> 2] = k;
                                    (yield* Bd(u, 18474, v)) | 0;
                                    k = Rc(u) | 0;
                                    if ((k | 0) < (j | 0))
                                        do {
                                            yield* La[f & 7](48);
                                            j = j + -1 | 0;
                                        } while ((j | 0) > (k | 0));
                                    if ((k | 0) > 0) {
                                        j = 0;
                                        do {
                                            yield* La[f & 7](d[u + j >> 0] | 0);
                                            j = j + 1 | 0;
                                        } while ((j | 0) != (k | 0));
                                    }
                                    yield* xc(l, p, w, 0);
                                    l = c[w >> 2] | 0;
                                    j = c[A >> 2] | 0;
                                    if ((c[l + 4 >> 2] | 0) > (j | 0))
                                        break f;
                                    h = c[y >> 2] | 0;
                                    o = 1;
                                }
                            }
                        while (0);
                    j = l;
                    if (l) {
                        A = l + 12 | 0;
                        f = (c[A >> 2] | 0) + -1 | 0;
                        c[A >> 2] = f;
                        if (!f) {
                            k = c[l + 20 >> 2] | 0;
                            if (k | 0)
                                Vd(k);
                            c[l + 16 >> 2] = c[5310];
                            c[5310] = j;
                        }
                        c[w >> 2] = 0;
                    }
                }
                if (h | 0) {
                    A = h + 12 | 0;
                    f = (c[A >> 2] | 0) + -1 | 0;
                    c[A >> 2] = f;
                    if (!f) {
                        j = c[h + 20 >> 2] | 0;
                        if (j | 0)
                            Vd(j);
                        c[h + 16 >> 2] = c[5310];
                        c[5310] = c[x >> 2];
                    }
                    c[x >> 2] = 0;
                }
                h = c[y >> 2] | 0;
                j = h;
                if (h | 0) {
                    A = h + 12 | 0;
                    f = (c[A >> 2] | 0) + -1 | 0;
                    c[A >> 2] = f;
                    if (!f) {
                        k = c[h + 20 >> 2] | 0;
                        if (k | 0)
                            Vd(k);
                        c[h + 16 >> 2] = c[5310];
                        c[5310] = j;
                    }
                    c[y >> 2] = 0;
                }
                h = c[z >> 2] | 0;
                j = h;
                if (h | 0) {
                    A = h + 12 | 0;
                    f = (c[A >> 2] | 0) + -1 | 0;
                    c[A >> 2] = f;
                    if (!f) {
                        k = c[h + 20 >> 2] | 0;
                        if (k | 0)
                            Vd(k);
                        c[h + 16 >> 2] = c[5310];
                        c[5310] = j;
                    }
                    c[z >> 2] = 0;
                }
                h = c[B >> 2] | 0;
                j = h;
                if (h | 0) {
                    A = h + 12 | 0;
                    f = (c[A >> 2] | 0) + -1 | 0;
                    c[A >> 2] = f;
                    if (!f) {
                        k = c[h + 20 >> 2] | 0;
                        if (k | 0)
                            Vd(k);
                        c[h + 16 >> 2] = c[5310];
                        c[5310] = j;
                    }
                    c[B >> 2] = 0;
                }
                h = c[C >> 2] | 0;
                j = h;
                if (!h) {
                    i = D;
                    return;
                }
                f = h + 12 | 0;
                B = (c[f >> 2] | 0) + -1 | 0;
                c[f >> 2] = B;
                if (!B) {
                    k = c[h + 20 >> 2] | 0;
                    if (k | 0)
                        Vd(k);
                    c[h + 16 >> 2] = c[5310];
                    c[5310] = j;
                }
                c[C >> 2] = 0;
                i = D;
                return;
            }
        }
        yield* La[f & 7](48);
        i = D;
        return;
    }
    function Hc(a) {
        a = a | 0;
        var b = 0, d = 0;
        b = i;
        i = i + 16 | 0;
        d = b;
        c[d >> 2] = c[a + 60 >> 2];
        a = Ic(ja(6, d | 0) | 0) | 0;
        i = b;
        return a | 0;
    }
    function Ic(a) {
        a = a | 0;
        if (a >>> 0 > 4294963200) {
            c[(Jc() | 0) >> 2] = 0 - a;
            a = -1;
        }
        return a | 0;
    }
    function Jc() {
        var a = 0;
        if (!(c[5313] | 0))
            a = 21296;
        else
            a = c[(sa() | 0) + 64 >> 2] | 0;
        return a | 0;
    }
    function* Kc(b, d, e) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0;
        g = i;
        i = i + 80 | 0;
        f = g;
        c[b + 36 >> 2] = 4;
        if ((c[b >> 2] & 64 | 0) == 0 ? (c[f >> 2] = c[b + 60 >> 2], c[f + 4 >> 2] = 21505, c[f + 8 >> 2] = g + 12, ua(54, f | 0) | 0) : 0)
            a[b + 75 >> 0] = -1;
        f = (yield* Lc(b, d, e)) | 0;
        i = g;
        return f | 0;
    }
    function* Lc(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0;
        q = i;
        i = i + 48 | 0;
        n = q + 16 | 0;
        m = q;
        e = q + 32 | 0;
        o = a + 28 | 0;
        f = c[o >> 2] | 0;
        c[e >> 2] = f;
        p = a + 20 | 0;
        f = (c[p >> 2] | 0) - f | 0;
        c[e + 4 >> 2] = f;
        c[e + 8 >> 2] = b;
        c[e + 12 >> 2] = d;
        k = a + 60 | 0;
        l = a + 44 | 0;
        b = 2;
        f = f + d | 0;
        while (1) {
            if (!(c[5313] | 0)) {
                c[n >> 2] = c[k >> 2];
                c[n + 4 >> 2] = e;
                c[n + 8 >> 2] = b;
                h = Ic(Ga(146, n | 0) | 0) | 0;
            } else {
                ka(4, a | 0);
                c[m >> 2] = c[k >> 2];
                c[m + 4 >> 2] = e;
                c[m + 8 >> 2] = b;
                h = Ic(Ga(146, m | 0) | 0) | 0;
                ha(0);
            }
            if ((f | 0) == (h | 0)) {
                f = 6;
                break;
            }
            if ((h | 0) < 0) {
                f = 8;
                break;
            }
            f = f - h | 0;
            g = c[e + 4 >> 2] | 0;
            if (h >>> 0 <= g >>> 0)
                if ((b | 0) == 2) {
                    c[o >> 2] = (c[o >> 2] | 0) + h;
                    j = g;
                    b = 2;
                } else
                    j = g;
            else {
                j = c[l >> 2] | 0;
                c[o >> 2] = j;
                c[p >> 2] = j;
                j = c[e + 12 >> 2] | 0;
                h = h - g | 0;
                e = e + 8 | 0;
                b = b + -1 | 0;
            }
            c[e >> 2] = (c[e >> 2] | 0) + h;
            c[e + 4 >> 2] = j - h;
        }
        if ((f | 0) == 6) {
            n = c[l >> 2] | 0;
            c[a + 16 >> 2] = n + (c[a + 48 >> 2] | 0);
            a = n;
            c[o >> 2] = a;
            c[p >> 2] = a;
        } else if ((f | 0) == 8) {
            c[a + 16 >> 2] = 0;
            c[o >> 2] = 0;
            c[p >> 2] = 0;
            c[a >> 2] = c[a >> 2] | 32;
            if ((b | 0) == 2)
                d = 0;
            else
                d = d - (c[e + 4 >> 2] | 0) | 0;
        }
        i = q;
        return d | 0;
    }
    function* Mc(a) {
        a = a | 0;
        if (!(c[a + 68 >> 2] | 0))
            Nc(a);
        return;
    }
    function Nc(a) {
        a = a | 0;
        return;
    }
    function* Oc(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0;
        f = i;
        i = i + 32 | 0;
        g = f;
        e = f + 20 | 0;
        c[g >> 2] = c[a + 60 >> 2];
        c[g + 4 >> 2] = 0;
        c[g + 8 >> 2] = b;
        c[g + 12 >> 2] = e;
        c[g + 16 >> 2] = d;
        if ((Ic(Da(140, g | 0) | 0) | 0) < 0) {
            c[e >> 2] = -1;
            a = -1;
        } else
            a = c[e >> 2] | 0;
        i = f;
        return a | 0;
    }
    function* Pc(b, d, e) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
        m = i;
        i = i + 48 | 0;
        h = m + 16 | 0;
        g = m;
        f = m + 32 | 0;
        c[f >> 2] = d;
        j = f + 4 | 0;
        l = b + 48 | 0;
        n = c[l >> 2] | 0;
        c[j >> 2] = e - ((n | 0) != 0 & 1);
        k = b + 44 | 0;
        c[f + 8 >> 2] = c[k >> 2];
        c[f + 12 >> 2] = n;
        if (!(c[5313] | 0)) {
            c[h >> 2] = c[b + 60 >> 2];
            c[h + 4 >> 2] = f;
            c[h + 8 >> 2] = 2;
            f = Ic((yield* Fa(145, h | 0)) | 0) | 0;
        } else {
            ka(5, b | 0);
            c[g >> 2] = c[b + 60 >> 2];
            c[g + 4 >> 2] = f;
            c[g + 8 >> 2] = 2;
            f = Ic((yield* Fa(145, g | 0)) | 0) | 0;
            ha(0);
        }
        if ((f | 0) >= 1) {
            j = c[j >> 2] | 0;
            if (f >>> 0 > j >>> 0) {
                g = c[k >> 2] | 0;
                h = b + 4 | 0;
                c[h >> 2] = g;
                c[b + 8 >> 2] = g + (f - j);
                if (!(c[l >> 2] | 0))
                    f = e;
                else {
                    c[h >> 2] = g + 1;
                    a[d + (e + -1) >> 0] = a[g >> 0] | 0;
                    f = e;
                }
            }
        } else {
            c[b >> 2] = c[b >> 2] | f & 48 ^ 16;
            c[b + 8 >> 2] = 0;
            c[b + 4 >> 2] = 0;
        }
        i = m;
        return f | 0;
    }
    function* Qc(a) {
        a = a | 0;
        if (!(c[a + 68 >> 2] | 0))
            Nc(a);
        return;
    }
    function Rc(b) {
        b = b | 0;
        var d = 0, e = 0, f = 0;
        f = b;
        a:
            do
                if (!(f & 3))
                    e = 4;
                else {
                    d = b;
                    b = f;
                    while (1) {
                        if (!(a[d >> 0] | 0))
                            break a;
                        d = d + 1 | 0;
                        b = d;
                        if (!(b & 3)) {
                            b = d;
                            e = 4;
                            break;
                        }
                    }
                }
            while (0);
        if ((e | 0) == 4) {
            while (1) {
                d = c[b >> 2] | 0;
                if (!((d & -2139062144 ^ -2139062144) & d + -16843009))
                    b = b + 4 | 0;
                else
                    break;
            }
            if ((d & 255) << 24 >> 24)
                do
                    b = b + 1 | 0;
                while ((a[b >> 0] | 0) != 0);
        }
        return b - f | 0;
    }
    function Sc(b, d, e) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, i = 0;
        h = d & 255;
        f = (e | 0) != 0;
        a:
            do
                if (f & (b & 3 | 0) != 0) {
                    g = d & 255;
                    while (1) {
                        if ((a[b >> 0] | 0) == g << 24 >> 24) {
                            i = 6;
                            break a;
                        }
                        b = b + 1 | 0;
                        e = e + -1 | 0;
                        f = (e | 0) != 0;
                        if (!(f & (b & 3 | 0) != 0)) {
                            i = 5;
                            break;
                        }
                    }
                } else
                    i = 5;
            while (0);
        if ((i | 0) == 5)
            if (f)
                i = 6;
            else
                e = 0;
        b:
            do
                if ((i | 0) == 6) {
                    g = d & 255;
                    if ((a[b >> 0] | 0) != g << 24 >> 24) {
                        f = _(h, 16843009) | 0;
                        c:
                            do
                                if (e >>> 0 > 3)
                                    while (1) {
                                        h = c[b >> 2] ^ f;
                                        if ((h & -2139062144 ^ -2139062144) & h + -16843009 | 0)
                                            break;
                                        b = b + 4 | 0;
                                        e = e + -4 | 0;
                                        if (e >>> 0 <= 3) {
                                            i = 11;
                                            break c;
                                        }
                                    }
                                else
                                    i = 11;
                            while (0);
                        if ((i | 0) == 11)
                            if (!e) {
                                e = 0;
                                break;
                            }
                        while (1) {
                            if ((a[b >> 0] | 0) == g << 24 >> 24)
                                break b;
                            b = b + 1 | 0;
                            e = e + -1 | 0;
                            if (!e) {
                                e = 0;
                                break;
                            }
                        }
                    }
                }
            while (0);
        return (e | 0 ? b : 0) | 0;
    }
    function Tc(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
        o = i;
        i = i + 112 | 0;
        n = o + 40 | 0;
        l = o + 24 | 0;
        k = o + 16 | 0;
        g = o;
        m = o + 52 | 0;
        f = a[d >> 0] | 0;
        if (Sc(20974, f << 24 >> 24, 4) | 0) {
            e = Ud(1144) | 0;
            if (!e)
                e = 0;
            else {
                h = e;
                j = h + 112 | 0;
                do {
                    c[h >> 2] = 0;
                    h = h + 4 | 0;
                } while ((h | 0) < (j | 0));
                if (!(Uc(d, 43) | 0))
                    c[e >> 2] = f << 24 >> 24 == 114 ? 8 : 4;
                if (Uc(d, 101) | 0) {
                    c[g >> 2] = b;
                    c[g + 4 >> 2] = 2;
                    c[g + 8 >> 2] = 1;
                    ia(221, g | 0) | 0;
                    f = a[d >> 0] | 0;
                }
                if (f << 24 >> 24 == 97) {
                    c[k >> 2] = b;
                    c[k + 4 >> 2] = 3;
                    f = ia(221, k | 0) | 0;
                    if (!(f & 1024)) {
                        c[l >> 2] = b;
                        c[l + 4 >> 2] = 4;
                        c[l + 8 >> 2] = f | 1024;
                        ia(221, l | 0) | 0;
                    }
                    d = c[e >> 2] | 128;
                    c[e >> 2] = d;
                } else
                    d = c[e >> 2] | 0;
                c[e + 60 >> 2] = b;
                c[e + 44 >> 2] = e + 120;
                c[e + 48 >> 2] = 1024;
                f = e + 75 | 0;
                a[f >> 0] = -1;
                if ((d & 8 | 0) == 0 ? (c[n >> 2] = b, c[n + 4 >> 2] = 21505, c[n + 8 >> 2] = m, (ua(54, n | 0) | 0) == 0) : 0)
                    a[f >> 0] = 10;
                c[e + 32 >> 2] = 3;
                c[e + 36 >> 2] = 4;
                c[e + 40 >> 2] = 2;
                c[e + 12 >> 2] = 1;
                if (!(c[5314] | 0))
                    c[e + 76 >> 2] = -1;
                ya(21280);
                f = c[5319] | 0;
                c[e + 56 >> 2] = f;
                if (f | 0)
                    c[f + 52 >> 2] = e;
                c[5319] = e;
                va(21280);
            }
        } else {
            c[(Jc() | 0) >> 2] = 22;
            e = 0;
        }
        i = o;
        return e | 0;
    }
    function Uc(b, c) {
        b = b | 0;
        c = c | 0;
        b = Vc(b, c) | 0;
        return ((a[b >> 0] | 0) == (c & 255) << 24 >> 24 ? b : 0) | 0;
    }
    function Vc(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0;
        f = d & 255;
        a:
            do
                if (!f)
                    b = b + (Rc(b) | 0) | 0;
                else {
                    if (b & 3) {
                        e = d & 255;
                        do {
                            g = a[b >> 0] | 0;
                            if (g << 24 >> 24 == 0 ? 1 : g << 24 >> 24 == e << 24 >> 24)
                                break a;
                            b = b + 1 | 0;
                        } while ((b & 3 | 0) != 0);
                    }
                    f = _(f, 16843009) | 0;
                    e = c[b >> 2] | 0;
                    b:
                        do
                            if (!((e & -2139062144 ^ -2139062144) & e + -16843009))
                                do {
                                    g = e ^ f;
                                    if ((g & -2139062144 ^ -2139062144) & g + -16843009 | 0)
                                        break b;
                                    b = b + 4 | 0;
                                    e = c[b >> 2] | 0;
                                } while (!((e & -2139062144 ^ -2139062144) & e + -16843009 | 0));
                        while (0);
                    e = d & 255;
                    while (1) {
                        g = a[b >> 0] | 0;
                        if (g << 24 >> 24 == 0 ? 1 : g << 24 >> 24 == e << 24 >> 24)
                            break;
                        else
                            b = b + 1 | 0;
                    }
                }
            while (0);
        return b | 0;
    }
    function Wc(a) {
        a = a | 0;
        return 0;
    }
    function* Xc(a) {
        a = a | 0;
        var b = 0, e = 0;
        e = i;
        i = i + 16 | 0;
        b = e;
        if ((c[a + 8 >> 2] | 0) == 0 ? ((yield* Yc(a)) | 0) != 0 : 0)
            b = -1;
        else if (((yield* Ka[c[a + 32 >> 2] & 7](a, b, 1)) | 0) == 1)
            b = d[b >> 0] | 0;
        else
            b = -1;
        i = e;
        return b | 0;
    }
    function* Yc(b) {
        b = b | 0;
        var d = 0, e = 0;
        d = b + 74 | 0;
        e = a[d >> 0] | 0;
        a[d >> 0] = e + 255 | e;
        d = b + 20 | 0;
        e = b + 44 | 0;
        if ((c[d >> 2] | 0) >>> 0 > (c[e >> 2] | 0) >>> 0)
            (yield* Ka[c[b + 36 >> 2] & 7](b, 0, 0)) | 0;
        c[b + 16 >> 2] = 0;
        c[b + 28 >> 2] = 0;
        c[d >> 2] = 0;
        d = c[b >> 2] | 0;
        if (d & 20)
            if (!(d & 4))
                d = -1;
            else {
                c[b >> 2] = d | 32;
                d = -1;
            }
        else {
            d = c[e >> 2] | 0;
            c[b + 8 >> 2] = d;
            c[b + 4 >> 2] = d;
            d = 0;
        }
        return d | 0;
    }
    function* Zc(a) {
        a = a | 0;
        var b = 0, d = 0, e = 0;
        e = (c[a >> 2] & 1 | 0) != 0;
        if (!e) {
            ya(21280);
            d = c[a + 52 >> 2] | 0;
            b = a + 56 | 0;
            if (d | 0)
                c[d + 56 >> 2] = c[b >> 2];
            b = c[b >> 2] | 0;
            if (b | 0)
                c[b + 52 >> 2] = d;
            if ((c[5319] | 0) == (a | 0))
                c[5319] = b;
            va(21280);
        }
        b = (yield* _c(a)) | 0;
        b = Ja[c[a + 12 >> 2] & 1](a) | 0 | b;
        d = c[a + 92 >> 2] | 0;
        if (d | 0)
            Vd(d);
        if (!e)
            Vd(a);
        return b | 0;
    }
    function* _c(a) {
        a = a | 0;
        var b = 0, d = 0;
        do
            if (a) {
                if ((c[a + 76 >> 2] | 0) <= -1) {
                    b = (yield* $c(a)) | 0;
                    break;
                }
                d = (Wc(a) | 0) == 0;
                b = (yield* $c(a)) | 0;
                if (!d)
                    Nc(a);
            } else {
                if (!(c[478] | 0))
                    b = 0;
                else
                    b = (yield* _c(c[478] | 0)) | 0;
                ya(21280);
                a = c[5319] | 0;
                if (a)
                    do {
                        if ((c[a + 76 >> 2] | 0) > -1)
                            d = Wc(a) | 0;
                        else
                            d = 0;
                        if ((c[a + 20 >> 2] | 0) >>> 0 > (c[a + 28 >> 2] | 0) >>> 0)
                            b = (yield* $c(a)) | 0 | b;
                        if (d | 0)
                            Nc(a);
                        a = c[a + 56 >> 2] | 0;
                    } while ((a | 0) != 0);
                va(21280);
            }
        while (0);
        return b | 0;
    }
    function* $c(a) {
        a = a | 0;
        var b = 0, d = 0, e = 0, f = 0, g = 0, h = 0;
        b = a + 20 | 0;
        g = a + 28 | 0;
        if ((c[b >> 2] | 0) >>> 0 > (c[g >> 2] | 0) >>> 0 ? ((yield* Ka[c[a + 36 >> 2] & 7](a, 0, 0)) | 0, (c[b >> 2] | 0) == 0) : 0)
            b = -1;
        else {
            h = a + 4 | 0;
            d = c[h >> 2] | 0;
            e = a + 8 | 0;
            f = c[e >> 2] | 0;
            if (d >>> 0 < f >>> 0)
                (yield* Ka[c[a + 40 >> 2] & 7](a, d - f | 0, 1)) | 0;
            c[a + 16 >> 2] = 0;
            c[g >> 2] = 0;
            c[b >> 2] = 0;
            c[e >> 2] = 0;
            c[h >> 2] = 0;
            b = 0;
        }
        return b | 0;
    }
    function ad(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0;
        e = i;
        i = i + 32 | 0;
        f = e;
        g = e + 16 | 0;
        c[g >> 2] = d;
        h = (c[g >> 2] | 0) + (4 - 1) & ~(4 - 1);
        d = c[h >> 2] | 0;
        c[g >> 2] = h + 4;
        c[f >> 2] = a;
        c[f + 4 >> 2] = b;
        c[f + 8 >> 2] = d;
        d = Ic(ua(54, f | 0) | 0) | 0;
        i = e;
        return d | 0;
    }
    function* bd(b, d, e, f) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        var g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
        n = i;
        i = i + 128 | 0;
        g = n + 112 | 0;
        m = n;
        h = m;
        j = 2148;
        k = h + 112 | 0;
        do {
            c[h >> 2] = c[j >> 2];
            h = h + 4 | 0;
            j = j + 4 | 0;
        } while ((h | 0) < (k | 0));
        if ((d + -1 | 0) >>> 0 > 2147483646)
            if (!d) {
                d = 1;
                l = 4;
            } else {
                c[(Jc() | 0) >> 2] = 75;
                d = -1;
            }
        else {
            g = b;
            l = 4;
        }
        if ((l | 0) == 4) {
            l = -2 - g | 0;
            l = d >>> 0 > l >>> 0 ? l : d;
            c[m + 48 >> 2] = l;
            b = m + 20 | 0;
            c[b >> 2] = g;
            c[m + 44 >> 2] = g;
            d = g + l | 0;
            g = m + 16 | 0;
            c[g >> 2] = d;
            c[m + 28 >> 2] = d;
            d = (yield* dd(m, e, f)) | 0;
            if (l) {
                e = c[b >> 2] | 0;
                a[e + (((e | 0) == (c[g >> 2] | 0)) << 31 >> 31) >> 0] = 0;
            }
        }
        i = n;
        return d | 0;
    }
    function* cd(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0;
        e = a + 20 | 0;
        f = c[e >> 2] | 0;
        a = (c[a + 16 >> 2] | 0) - f | 0;
        a = a >>> 0 > d >>> 0 ? d : a;
        de(f | 0, b | 0, a | 0) | 0;
        c[e >> 2] = (c[e >> 2] | 0) + a;
        return d | 0;
    }
    function* dd(b, d, e) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0;
        s = i;
        i = i + 224 | 0;
        o = s + 120 | 0;
        r = s + 80 | 0;
        q = s;
        p = s + 136 | 0;
        f = r;
        g = f + 40 | 0;
        do {
            c[f >> 2] = 0;
            f = f + 4 | 0;
        } while ((f | 0) < (g | 0));
        c[o >> 2] = c[e >> 2];
        if (((yield* ed(0, d, o, q, r)) | 0) < 0)
            e = -1;
        else {
            if ((c[b + 76 >> 2] | 0) > -1)
                m = Wc(b) | 0;
            else
                m = 0;
            e = c[b >> 2] | 0;
            n = e & 32;
            if ((a[b + 74 >> 0] | 0) < 1)
                c[b >> 2] = e & -33;
            e = b + 48 | 0;
            if (!(c[e >> 2] | 0)) {
                g = b + 44 | 0;
                h = c[g >> 2] | 0;
                c[g >> 2] = p;
                j = b + 28 | 0;
                c[j >> 2] = p;
                k = b + 20 | 0;
                c[k >> 2] = p;
                c[e >> 2] = 80;
                l = b + 16 | 0;
                c[l >> 2] = p + 80;
                f = (yield* ed(b, d, o, q, r)) | 0;
                if (h) {
                    (yield* Ka[c[b + 36 >> 2] & 7](b, 0, 0)) | 0;
                    f = (c[k >> 2] | 0) == 0 ? -1 : f;
                    c[g >> 2] = h;
                    c[e >> 2] = 0;
                    c[l >> 2] = 0;
                    c[j >> 2] = 0;
                    c[k >> 2] = 0;
                }
            } else
                f = (yield* ed(b, d, o, q, r)) | 0;
            e = c[b >> 2] | 0;
            c[b >> 2] = e | n;
            if (m | 0)
                Nc(b);
            e = (e & 32 | 0) == 0 ? f : -1;
        }
        i = s;
        return e | 0;
    }
    function* ed(e, f, g, j, l) {
        e = e | 0;
        f = f | 0;
        g = g | 0;
        j = j | 0;
        l = l | 0;
        var m = 0, n = 0, o = 0, p = 0, q = 0.0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0.0, y = 0, z = 0, A = 0, B = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0, M = 0, N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, $ = 0, aa = 0, ba = 0, ca = 0, da = 0, ea = 0, fa = 0, ga = 0, ha = 0, ia = 0;
        ia = i;
        i = i + 624 | 0;
        da = ia + 24 | 0;
        fa = ia + 16 | 0;
        ea = ia + 588 | 0;
        aa = ia + 576 | 0;
        ca = ia;
        W = ia + 536 | 0;
        ha = ia + 8 | 0;
        ga = ia + 528 | 0;
        M = (e | 0) != 0;
        N = W + 40 | 0;
        V = N;
        W = W + 39 | 0;
        X = ha + 4 | 0;
        Y = ea;
        Z = 0 - Y | 0;
        $ = aa + 12 | 0;
        aa = aa + 11 | 0;
        ba = $;
        O = ba - Y | 0;
        P = -2 - Y | 0;
        Q = ba + 2 | 0;
        R = da + 288 | 0;
        S = ea + 9 | 0;
        T = S;
        U = ea + 8 | 0;
        m = 0;
        o = 0;
        n = 0;
        y = f;
        a:
            while (1) {
                do
                    if ((m | 0) > -1)
                        if ((o | 0) > (2147483647 - m | 0)) {
                            c[(Jc() | 0) >> 2] = 75;
                            m = -1;
                            break;
                        } else {
                            m = o + m | 0;
                            break;
                        }
                while (0);
                f = a[y >> 0] | 0;
                if (!(f << 24 >> 24)) {
                    L = 244;
                    break;
                } else
                    o = y;
                b:
                    while (1) {
                        switch (f << 24 >> 24) {
                        case 37: {
                                f = o;
                                L = 9;
                                break b;
                            }
                        case 0: {
                                f = o;
                                break b;
                            }
                        default: {
                            }
                        }
                        K = o + 1 | 0;
                        f = a[K >> 0] | 0;
                        o = K;
                    }
                c:
                    do
                        if ((L | 0) == 9)
                            while (1) {
                                L = 0;
                                if ((a[f + 1 >> 0] | 0) != 37)
                                    break c;
                                o = o + 1 | 0;
                                f = f + 2 | 0;
                                if ((a[f >> 0] | 0) == 37)
                                    L = 9;
                                else
                                    break;
                            }
                    while (0);
                w = o - y | 0;
                if (M ? (c[e >> 2] & 32 | 0) == 0 : 0)
                    (yield* fd(y, w, e)) | 0;
                if ((o | 0) != (y | 0)) {
                    o = w;
                    y = f;
                    continue;
                }
                r = f + 1 | 0;
                o = a[r >> 0] | 0;
                p = (o << 24 >> 24) + -48 | 0;
                if (p >>> 0 < 10) {
                    K = (a[f + 2 >> 0] | 0) == 36;
                    r = K ? f + 3 | 0 : r;
                    o = a[r >> 0] | 0;
                    u = K ? p : -1;
                    n = K ? 1 : n;
                } else
                    u = -1;
                f = o << 24 >> 24;
                d:
                    do
                        if ((f & -32 | 0) == 32) {
                            p = 0;
                            while (1) {
                                if (!(1 << f + -32 & 75913)) {
                                    s = p;
                                    break d;
                                }
                                p = 1 << (o << 24 >> 24) + -32 | p;
                                r = r + 1 | 0;
                                o = a[r >> 0] | 0;
                                f = o << 24 >> 24;
                                if ((f & -32 | 0) != 32) {
                                    s = p;
                                    break;
                                }
                            }
                        } else
                            s = 0;
                    while (0);
                do
                    if (o << 24 >> 24 == 42) {
                        o = r + 1 | 0;
                        f = (a[o >> 0] | 0) + -48 | 0;
                        if (f >>> 0 < 10 ? (a[r + 2 >> 0] | 0) == 36 : 0) {
                            c[l + (f << 2) >> 2] = 10;
                            n = 1;
                            r = r + 3 | 0;
                            f = c[j + ((a[o >> 0] | 0) + -48 << 3) >> 2] | 0;
                        } else {
                            if (n | 0) {
                                m = -1;
                                break a;
                            }
                            if (!M) {
                                v = s;
                                n = 0;
                                r = o;
                                K = 0;
                                break;
                            }
                            n = (c[g >> 2] | 0) + (4 - 1) & ~(4 - 1);
                            f = c[n >> 2] | 0;
                            c[g >> 2] = n + 4;
                            n = 0;
                            r = o;
                        }
                        if ((f | 0) < 0) {
                            v = s | 8192;
                            K = 0 - f | 0;
                        } else {
                            v = s;
                            K = f;
                        }
                    } else {
                        p = (o << 24 >> 24) + -48 | 0;
                        if (p >>> 0 < 10) {
                            f = r;
                            o = 0;
                            do {
                                o = (o * 10 | 0) + p | 0;
                                f = f + 1 | 0;
                                p = (a[f >> 0] | 0) + -48 | 0;
                            } while (p >>> 0 < 10);
                            if ((o | 0) < 0) {
                                m = -1;
                                break a;
                            } else {
                                v = s;
                                r = f;
                                K = o;
                            }
                        } else {
                            v = s;
                            K = 0;
                        }
                    }
                while (0);
                e:
                    do
                        if ((a[r >> 0] | 0) == 46) {
                            f = r + 1 | 0;
                            o = a[f >> 0] | 0;
                            if (o << 24 >> 24 != 42) {
                                p = (o << 24 >> 24) + -48 | 0;
                                if (p >>> 0 < 10)
                                    o = 0;
                                else {
                                    s = 0;
                                    break;
                                }
                                while (1) {
                                    o = (o * 10 | 0) + p | 0;
                                    f = f + 1 | 0;
                                    p = (a[f >> 0] | 0) + -48 | 0;
                                    if (p >>> 0 >= 10) {
                                        s = o;
                                        break e;
                                    }
                                }
                            }
                            f = r + 2 | 0;
                            o = (a[f >> 0] | 0) + -48 | 0;
                            if (o >>> 0 < 10 ? (a[r + 3 >> 0] | 0) == 36 : 0) {
                                c[l + (o << 2) >> 2] = 10;
                                s = c[j + ((a[f >> 0] | 0) + -48 << 3) >> 2] | 0;
                                f = r + 4 | 0;
                                break;
                            }
                            if (n | 0) {
                                m = -1;
                                break a;
                            }
                            if (M) {
                                J = (c[g >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                s = c[J >> 2] | 0;
                                c[g >> 2] = J + 4;
                            } else
                                s = 0;
                        } else {
                            s = -1;
                            f = r;
                        }
                    while (0);
                t = 0;
                while (1) {
                    o = (a[f >> 0] | 0) + -65 | 0;
                    if (o >>> 0 > 57) {
                        m = -1;
                        break a;
                    }
                    p = f + 1 | 0;
                    o = a[18495 + (t * 58 | 0) + o >> 0] | 0;
                    r = o & 255;
                    if ((r + -1 | 0) >>> 0 < 8) {
                        f = p;
                        t = r;
                    } else {
                        J = p;
                        break;
                    }
                }
                if (!(o << 24 >> 24)) {
                    m = -1;
                    break;
                }
                p = (u | 0) > -1;
                do
                    if (o << 24 >> 24 == 19)
                        if (p) {
                            m = -1;
                            break a;
                        } else
                            L = 52;
                    else {
                        if (p) {
                            c[l + (u << 2) >> 2] = r;
                            H = j + (u << 3) | 0;
                            I = c[H + 4 >> 2] | 0;
                            L = ca;
                            c[L >> 2] = c[H >> 2];
                            c[L + 4 >> 2] = I;
                            L = 52;
                            break;
                        }
                        if (!M) {
                            m = 0;
                            break a;
                        }
                        hd(ca, r, g);
                    }
                while (0);
                if ((L | 0) == 52 ? (L = 0, !M) : 0) {
                    o = w;
                    y = J;
                    continue;
                }
                u = a[f >> 0] | 0;
                u = (t | 0) != 0 & (u & 15 | 0) == 3 ? u & -33 : u;
                p = v & -65537;
                I = (v & 8192 | 0) == 0 ? v : p;
                f:
                    do
                        switch (u | 0) {
                        case 110:
                            switch (t | 0) {
                            case 0: {
                                    c[c[ca >> 2] >> 2] = m;
                                    o = w;
                                    y = J;
                                    continue a;
                                }
                            case 1: {
                                    c[c[ca >> 2] >> 2] = m;
                                    o = w;
                                    y = J;
                                    continue a;
                                }
                            case 2: {
                                    o = c[ca >> 2] | 0;
                                    c[o >> 2] = m;
                                    c[o + 4 >> 2] = ((m | 0) < 0) << 31 >> 31;
                                    o = w;
                                    y = J;
                                    continue a;
                                }
                            case 3: {
                                    b[c[ca >> 2] >> 1] = m;
                                    o = w;
                                    y = J;
                                    continue a;
                                }
                            case 4: {
                                    a[c[ca >> 2] >> 0] = m;
                                    o = w;
                                    y = J;
                                    continue a;
                                }
                            case 6: {
                                    c[c[ca >> 2] >> 2] = m;
                                    o = w;
                                    y = J;
                                    continue a;
                                }
                            case 7: {
                                    o = c[ca >> 2] | 0;
                                    c[o >> 2] = m;
                                    c[o + 4 >> 2] = ((m | 0) < 0) << 31 >> 31;
                                    o = w;
                                    y = J;
                                    continue a;
                                }
                            default: {
                                    o = w;
                                    y = J;
                                    continue a;
                                }
                            }
                        case 112: {
                                t = I | 8;
                                s = s >>> 0 > 8 ? s : 8;
                                u = 120;
                                L = 64;
                                break;
                            }
                        case 88:
                        case 120: {
                                t = I;
                                L = 64;
                                break;
                            }
                        case 111: {
                                p = ca;
                                o = c[p >> 2] | 0;
                                p = c[p + 4 >> 2] | 0;
                                if ((o | 0) == 0 & (p | 0) == 0)
                                    f = N;
                                else {
                                    f = N;
                                    do {
                                        f = f + -1 | 0;
                                        a[f >> 0] = o & 7 | 48;
                                        o = ae(o | 0, p | 0, 3) | 0;
                                        p = C;
                                    } while (!((o | 0) == 0 & (p | 0) == 0));
                                }
                                if (!(I & 8)) {
                                    o = I;
                                    t = 0;
                                    r = 18975;
                                    L = 77;
                                } else {
                                    t = V - f | 0;
                                    o = I;
                                    s = (s | 0) > (t | 0) ? s : t + 1 | 0;
                                    t = 0;
                                    r = 18975;
                                    L = 77;
                                }
                                break;
                            }
                        case 105:
                        case 100: {
                                o = ca;
                                f = c[o >> 2] | 0;
                                o = c[o + 4 >> 2] | 0;
                                if ((o | 0) < 0) {
                                    f = _d(0, 0, f | 0, o | 0) | 0;
                                    o = C;
                                    p = ca;
                                    c[p >> 2] = f;
                                    c[p + 4 >> 2] = o;
                                    p = 1;
                                    r = 18975;
                                    L = 76;
                                    break f;
                                }
                                if (!(I & 2048)) {
                                    r = I & 1;
                                    p = r;
                                    r = (r | 0) == 0 ? 18975 : 18977;
                                    L = 76;
                                } else {
                                    p = 1;
                                    r = 18976;
                                    L = 76;
                                }
                                break;
                            }
                        case 117: {
                                o = ca;
                                f = c[o >> 2] | 0;
                                o = c[o + 4 >> 2] | 0;
                                p = 0;
                                r = 18975;
                                L = 76;
                                break;
                            }
                        case 99: {
                                a[W >> 0] = c[ca >> 2];
                                f = W;
                                u = 1;
                                w = 0;
                                v = 18975;
                                o = N;
                                break;
                            }
                        case 109: {
                                o = jd(c[(Jc() | 0) >> 2] | 0) | 0;
                                L = 82;
                                break;
                            }
                        case 115: {
                                o = c[ca >> 2] | 0;
                                o = o | 0 ? o : 20877;
                                L = 82;
                                break;
                            }
                        case 67: {
                                c[ha >> 2] = c[ca >> 2];
                                c[X >> 2] = 0;
                                c[ca >> 2] = ha;
                                f = ha;
                                s = -1;
                                L = 86;
                                break;
                            }
                        case 83: {
                                f = c[ca >> 2] | 0;
                                if (!s) {
                                    yield* kd(e, 32, K, 0, I);
                                    f = 0;
                                    L = 97;
                                } else
                                    L = 86;
                                break;
                            }
                        case 65:
                        case 71:
                        case 70:
                        case 69:
                        case 97:
                        case 103:
                        case 102:
                        case 101: {
                                q = +h[ca >> 3];
                                c[fa >> 2] = 0;
                                h[k >> 3] = q;
                                if ((c[k + 4 >> 2] | 0) >= 0)
                                    if (!(I & 2048)) {
                                        H = I & 1;
                                        G = H;
                                        H = (H | 0) == 0 ? 20885 : 20890;
                                    } else {
                                        G = 1;
                                        H = 20887;
                                    }
                                else {
                                    q = -q;
                                    G = 1;
                                    H = 20884;
                                }
                                h[k >> 3] = q;
                                F = c[k + 4 >> 2] & 2146435072;
                                do
                                    if (F >>> 0 < 2146435072 | (F | 0) == 2146435072 & 0 < 0) {
                                        x = +nd(q, fa) * 2.0;
                                        o = x != 0.0;
                                        if (o)
                                            c[fa >> 2] = (c[fa >> 2] | 0) + -1;
                                        D = u | 32;
                                        if ((D | 0) == 97) {
                                            v = u & 32;
                                            y = (v | 0) == 0 ? H : H + 9 | 0;
                                            w = G | 2;
                                            f = 12 - s | 0;
                                            do
                                                if (!(s >>> 0 > 11 | (f | 0) == 0)) {
                                                    q = 8.0;
                                                    do {
                                                        f = f + -1 | 0;
                                                        q = q * 16.0;
                                                    } while ((f | 0) != 0);
                                                    if ((a[y >> 0] | 0) == 45) {
                                                        q = -(q + (-x - q));
                                                        break;
                                                    } else {
                                                        q = x + q - q;
                                                        break;
                                                    }
                                                } else
                                                    q = x;
                                            while (0);
                                            o = c[fa >> 2] | 0;
                                            f = (o | 0) < 0 ? 0 - o | 0 : o;
                                            f = id(f, ((f | 0) < 0) << 31 >> 31, $) | 0;
                                            if ((f | 0) == ($ | 0)) {
                                                a[aa >> 0] = 48;
                                                f = aa;
                                            }
                                            a[f + -1 >> 0] = (o >> 31 & 2) + 43;
                                            t = f + -2 | 0;
                                            a[t >> 0] = u + 15;
                                            r = (s | 0) < 1;
                                            p = (I & 8 | 0) == 0;
                                            o = ea;
                                            while (1) {
                                                H = ~~q;
                                                f = o + 1 | 0;
                                                a[o >> 0] = d[18959 + H >> 0] | v;
                                                q = (q - +(H | 0)) * 16.0;
                                                do
                                                    if ((f - Y | 0) == 1) {
                                                        if (p & (r & q == 0.0))
                                                            break;
                                                        a[f >> 0] = 46;
                                                        f = o + 2 | 0;
                                                    }
                                                while (0);
                                                if (!(q != 0.0))
                                                    break;
                                                else
                                                    o = f;
                                            }
                                            p = t;
                                            s = (s | 0) != 0 & (P + f | 0) < (s | 0) ? Q + s - p | 0 : O - p + f | 0;
                                            r = s + w | 0;
                                            yield* kd(e, 32, K, r, I);
                                            if (!(c[e >> 2] & 32))
                                                (yield* fd(y, w, e)) | 0;
                                            yield* kd(e, 48, K, r, I ^ 65536);
                                            o = f - Y | 0;
                                            if (!(c[e >> 2] & 32))
                                                (yield* fd(ea, o, e)) | 0;
                                            f = ba - p | 0;
                                            yield* kd(e, 48, s - (o + f) | 0, 0, 0);
                                            if (!(c[e >> 2] & 32))
                                                (yield* fd(t, f, e)) | 0;
                                            yield* kd(e, 32, K, r, I ^ 8192);
                                            f = (r | 0) < (K | 0) ? K : r;
                                            break;
                                        }
                                        f = (s | 0) < 0 ? 6 : s;
                                        if (o) {
                                            o = (c[fa >> 2] | 0) + -28 | 0;
                                            c[fa >> 2] = o;
                                            q = x * 268435456.0;
                                        } else {
                                            q = x;
                                            o = c[fa >> 2] | 0;
                                        }
                                        F = (o | 0) < 0 ? da : R;
                                        E = F;
                                        o = F;
                                        do {
                                            B = ~~q >>> 0;
                                            c[o >> 2] = B;
                                            o = o + 4 | 0;
                                            q = (q - +(B >>> 0)) * 1.0e9;
                                        } while (q != 0.0);
                                        p = o;
                                        o = c[fa >> 2] | 0;
                                        if ((o | 0) > 0) {
                                            s = F;
                                            while (1) {
                                                t = (o | 0) > 29 ? 29 : o;
                                                r = p + -4 | 0;
                                                do
                                                    if (r >>> 0 < s >>> 0)
                                                        r = s;
                                                    else {
                                                        o = 0;
                                                        do {
                                                            B = be(c[r >> 2] | 0, 0, t | 0) | 0;
                                                            B = ce(B | 0, C | 0, o | 0, 0) | 0;
                                                            o = C;
                                                            A = le(B | 0, o | 0, 1e9, 0) | 0;
                                                            c[r >> 2] = A;
                                                            o = ke(B | 0, o | 0, 1e9, 0) | 0;
                                                            r = r + -4 | 0;
                                                        } while (r >>> 0 >= s >>> 0);
                                                        if (!o) {
                                                            r = s;
                                                            break;
                                                        }
                                                        r = s + -4 | 0;
                                                        c[r >> 2] = o;
                                                    }
                                                while (0);
                                                while (1) {
                                                    if (p >>> 0 <= r >>> 0)
                                                        break;
                                                    o = p + -4 | 0;
                                                    if (!(c[o >> 2] | 0))
                                                        p = o;
                                                    else
                                                        break;
                                                }
                                                o = (c[fa >> 2] | 0) - t | 0;
                                                c[fa >> 2] = o;
                                                if ((o | 0) > 0)
                                                    s = r;
                                                else
                                                    break;
                                            }
                                        } else
                                            r = F;
                                        if ((o | 0) < 0) {
                                            y = ((f + 25 | 0) / 9 | 0) + 1 | 0;
                                            z = (D | 0) == 102;
                                            v = r;
                                            while (1) {
                                                w = 0 - o | 0;
                                                w = (w | 0) > 9 ? 9 : w;
                                                do
                                                    if (v >>> 0 < p >>> 0) {
                                                        o = (1 << w) + -1 | 0;
                                                        s = 1e9 >>> w;
                                                        r = 0;
                                                        t = v;
                                                        do {
                                                            B = c[t >> 2] | 0;
                                                            c[t >> 2] = (B >>> w) + r;
                                                            r = _(B & o, s) | 0;
                                                            t = t + 4 | 0;
                                                        } while (t >>> 0 < p >>> 0);
                                                        o = (c[v >> 2] | 0) == 0 ? v + 4 | 0 : v;
                                                        if (!r) {
                                                            r = o;
                                                            break;
                                                        }
                                                        c[p >> 2] = r;
                                                        r = o;
                                                        p = p + 4 | 0;
                                                    } else
                                                        r = (c[v >> 2] | 0) == 0 ? v + 4 | 0 : v;
                                                while (0);
                                                o = z ? F : r;
                                                p = (p - o >> 2 | 0) > (y | 0) ? o + (y << 2) | 0 : p;
                                                o = (c[fa >> 2] | 0) + w | 0;
                                                c[fa >> 2] = o;
                                                if ((o | 0) >= 0) {
                                                    z = r;
                                                    break;
                                                } else
                                                    v = r;
                                            }
                                        } else
                                            z = r;
                                        do
                                            if (z >>> 0 < p >>> 0) {
                                                o = (E - z >> 2) * 9 | 0;
                                                s = c[z >> 2] | 0;
                                                if (s >>> 0 < 10)
                                                    break;
                                                else
                                                    r = 10;
                                                do {
                                                    r = r * 10 | 0;
                                                    o = o + 1 | 0;
                                                } while (s >>> 0 >= r >>> 0);
                                            } else
                                                o = 0;
                                        while (0);
                                        A = (D | 0) == 103;
                                        B = (f | 0) != 0;
                                        r = f - ((D | 0) != 102 ? o : 0) + ((B & A) << 31 >> 31) | 0;
                                        if ((r | 0) < (((p - E >> 2) * 9 | 0) + -9 | 0)) {
                                            t = r + 9216 | 0;
                                            r = F + 4 + (((t | 0) / 9 | 0) + -1024 << 2) | 0;
                                            t = ((t | 0) % 9 | 0) + 1 | 0;
                                            if ((t | 0) < 9) {
                                                s = 10;
                                                do {
                                                    s = s * 10 | 0;
                                                    t = t + 1 | 0;
                                                } while ((t | 0) != 9);
                                            } else
                                                s = 10;
                                            w = c[r >> 2] | 0;
                                            y = (w >>> 0) % (s >>> 0) | 0;
                                            t = (r + 4 | 0) == (p | 0);
                                            do
                                                if (t & (y | 0) == 0)
                                                    s = z;
                                                else {
                                                    x = (((w >>> 0) / (s >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
                                                    v = (s | 0) / 2 | 0;
                                                    if (y >>> 0 < v >>> 0)
                                                        q = .5;
                                                    else
                                                        q = t & (y | 0) == (v | 0) ? 1.0 : 1.5;
                                                    do
                                                        if (G) {
                                                            if ((a[H >> 0] | 0) != 45)
                                                                break;
                                                            x = -x;
                                                            q = -q;
                                                        }
                                                    while (0);
                                                    t = w - y | 0;
                                                    c[r >> 2] = t;
                                                    if (!(x + q != x)) {
                                                        s = z;
                                                        break;
                                                    }
                                                    D = t + s | 0;
                                                    c[r >> 2] = D;
                                                    if (D >>> 0 > 999999999) {
                                                        o = z;
                                                        while (1) {
                                                            s = r + -4 | 0;
                                                            c[r >> 2] = 0;
                                                            if (s >>> 0 < o >>> 0) {
                                                                o = o + -4 | 0;
                                                                c[o >> 2] = 0;
                                                            }
                                                            D = (c[s >> 2] | 0) + 1 | 0;
                                                            c[s >> 2] = D;
                                                            if (D >>> 0 > 999999999)
                                                                r = s;
                                                            else {
                                                                v = o;
                                                                r = s;
                                                                break;
                                                            }
                                                        }
                                                    } else
                                                        v = z;
                                                    o = (E - v >> 2) * 9 | 0;
                                                    t = c[v >> 2] | 0;
                                                    if (t >>> 0 < 10) {
                                                        s = v;
                                                        break;
                                                    } else
                                                        s = 10;
                                                    do {
                                                        s = s * 10 | 0;
                                                        o = o + 1 | 0;
                                                    } while (t >>> 0 >= s >>> 0);
                                                    s = v;
                                                }
                                            while (0);
                                            D = r + 4 | 0;
                                            z = s;
                                            p = p >>> 0 > D >>> 0 ? D : p;
                                        }
                                        w = 0 - o | 0;
                                        while (1) {
                                            if (p >>> 0 <= z >>> 0) {
                                                y = 0;
                                                D = p;
                                                break;
                                            }
                                            r = p + -4 | 0;
                                            if (!(c[r >> 2] | 0))
                                                p = r;
                                            else {
                                                y = 1;
                                                D = p;
                                                break;
                                            }
                                        }
                                        do
                                            if (A) {
                                                f = (B & 1 ^ 1) + f | 0;
                                                if ((f | 0) > (o | 0) & (o | 0) > -5) {
                                                    u = u + -1 | 0;
                                                    f = f + -1 - o | 0;
                                                } else {
                                                    u = u + -2 | 0;
                                                    f = f + -1 | 0;
                                                }
                                                p = I & 8;
                                                if (p | 0)
                                                    break;
                                                do
                                                    if (y) {
                                                        p = c[D + -4 >> 2] | 0;
                                                        if (!p) {
                                                            r = 9;
                                                            break;
                                                        }
                                                        if (!((p >>> 0) % 10 | 0)) {
                                                            s = 10;
                                                            r = 0;
                                                        } else {
                                                            r = 0;
                                                            break;
                                                        }
                                                        do {
                                                            s = s * 10 | 0;
                                                            r = r + 1 | 0;
                                                        } while (!((p >>> 0) % (s >>> 0) | 0 | 0));
                                                    } else
                                                        r = 9;
                                                while (0);
                                                p = ((D - E >> 2) * 9 | 0) + -9 | 0;
                                                if ((u | 32 | 0) == 102) {
                                                    p = p - r | 0;
                                                    p = (p | 0) < 0 ? 0 : p;
                                                    f = (f | 0) < (p | 0) ? f : p;
                                                    p = 0;
                                                    break;
                                                } else {
                                                    p = p + o - r | 0;
                                                    p = (p | 0) < 0 ? 0 : p;
                                                    f = (f | 0) < (p | 0) ? f : p;
                                                    p = 0;
                                                    break;
                                                }
                                            } else
                                                p = I & 8;
                                        while (0);
                                        v = f | p;
                                        s = (v | 0) != 0 & 1;
                                        t = (u | 32 | 0) == 102;
                                        if (t) {
                                            o = (o | 0) > 0 ? o : 0;
                                            u = 0;
                                        } else {
                                            r = (o | 0) < 0 ? w : o;
                                            r = id(r, ((r | 0) < 0) << 31 >> 31, $) | 0;
                                            if ((ba - r | 0) < 2)
                                                do {
                                                    r = r + -1 | 0;
                                                    a[r >> 0] = 48;
                                                } while ((ba - r | 0) < 2);
                                            a[r + -1 >> 0] = (o >> 31 & 2) + 43;
                                            E = r + -2 | 0;
                                            a[E >> 0] = u;
                                            o = ba - E | 0;
                                            u = E;
                                        }
                                        w = G + 1 + f + s + o | 0;
                                        yield* kd(e, 32, K, w, I);
                                        if (!(c[e >> 2] & 32))
                                            (yield* fd(H, G, e)) | 0;
                                        yield* kd(e, 48, K, w, I ^ 65536);
                                        do
                                            if (t) {
                                                r = z >>> 0 > F >>> 0 ? F : z;
                                                o = r;
                                                do {
                                                    p = id(c[o >> 2] | 0, 0, S) | 0;
                                                    do
                                                        if ((o | 0) == (r | 0)) {
                                                            if ((p | 0) != (S | 0))
                                                                break;
                                                            a[U >> 0] = 48;
                                                            p = U;
                                                        } else {
                                                            if (p >>> 0 <= ea >>> 0)
                                                                break;
                                                            $d(ea | 0, 48, p - Y | 0) | 0;
                                                            do
                                                                p = p + -1 | 0;
                                                            while (p >>> 0 > ea >>> 0);
                                                        }
                                                    while (0);
                                                    if (!(c[e >> 2] & 32))
                                                        (yield* fd(p, T - p | 0, e)) | 0;
                                                    o = o + 4 | 0;
                                                } while (o >>> 0 <= F >>> 0);
                                                do
                                                    if (v | 0) {
                                                        if (c[e >> 2] & 32 | 0)
                                                            break;
                                                        (yield* fd(20919, 1, e)) | 0;
                                                    }
                                                while (0);
                                                if ((f | 0) > 0 & o >>> 0 < D >>> 0) {
                                                    p = o;
                                                    while (1) {
                                                        o = id(c[p >> 2] | 0, 0, S) | 0;
                                                        if (o >>> 0 > ea >>> 0) {
                                                            $d(ea | 0, 48, o - Y | 0) | 0;
                                                            do
                                                                o = o + -1 | 0;
                                                            while (o >>> 0 > ea >>> 0);
                                                        }
                                                        if (!(c[e >> 2] & 32))
                                                            (yield* fd(o, (f | 0) > 9 ? 9 : f, e)) | 0;
                                                        p = p + 4 | 0;
                                                        o = f + -9 | 0;
                                                        if (!((f | 0) > 9 & p >>> 0 < D >>> 0)) {
                                                            f = o;
                                                            break;
                                                        } else
                                                            f = o;
                                                    }
                                                }
                                                yield* kd(e, 48, f + 9 | 0, 9, 0);
                                            } else {
                                                t = y ? D : z + 4 | 0;
                                                if ((f | 0) > -1) {
                                                    s = (p | 0) == 0;
                                                    r = z;
                                                    do {
                                                        o = id(c[r >> 2] | 0, 0, S) | 0;
                                                        if ((o | 0) == (S | 0)) {
                                                            a[U >> 0] = 48;
                                                            o = U;
                                                        }
                                                        do
                                                            if ((r | 0) == (z | 0)) {
                                                                p = o + 1 | 0;
                                                                if (!(c[e >> 2] & 32))
                                                                    (yield* fd(o, 1, e)) | 0;
                                                                if (s & (f | 0) < 1) {
                                                                    o = p;
                                                                    break;
                                                                }
                                                                if (c[e >> 2] & 32 | 0) {
                                                                    o = p;
                                                                    break;
                                                                }
                                                                (yield* fd(20919, 1, e)) | 0;
                                                                o = p;
                                                            } else {
                                                                if (o >>> 0 <= ea >>> 0)
                                                                    break;
                                                                $d(ea | 0, 48, o + Z | 0) | 0;
                                                                do
                                                                    o = o + -1 | 0;
                                                                while (o >>> 0 > ea >>> 0);
                                                            }
                                                        while (0);
                                                        p = T - o | 0;
                                                        if (!(c[e >> 2] & 32))
                                                            (yield* fd(o, (f | 0) > (p | 0) ? p : f, e)) | 0;
                                                        f = f - p | 0;
                                                        r = r + 4 | 0;
                                                    } while (r >>> 0 < t >>> 0 & (f | 0) > -1);
                                                }
                                                yield* kd(e, 48, f + 18 | 0, 18, 0);
                                                if (c[e >> 2] & 32 | 0)
                                                    break;
                                                (yield* fd(u, ba - u | 0, e)) | 0;
                                            }
                                        while (0);
                                        yield* kd(e, 32, K, w, I ^ 8192);
                                        f = (w | 0) < (K | 0) ? K : w;
                                    } else {
                                        t = (u & 32 | 0) != 0;
                                        s = q != q | 0.0 != 0.0;
                                        o = s ? 0 : G;
                                        r = o + 3 | 0;
                                        yield* kd(e, 32, K, r, p);
                                        f = c[e >> 2] | 0;
                                        if (!(f & 32)) {
                                            (yield* fd(H, o, e)) | 0;
                                            f = c[e >> 2] | 0;
                                        }
                                        if (!(f & 32))
                                            (yield* fd(s ? t ? 20911 : 20915 : t ? 20903 : 20907, 3, e)) | 0;
                                        yield* kd(e, 32, K, r, I ^ 8192);
                                        f = (r | 0) < (K | 0) ? K : r;
                                    }
                                while (0);
                                o = f;
                                y = J;
                                continue a;
                            }
                        default: {
                                f = y;
                                p = I;
                                u = s;
                                w = 0;
                                v = 18975;
                                o = N;
                            }
                        }
                    while (0);
                g:
                    do
                        if ((L | 0) == 64) {
                            p = ca;
                            o = c[p >> 2] | 0;
                            p = c[p + 4 >> 2] | 0;
                            r = u & 32;
                            if (!((o | 0) == 0 & (p | 0) == 0)) {
                                f = N;
                                do {
                                    f = f + -1 | 0;
                                    a[f >> 0] = d[18959 + (o & 15) >> 0] | r;
                                    o = ae(o | 0, p | 0, 4) | 0;
                                    p = C;
                                } while (!((o | 0) == 0 & (p | 0) == 0));
                                L = ca;
                                if ((t & 8 | 0) == 0 | (c[L >> 2] | 0) == 0 & (c[L + 4 >> 2] | 0) == 0) {
                                    o = t;
                                    t = 0;
                                    r = 18975;
                                    L = 77;
                                } else {
                                    o = t;
                                    t = 2;
                                    r = 18975 + (u >> 4) | 0;
                                    L = 77;
                                }
                            } else {
                                f = N;
                                o = t;
                                t = 0;
                                r = 18975;
                                L = 77;
                            }
                        } else if ((L | 0) == 76) {
                            f = id(f, o, N) | 0;
                            o = I;
                            t = p;
                            L = 77;
                        } else if ((L | 0) == 82) {
                            L = 0;
                            I = Sc(o, 0, s) | 0;
                            H = (I | 0) == 0;
                            f = o;
                            u = H ? s : I - o | 0;
                            w = 0;
                            v = 18975;
                            o = H ? o + s | 0 : I;
                        } else if ((L | 0) == 86) {
                            L = 0;
                            p = 0;
                            o = 0;
                            t = f;
                            while (1) {
                                r = c[t >> 2] | 0;
                                if (!r)
                                    break;
                                o = ld(ga, r) | 0;
                                if ((o | 0) < 0 | o >>> 0 > (s - p | 0) >>> 0)
                                    break;
                                p = o + p | 0;
                                if (s >>> 0 > p >>> 0)
                                    t = t + 4 | 0;
                                else
                                    break;
                            }
                            if ((o | 0) < 0) {
                                m = -1;
                                break a;
                            }
                            yield* kd(e, 32, K, p, I);
                            if (!p) {
                                f = 0;
                                L = 97;
                            } else {
                                r = 0;
                                while (1) {
                                    o = c[f >> 2] | 0;
                                    if (!o) {
                                        f = p;
                                        L = 97;
                                        break g;
                                    }
                                    o = ld(ga, o) | 0;
                                    r = o + r | 0;
                                    if ((r | 0) > (p | 0)) {
                                        f = p;
                                        L = 97;
                                        break g;
                                    }
                                    if (!(c[e >> 2] & 32))
                                        (yield* fd(ga, o, e)) | 0;
                                    if (r >>> 0 >= p >>> 0) {
                                        f = p;
                                        L = 97;
                                        break;
                                    } else
                                        f = f + 4 | 0;
                                }
                            }
                        }
                    while (0);
                if ((L | 0) == 97) {
                    L = 0;
                    yield* kd(e, 32, K, f, I ^ 8192);
                    o = (K | 0) > (f | 0) ? K : f;
                    y = J;
                    continue;
                }
                if ((L | 0) == 77) {
                    L = 0;
                    p = (s | 0) > -1 ? o & -65537 : o;
                    o = ca;
                    o = (c[o >> 2] | 0) != 0 | (c[o + 4 >> 2] | 0) != 0;
                    if ((s | 0) != 0 | o) {
                        u = (o & 1 ^ 1) + (V - f) | 0;
                        u = (s | 0) > (u | 0) ? s : u;
                        w = t;
                        v = r;
                        o = N;
                    } else {
                        f = N;
                        u = 0;
                        w = t;
                        v = r;
                        o = N;
                    }
                }
                t = o - f | 0;
                r = (u | 0) < (t | 0) ? t : u;
                s = w + r | 0;
                o = (K | 0) < (s | 0) ? s : K;
                yield* kd(e, 32, o, s, p);
                if (!(c[e >> 2] & 32))
                    (yield* fd(v, w, e)) | 0;
                yield* kd(e, 48, o, s, p ^ 65536);
                yield* kd(e, 48, r, t, 0);
                if (!(c[e >> 2] & 32))
                    (yield* fd(f, t, e)) | 0;
                yield* kd(e, 32, o, s, p ^ 8192);
                y = J;
            }
        h:
            do
                if ((L | 0) == 244)
                    if (!e)
                        if (n) {
                            m = 1;
                            while (1) {
                                n = c[l + (m << 2) >> 2] | 0;
                                if (!n)
                                    break;
                                hd(j + (m << 3) | 0, n, g);
                                m = m + 1 | 0;
                                if ((m | 0) >= 10) {
                                    m = 1;
                                    break h;
                                }
                            }
                            if ((m | 0) < 10)
                                while (1) {
                                    if (c[l + (m << 2) >> 2] | 0) {
                                        m = -1;
                                        break h;
                                    }
                                    m = m + 1 | 0;
                                    if ((m | 0) >= 10) {
                                        m = 1;
                                        break;
                                    }
                                }
                            else
                                m = 1;
                        } else
                            m = 0;
            while (0);
        i = ia;
        return m | 0;
    }
    function* fd(b, d, e) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, i = 0;
        f = e + 16 | 0;
        g = c[f >> 2] | 0;
        if (!g)
            if (!(gd(e) | 0)) {
                g = c[f >> 2] | 0;
                h = 5;
            } else
                f = 0;
        else
            h = 5;
        a:
            do
                if ((h | 0) == 5) {
                    i = e + 20 | 0;
                    f = c[i >> 2] | 0;
                    h = f;
                    if ((g - f | 0) >>> 0 < d >>> 0) {
                        f = (yield* Ka[c[e + 36 >> 2] & 7](e, b, d)) | 0;
                        break;
                    }
                    b:
                        do
                            if ((a[e + 75 >> 0] | 0) > -1) {
                                f = d;
                                while (1) {
                                    if (!f) {
                                        g = h;
                                        f = 0;
                                        break b;
                                    }
                                    g = f + -1 | 0;
                                    if ((a[b + g >> 0] | 0) == 10)
                                        break;
                                    else
                                        f = g;
                                }
                                if (((yield* Ka[c[e + 36 >> 2] & 7](e, b, f)) | 0) >>> 0 < f >>> 0)
                                    break a;
                                d = d - f | 0;
                                b = b + f | 0;
                                g = c[i >> 2] | 0;
                            } else {
                                g = h;
                                f = 0;
                            }
                        while (0);
                    de(g | 0, b | 0, d | 0) | 0;
                    c[i >> 2] = (c[i >> 2] | 0) + d;
                    f = f + d | 0;
                }
            while (0);
        return f | 0;
    }
    function gd(b) {
        b = b | 0;
        var d = 0, e = 0;
        d = b + 74 | 0;
        e = a[d >> 0] | 0;
        a[d >> 0] = e + 255 | e;
        d = c[b >> 2] | 0;
        if (!(d & 8)) {
            c[b + 8 >> 2] = 0;
            c[b + 4 >> 2] = 0;
            d = c[b + 44 >> 2] | 0;
            c[b + 28 >> 2] = d;
            c[b + 20 >> 2] = d;
            c[b + 16 >> 2] = d + (c[b + 48 >> 2] | 0);
            d = 0;
        } else {
            c[b >> 2] = d | 32;
            d = -1;
        }
        return d | 0;
    }
    function hd(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0.0;
        a:
            do
                if (b >>> 0 <= 20)
                    do
                        switch (b | 0) {
                        case 9: {
                                e = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                b = c[e >> 2] | 0;
                                c[d >> 2] = e + 4;
                                c[a >> 2] = b;
                                break a;
                            }
                        case 10: {
                                e = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                b = c[e >> 2] | 0;
                                c[d >> 2] = e + 4;
                                e = a;
                                c[e >> 2] = b;
                                c[e + 4 >> 2] = ((b | 0) < 0) << 31 >> 31;
                                break a;
                            }
                        case 11: {
                                e = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                b = c[e >> 2] | 0;
                                c[d >> 2] = e + 4;
                                e = a;
                                c[e >> 2] = b;
                                c[e + 4 >> 2] = 0;
                                break a;
                            }
                        case 12: {
                                e = (c[d >> 2] | 0) + (8 - 1) & ~(8 - 1);
                                b = e;
                                f = c[b >> 2] | 0;
                                b = c[b + 4 >> 2] | 0;
                                c[d >> 2] = e + 8;
                                e = a;
                                c[e >> 2] = f;
                                c[e + 4 >> 2] = b;
                                break a;
                            }
                        case 13: {
                                f = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                e = c[f >> 2] | 0;
                                c[d >> 2] = f + 4;
                                e = (e & 65535) << 16 >> 16;
                                f = a;
                                c[f >> 2] = e;
                                c[f + 4 >> 2] = ((e | 0) < 0) << 31 >> 31;
                                break a;
                            }
                        case 14: {
                                f = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                e = c[f >> 2] | 0;
                                c[d >> 2] = f + 4;
                                f = a;
                                c[f >> 2] = e & 65535;
                                c[f + 4 >> 2] = 0;
                                break a;
                            }
                        case 15: {
                                f = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                e = c[f >> 2] | 0;
                                c[d >> 2] = f + 4;
                                e = (e & 255) << 24 >> 24;
                                f = a;
                                c[f >> 2] = e;
                                c[f + 4 >> 2] = ((e | 0) < 0) << 31 >> 31;
                                break a;
                            }
                        case 16: {
                                f = (c[d >> 2] | 0) + (4 - 1) & ~(4 - 1);
                                e = c[f >> 2] | 0;
                                c[d >> 2] = f + 4;
                                f = a;
                                c[f >> 2] = e & 255;
                                c[f + 4 >> 2] = 0;
                                break a;
                            }
                        case 17: {
                                f = (c[d >> 2] | 0) + (8 - 1) & ~(8 - 1);
                                g = +h[f >> 3];
                                c[d >> 2] = f + 8;
                                h[a >> 3] = g;
                                break a;
                            }
                        case 18: {
                                f = (c[d >> 2] | 0) + (8 - 1) & ~(8 - 1);
                                g = +h[f >> 3];
                                c[d >> 2] = f + 8;
                                h[a >> 3] = g;
                                break a;
                            }
                        default:
                            break a;
                        }
                    while (0);
            while (0);
        return;
    }
    function id(b, c, d) {
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0;
        if (c >>> 0 > 0 | (c | 0) == 0 & b >>> 0 > 4294967295)
            while (1) {
                e = le(b | 0, c | 0, 10, 0) | 0;
                d = d + -1 | 0;
                a[d >> 0] = e | 48;
                e = ke(b | 0, c | 0, 10, 0) | 0;
                if (c >>> 0 > 9 | (c | 0) == 9 & b >>> 0 > 4294967295) {
                    b = e;
                    c = C;
                } else {
                    b = e;
                    break;
                }
            }
        if (b)
            while (1) {
                d = d + -1 | 0;
                a[d >> 0] = (b >>> 0) % 10 | 0 | 48;
                if (b >>> 0 < 10)
                    break;
                else
                    b = (b >>> 0) / 10 | 0;
            }
        return d | 0;
    }
    function jd(b) {
        b = b | 0;
        var c = 0, e = 0;
        c = 0;
        while (1) {
            if ((d[18985 + c >> 0] | 0) == (b | 0)) {
                e = 2;
                break;
            }
            c = c + 1 | 0;
            if ((c | 0) == 87) {
                c = 87;
                b = 19073;
                e = 5;
                break;
            }
        }
        if ((e | 0) == 2)
            if (!c)
                b = 19073;
            else {
                b = 19073;
                e = 5;
            }
        if ((e | 0) == 5)
            while (1) {
                e = b;
                while (1) {
                    b = e + 1 | 0;
                    if (!(a[e >> 0] | 0))
                        break;
                    else
                        e = b;
                }
                c = c + -1 | 0;
                if (!c)
                    break;
                else
                    e = 5;
            }
        return b | 0;
    }
    function* kd(a, b, d, e, f) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        var g = 0, h = 0, j = 0;
        j = i;
        i = i + 256 | 0;
        h = j;
        do
            if ((d | 0) > (e | 0) & (f & 73728 | 0) == 0) {
                f = d - e | 0;
                $d(h | 0, b | 0, (f >>> 0 > 256 ? 256 : f) | 0) | 0;
                b = c[a >> 2] | 0;
                g = (b & 32 | 0) == 0;
                if (f >>> 0 > 255) {
                    e = d - e | 0;
                    do {
                        if (g) {
                            (yield* fd(h, 256, a)) | 0;
                            b = c[a >> 2] | 0;
                        }
                        f = f + -256 | 0;
                        g = (b & 32 | 0) == 0;
                    } while (f >>> 0 > 255);
                    if (g)
                        f = e & 255;
                    else
                        break;
                } else if (!g)
                    break;
                (yield* fd(h, f, a)) | 0;
            }
        while (0);
        i = j;
        return;
    }
    function ld(a, b) {
        a = a | 0;
        b = b | 0;
        if (!a)
            a = 0;
        else
            a = md(a, b, 0) | 0;
        return a | 0;
    }
    function md(b, d, e) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        do
            if (b) {
                if (d >>> 0 < 128) {
                    a[b >> 0] = d;
                    b = 1;
                    break;
                }
                if (d >>> 0 < 2048) {
                    a[b >> 0] = d >>> 6 | 192;
                    a[b + 1 >> 0] = d & 63 | 128;
                    b = 2;
                    break;
                }
                if (d >>> 0 < 55296 | (d & -8192 | 0) == 57344) {
                    a[b >> 0] = d >>> 12 | 224;
                    a[b + 1 >> 0] = d >>> 6 & 63 | 128;
                    a[b + 2 >> 0] = d & 63 | 128;
                    b = 3;
                    break;
                }
                if ((d + -65536 | 0) >>> 0 < 1048576) {
                    a[b >> 0] = d >>> 18 | 240;
                    a[b + 1 >> 0] = d >>> 12 & 63 | 128;
                    a[b + 2 >> 0] = d >>> 6 & 63 | 128;
                    a[b + 3 >> 0] = d & 63 | 128;
                    b = 4;
                    break;
                } else {
                    c[(Jc() | 0) >> 2] = 84;
                    b = -1;
                    break;
                }
            } else
                b = 1;
        while (0);
        return b | 0;
    }
    function nd(a, b) {
        a = +a;
        b = b | 0;
        return + +od(a, b);
    }
    function od(a, b) {
        a = +a;
        b = b | 0;
        var d = 0, e = 0, f = 0;
        h[k >> 3] = a;
        d = c[k >> 2] | 0;
        e = c[k + 4 >> 2] | 0;
        f = ae(d | 0, e | 0, 52) | 0;
        f = f & 2047;
        switch (f | 0) {
        case 0: {
                if (a != 0.0) {
                    a = +od(a * 18446744073709551616.0, b);
                    d = (c[b >> 2] | 0) + -64 | 0;
                } else
                    d = 0;
                c[b >> 2] = d;
                break;
            }
        case 2047:
            break;
        default: {
                c[b >> 2] = f + -1022;
                c[k >> 2] = d;
                c[k + 4 >> 2] = e & -2146435073 | 1071644672;
                a = +h[k >> 3];
            }
        }
        return +a;
    }
    function pd(a, b) {
        a = a | 0;
        b = b | 0;
        qd(a, b) | 0;
        return a | 0;
    }
    function qd(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0;
        e = d;
        a:
            do
                if (!((e ^ b) & 3)) {
                    if (e & 3)
                        do {
                            e = a[d >> 0] | 0;
                            a[b >> 0] = e;
                            if (!(e << 24 >> 24))
                                break a;
                            d = d + 1 | 0;
                            b = b + 1 | 0;
                        } while ((d & 3 | 0) != 0);
                    e = c[d >> 2] | 0;
                    if (!((e & -2139062144 ^ -2139062144) & e + -16843009)) {
                        f = b;
                        while (1) {
                            d = d + 4 | 0;
                            b = f + 4 | 0;
                            c[f >> 2] = e;
                            e = c[d >> 2] | 0;
                            if ((e & -2139062144 ^ -2139062144) & e + -16843009 | 0)
                                break;
                            else
                                f = b;
                        }
                    }
                    f = 8;
                } else
                    f = 8;
            while (0);
        if ((f | 0) == 8) {
            f = a[d >> 0] | 0;
            a[b >> 0] = f;
            if (f << 24 >> 24)
                do {
                    d = d + 1 | 0;
                    b = b + 1 | 0;
                    f = a[d >> 0] | 0;
                    a[b >> 0] = f;
                } while (f << 24 >> 24 != 0);
        }
        return b | 0;
    }
    function rd(b, c) {
        b = b | 0;
        c = c | 0;
        var d = 0, e = 0;
        e = a[b >> 0] | 0;
        d = a[c >> 0] | 0;
        if (e << 24 >> 24 == 0 ? 1 : e << 24 >> 24 != d << 24 >> 24)
            c = e;
        else {
            do {
                b = b + 1 | 0;
                c = c + 1 | 0;
                e = a[b >> 0] | 0;
                d = a[c >> 0] | 0;
            } while (!(e << 24 >> 24 == 0 ? 1 : e << 24 >> 24 != d << 24 >> 24));
            c = e;
        }
        return (c & 255) - (d & 255) | 0;
    }
    function sd(b, d, e) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0;
        m = i;
        i = i + 16 | 0;
        l = m + 4 | 0;
        k = m;
        f = c[397] | 0;
        if ((f | 0) == 0 | 0 != 0) {
            c[5311] = 0;
            c[397] = 1;
            f = 1;
        }
        a:
            do
                if (((f | 0) < (b | 0) ? (g = c[d + (f << 2) >> 2] | 0, (g | 0) != 0) : 0) ? (a[g >> 0] | 0) == 45 : 0) {
                    switch (a[g + 1 >> 0] | 0) {
                    case 0: {
                            f = -1;
                            break a;
                        }
                    case 45: {
                            if (!(a[g + 2 >> 0] | 0)) {
                                c[397] = f + 1;
                                f = -1;
                                break a;
                            }
                            break;
                        }
                    default: {
                        }
                    }
                    f = c[5311] | 0;
                    if (!f) {
                        c[5311] = 1;
                        f = 1;
                    }
                    f = td(l, g + f | 0, 4) | 0;
                    if ((f | 0) < 0) {
                        c[l >> 2] = 65533;
                        j = 1;
                    } else
                        j = f;
                    f = c[397] | 0;
                    n = c[d + (f << 2) >> 2] | 0;
                    g = c[5311] | 0;
                    h = n + g | 0;
                    g = g + j | 0;
                    c[5311] = g;
                    if (!(a[n + g >> 0] | 0)) {
                        c[397] = f + 1;
                        c[5311] = 0;
                    }
                    f = td(k, e, 4) | 0;
                    b:
                        do
                            if (!f)
                                g = 0;
                            else {
                                g = 0;
                                do {
                                    if ((c[k >> 2] | 0) == (c[l >> 2] | 0))
                                        break b;
                                    g = ((f | 0) < 1 ? 1 : f) + g | 0;
                                    f = td(k, e + g | 0, 4) | 0;
                                } while ((f | 0) != 0);
                            }
                        while (0);
                    f = c[k >> 2] | 0;
                    if ((f | 0) != (c[l >> 2] | 0)) {
                        if (!((a[e >> 0] | 0) != 58 & 1 != 0)) {
                            f = 63;
                            break;
                        }
                        f = c[d >> 2] | 0;
                        ud(2, f, Rc(f) | 0) | 0;
                        ud(2, 20921, 18) | 0;
                        ud(2, h, j) | 0;
                        ud(2, 20940, 1) | 0;
                        f = 63;
                        break;
                    }
                    if ((a[e + (g + 1) >> 0] | 0) == 58) {
                        g = c[397] | 0;
                        if ((g | 0) < (b | 0)) {
                            c[397] = g + 1;
                            c[5312] = (c[d + (g << 2) >> 2] | 0) + (c[5311] | 0);
                            c[5311] = 0;
                            break;
                        }
                        if ((a[e >> 0] | 0) != 58)
                            if (!1)
                                f = 63;
                            else {
                                f = c[d >> 2] | 0;
                                ud(2, f, Rc(f) | 0) | 0;
                                ud(2, 20942, 31) | 0;
                                ud(2, h, j) | 0;
                                ud(2, 20940, 1) | 0;
                                f = 63;
                            }
                        else
                            f = 58;
                    }
                } else
                    f = -1;
            while (0);
        i = m;
        return f | 0;
    }
    function td(b, e, f) {
        b = b | 0;
        e = e | 0;
        f = f | 0;
        var g = 0, h = 0, j = 0, k = 0;
        k = i;
        i = i + 16 | 0;
        g = k;
        a:
            do
                if (!e)
                    g = 0;
                else {
                    do
                        if (f | 0) {
                            j = (b | 0) == 0 ? g : b;
                            g = a[e >> 0] | 0;
                            b = g & 255;
                            if (g << 24 >> 24 > -1) {
                                c[j >> 2] = b;
                                g = g << 24 >> 24 != 0 & 1;
                                break a;
                            }
                            g = b + -194 | 0;
                            if (g >>> 0 <= 50) {
                                b = e + 1 | 0;
                                h = c[1592 + (g << 2) >> 2] | 0;
                                if (f >>> 0 < 4 ? h & -2147483648 >>> ((f * 6 | 0) + -6 | 0) | 0 : 0)
                                    break;
                                g = d[b >> 0] | 0;
                                f = g >>> 3;
                                if ((f + -16 | f + (h >> 26)) >>> 0 <= 7) {
                                    g = g + -128 | h << 6;
                                    if ((g | 0) >= 0) {
                                        c[j >> 2] = g;
                                        g = 2;
                                        break a;
                                    }
                                    b = d[e + 2 >> 0] | 0;
                                    if ((b & 192 | 0) == 128) {
                                        b = b + -128 | g << 6;
                                        if ((b | 0) >= 0) {
                                            c[j >> 2] = b;
                                            g = 3;
                                            break a;
                                        }
                                        g = d[e + 3 >> 0] | 0;
                                        if ((g & 192 | 0) == 128) {
                                            c[j >> 2] = g + -128 | b << 6;
                                            g = 4;
                                            break a;
                                        }
                                    }
                                }
                            }
                        }
                    while (0);
                    c[(Jc() | 0) >> 2] = 84;
                    g = -1;
                }
            while (0);
        i = k;
        return g | 0;
    }
    function ud(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0;
        e = i;
        i = i + 16 | 0;
        f = e;
        c[f >> 2] = a;
        c[f + 4 >> 2] = b;
        c[f + 8 >> 2] = d;
        a = Ic(Ba(4, f | 0) | 0) | 0;
        i = e;
        return a | 0;
    }
    function vd(a, b, c, d, e) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        e = e | 0;
        return wd(a, b, c, d, e, 0) | 0;
    }
    function wd(b, d, e, f, g, h) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        g = g | 0;
        h = h | 0;
        var i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
        i = c[397] | 0;
        if ((i | 0) == 0 | 0 != 0) {
            c[5311] = 0;
            c[397] = 1;
            i = 1;
        }
        a:
            do
                if (((i | 0) < (b | 0) ? (l = c[d + (i << 2) >> 2] | 0, (l | 0) != 0) : 0) ? (a[l >> 0] | 0) == 45 : 0) {
                    k = l + 1 | 0;
                    j = a[k >> 0] | 0;
                    if (!h) {
                        if (j << 24 >> 24 == 45 ? a[l + 2 >> 0] | 0 : 0) {
                            j = 45;
                            o = 10;
                        }
                    } else if (j << 24 >> 24)
                        o = 10;
                    if ((o | 0) == 10) {
                        h = c[f >> 2] | 0;
                        n = j << 24 >> 24 == 45;
                        b:
                            do
                                if (h | 0) {
                                    m = n ? l + 2 | 0 : k;
                                    k = h;
                                    h = 0;
                                    c:
                                        while (1) {
                                            j = a[k >> 0] | 0;
                                            d:
                                                do
                                                    if (!(j << 24 >> 24)) {
                                                        j = m;
                                                        o = 15;
                                                    } else {
                                                        l = j;
                                                        j = m;
                                                        while (1) {
                                                            if (l << 24 >> 24 != (a[j >> 0] | 0))
                                                                break d;
                                                            k = k + 1 | 0;
                                                            j = j + 1 | 0;
                                                            l = a[k >> 0] | 0;
                                                            if (!(l << 24 >> 24)) {
                                                                o = 15;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                while (0);
                                            e:
                                                do
                                                    if ((o | 0) == 15) {
                                                        o = 0;
                                                        k = a[j >> 0] | 0;
                                                        switch (k << 24 >> 24) {
                                                        case 61:
                                                        case 0:
                                                            break;
                                                        default:
                                                            break e;
                                                        }
                                                        l = c[f + (h << 4) + 4 >> 2] | 0;
                                                        if (k << 24 >> 24 != 61) {
                                                            j = l;
                                                            o = 19;
                                                            break c;
                                                        }
                                                        if (l | 0) {
                                                            o = 18;
                                                            break c;
                                                        }
                                                    }
                                                while (0);
                                            h = h + 1 | 0;
                                            k = c[f + (h << 4) >> 2] | 0;
                                            if (!k)
                                                break b;
                                        }
                                    if ((o | 0) == 18)
                                        c[5312] = j + 1;
                                    else if ((o | 0) == 19)
                                        if ((j | 0) == 1) {
                                            i = i + 1 | 0;
                                            c[397] = i;
                                            o = c[d + (i << 2) >> 2] | 0;
                                            c[5312] = o;
                                            if (!o) {
                                                i = 58;
                                                break a;
                                            }
                                        }
                                    c[397] = i + 1;
                                    if (g | 0)
                                        c[g >> 2] = h;
                                    j = c[f + (h << 4) + 8 >> 2] | 0;
                                    i = c[f + (h << 4) + 12 >> 2] | 0;
                                    if (!j)
                                        break a;
                                    c[j >> 2] = i;
                                    i = 0;
                                    break a;
                                }
                            while (0);
                        if (n) {
                            c[397] = i + 1;
                            i = 63;
                            break;
                        }
                    }
                    i = sd(b, d, e) | 0;
                } else
                    i = -1;
            while (0);
        return i | 0;
    }
    function xd(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0;
        g = i;
        i = i + 32 | 0;
        f = g + 16 | 0;
        e = g;
        if (Sc(20974, a[d >> 0] | 0, 4) | 0) {
            h = yd(d) | 0 | 32768;
            c[e >> 2] = b;
            c[e + 4 >> 2] = h;
            c[e + 8 >> 2] = 438;
            e = Ic(Aa(5, e | 0) | 0) | 0;
            if ((e | 0) >= 0) {
                b = Tc(e, d) | 0;
                if (!b) {
                    c[f >> 2] = e;
                    ja(6, f | 0) | 0;
                    b = 0;
                }
            } else
                b = 0;
        } else {
            c[(Jc() | 0) >> 2] = 22;
            b = 0;
        }
        i = g;
        return b | 0;
    }
    function yd(b) {
        b = b | 0;
        var c = 0, d = 0, e = 0;
        d = (Uc(b, 43) | 0) == 0;
        c = a[b >> 0] | 0;
        d = d ? c << 24 >> 24 != 114 & 1 : 2;
        e = (Uc(b, 120) | 0) == 0;
        d = e ? d : d | 128;
        b = (Uc(b, 101) | 0) == 0;
        b = b ? d : d | 524288;
        b = c << 24 >> 24 == 114 ? b : b | 64;
        b = c << 24 >> 24 == 119 ? b | 512 : b;
        return (c << 24 >> 24 == 97 ? b | 1024 : b) | 0;
    }
    function zd(a) {
        a = a | 0;
        return ((a | 0) == 32 | (a + -9 | 0) >>> 0 < 5) & 1 | 0;
    }
    function* Ad(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0;
        e = i;
        i = i + 16 | 0;
        f = e;
        c[f >> 2] = d;
        d = (yield* dd(a, b, f)) | 0;
        i = e;
        return d | 0;
    }
    function* Bd(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0;
        e = i;
        i = i + 16 | 0;
        f = e;
        c[f >> 2] = d;
        d = (yield* Cd(a, b, f)) | 0;
        i = e;
        return d | 0;
    }
    function* Cd(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        return (yield* bd(a, 2147483647, b, c)) | 0;
    }
    function Dd() {
        var a = 0, b = 0, d = 0, e = 0;
        ya(21300);
        if (!31) {
            a = (_(c[566] | 0, 1103515245) | 0) + 12345 & 2147483647;
            c[566] = a;
        } else {
            b = c[5327] | 0;
            d = c[597] | 0;
            e = 2264 + (d << 2) | 0;
            a = (c[e >> 2] | 0) + (c[2264 + (b << 2) >> 2] | 0) | 0;
            c[e >> 2] = a;
            d = d + 1 | 0;
            c[597] = (d | 0) == 31 ? 0 : d;
            b = b + 1 | 0;
            c[5327] = (b | 0) == 31 ? 0 : b;
            a = a >>> 1;
        }
        va(21300);
        return a | 0;
    }
    function Ed(a, b) {
        a = a | 0;
        b = b | 0;
        var d = 0, e = 0;
        d = i;
        i = i + 16 | 0;
        e = d;
        c[e >> 2] = b;
        b = ((ad(a, 21505, e) | 0) != 0) << 31 >> 31;
        i = d;
        return b | 0;
    }
    function* Fd(a, b, d, e) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0;
        f = _(d, b) | 0;
        if ((c[e + 76 >> 2] | 0) > -1) {
            g = (Wc(e) | 0) == 0;
            a = (yield* fd(a, f, e)) | 0;
            if (!g)
                Nc(e);
        } else
            a = (yield* fd(a, f, e)) | 0;
        if ((a | 0) != (f | 0))
            d = (a >>> 0) / (b >>> 0) | 0;
        return d | 0;
    }
    function* Gd(a) {
        a = a | 0;
        var b = 0, e = 0, f = 0;
        if ((c[a + 76 >> 2] | 0) >= 0 ? (Wc(a) | 0) != 0 : 0) {
            b = a + 4 | 0;
            e = c[b >> 2] | 0;
            if (e >>> 0 < (c[a + 8 >> 2] | 0) >>> 0) {
                c[b >> 2] = e + 1;
                b = d[e >> 0] | 0;
            } else
                b = (yield* Xc(a)) | 0;
            Nc(a);
        } else
            f = 3;
        do
            if ((f | 0) == 3) {
                b = a + 4 | 0;
                e = c[b >> 2] | 0;
                if (e >>> 0 < (c[a + 8 >> 2] | 0) >>> 0) {
                    c[b >> 2] = e + 1;
                    b = d[e >> 0] | 0;
                    break;
                } else {
                    b = (yield* Xc(a)) | 0;
                    break;
                }
            }
        while (0);
        return b | 0;
    }
    function Hd(b, d, e, f) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        d = b + 75 | 0;
        a[d >> 0] = -1;
        switch (e | 0) {
        case 2: {
                c[b + 48 >> 2] = 0;
                break;
            }
        case 1: {
                a[d >> 0] = 10;
                break;
            }
        default: {
            }
        }
        c[b >> 2] = c[b >> 2] | 64;
        return 0;
    }
    function* Id(a, b) {
        a = a | 0;
        b = b | 0;
        var d = 0, e = 0;
        d = i;
        i = i + 16 | 0;
        e = d;
        c[e >> 2] = b;
        b = (yield* dd(c[449] | 0, a, e)) | 0;
        i = d;
        return b | 0;
    }
    function* Jd(b, e) {
        b = b | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0;
        m = i;
        i = i + 16 | 0;
        l = m;
        k = e & 255;
        a[l >> 0] = k;
        g = b + 16 | 0;
        h = c[g >> 2] | 0;
        if (!h)
            if (!(gd(b) | 0)) {
                h = c[g >> 2] | 0;
                j = 4;
            } else
                f = -1;
        else
            j = 4;
        do
            if ((j | 0) == 4) {
                g = b + 20 | 0;
                j = c[g >> 2] | 0;
                if (j >>> 0 < h >>> 0 ? (f = e & 255, (f | 0) != (a[b + 75 >> 0] | 0)) : 0) {
                    c[g >> 2] = j + 1;
                    a[j >> 0] = k;
                    break;
                }
                if (((yield* Ka[c[b + 36 >> 2] & 7](b, l, 1)) | 0) == 1)
                    f = d[l >> 0] | 0;
                else
                    f = -1;
            }
        while (0);
        i = m;
        return f | 0;
    }
    function* Kd(b) {
        b = b | 0;
        var d = 0, e = 0, f = 0, g = 0;
        f = c[449] | 0;
        if ((c[f + 76 >> 2] | 0) > -1)
            g = Wc(f) | 0;
        else
            g = 0;
        do
            if (((yield* Ld(b, f)) | 0) < 0)
                d = 1;
            else {
                if ((a[f + 75 >> 0] | 0) != 10 ? (d = f + 20 | 0, e = c[d >> 2] | 0, e >>> 0 < (c[f + 16 >> 2] | 0) >>> 0) : 0) {
                    c[d >> 2] = e + 1;
                    a[e >> 0] = 10;
                    d = 0;
                    break;
                }
                d = ((yield* Jd(f, 10)) | 0) < 0;
            }
        while (0);
        if (g | 0)
            Nc(f);
        return d << 31 >> 31 | 0;
    }
    function* Ld(a, b) {
        a = a | 0;
        b = b | 0;
        return ((yield* Fd(a, Rc(a) | 0, 1, b)) | 0) + -1 | 0;
    }
    function* Md(a) {
        a = a | 0;
        return (yield* Nd(a, c[449] | 0)) | 0;
    }
    function* Nd(b, d) {
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, i = 0;
        if ((c[d + 76 >> 2] | 0) >= 0 ? (Wc(d) | 0) != 0 : 0) {
            if ((a[d + 75 >> 0] | 0) != (b | 0) ? (f = d + 20 | 0, g = c[f >> 2] | 0, g >>> 0 < (c[d + 16 >> 2] | 0) >>> 0) : 0) {
                c[f >> 2] = g + 1;
                a[g >> 0] = b;
                e = b & 255;
            } else
                e = (yield* Jd(d, b)) | 0;
            Nc(d);
        } else
            i = 3;
        do
            if ((i | 0) == 3) {
                if ((a[d + 75 >> 0] | 0) != (b | 0) ? (h = d + 20 | 0, e = c[h >> 2] | 0, e >>> 0 < (c[d + 16 >> 2] | 0) >>> 0) : 0) {
                    c[h >> 2] = e + 1;
                    a[e >> 0] = b;
                    e = b & 255;
                    break;
                }
                e = (yield* Jd(d, b)) | 0;
            }
        while (0);
        return e | 0;
    }
    function* Od() {
        return (yield* Gd(c[479] | 0)) | 0;
    }
    function Pd(a) {
        a = a | 0;
        (c[a + 76 >> 2] | 0) > -1 ? Wc(a) | 0 : 0;
        return c[a + 60 >> 2] | 0;
    }
    function Qd(a, b) {
        a = a | 0;
        b = b | 0;
        pd(a + (Rc(a) | 0) | 0, b) | 0;
        return a | 0;
    }
    function* Rd(a, b, d) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        var e = 0, f = 0;
        e = i;
        i = i + 16 | 0;
        f = e;
        c[f >> 2] = a;
        c[f + 4 >> 2] = b;
        c[f + 8 >> 2] = d;
        a = Ic((yield* wa(3, f | 0)) | 0) | 0;
        i = e;
        return a | 0;
    }
    function Sd(a) {
        a = a | 0;
        var b = 0;
        b = i;
        i = i + 64 | 0;
        a = (Ed(a, b) | 0) == 0 & 1;
        i = b;
        return a | 0;
    }
    function Td(b) {
        b = b | 0;
        var c = 0, d = 0, e = 0, f = 0;
        while (1) {
            c = b + 1 | 0;
            if (!(zd(a[b >> 0] | 0) | 0))
                break;
            else
                b = c;
        }
        d = a[b >> 0] | 0;
        switch (d << 24 >> 24 | 0) {
        case 45: {
                e = 1;
                f = 5;
                break;
            }
        case 43: {
                e = 0;
                f = 5;
                break;
            }
        default:
            e = 0;
        }
        if ((f | 0) == 5) {
            b = c;
            d = a[c >> 0] | 0;
        }
        c = (d << 24 >> 24) + -48 | 0;
        if (c >>> 0 < 10) {
            d = b;
            b = 0;
            do {
                d = d + 1 | 0;
                b = (b * 10 | 0) - c | 0;
                c = (a[d >> 0] | 0) + -48 | 0;
            } while (c >>> 0 < 10);
        } else
            b = 0;
        return (e | 0 ? b : 0 - b | 0) | 0;
    }
    function Ud(a) {
        a = a | 0;
        var b = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0, H = 0, I = 0, J = 0, K = 0, L = 0;
        do
            if (a >>> 0 < 245) {
                o = a >>> 0 < 11 ? 16 : a + 11 & -8;
                a = o >>> 3;
                j = c[5328] | 0;
                b = j >>> a;
                if (b & 3 | 0) {
                    b = (b & 1 ^ 1) + a | 0;
                    d = 21352 + (b << 1 << 2) | 0;
                    e = d + 8 | 0;
                    f = c[e >> 2] | 0;
                    g = f + 8 | 0;
                    h = c[g >> 2] | 0;
                    do
                        if ((d | 0) != (h | 0)) {
                            if (h >>> 0 < (c[5332] | 0) >>> 0)
                                za();
                            a = h + 12 | 0;
                            if ((c[a >> 2] | 0) == (f | 0)) {
                                c[a >> 2] = d;
                                c[e >> 2] = h;
                                break;
                            } else
                                za();
                        } else
                            c[5328] = j & ~(1 << b);
                    while (0);
                    L = b << 3;
                    c[f + 4 >> 2] = L | 3;
                    L = f + L + 4 | 0;
                    c[L >> 2] = c[L >> 2] | 1;
                    L = g;
                    return L | 0;
                }
                h = c[5330] | 0;
                if (o >>> 0 > h >>> 0) {
                    if (b | 0) {
                        d = 2 << a;
                        d = b << a & (d | 0 - d);
                        d = (d & 0 - d) + -1 | 0;
                        i = d >>> 12 & 16;
                        d = d >>> i;
                        f = d >>> 5 & 8;
                        d = d >>> f;
                        g = d >>> 2 & 4;
                        d = d >>> g;
                        e = d >>> 1 & 2;
                        d = d >>> e;
                        b = d >>> 1 & 1;
                        b = (f | i | g | e | b) + (d >>> b) | 0;
                        d = 21352 + (b << 1 << 2) | 0;
                        e = d + 8 | 0;
                        g = c[e >> 2] | 0;
                        i = g + 8 | 0;
                        f = c[i >> 2] | 0;
                        do
                            if ((d | 0) != (f | 0)) {
                                if (f >>> 0 < (c[5332] | 0) >>> 0)
                                    za();
                                a = f + 12 | 0;
                                if ((c[a >> 2] | 0) == (g | 0)) {
                                    c[a >> 2] = d;
                                    c[e >> 2] = f;
                                    k = c[5330] | 0;
                                    break;
                                } else
                                    za();
                            } else {
                                c[5328] = j & ~(1 << b);
                                k = h;
                            }
                        while (0);
                        h = (b << 3) - o | 0;
                        c[g + 4 >> 2] = o | 3;
                        e = g + o | 0;
                        c[e + 4 >> 2] = h | 1;
                        c[e + h >> 2] = h;
                        if (k | 0) {
                            f = c[5333] | 0;
                            b = k >>> 3;
                            d = 21352 + (b << 1 << 2) | 0;
                            a = c[5328] | 0;
                            b = 1 << b;
                            if (a & b) {
                                a = d + 8 | 0;
                                b = c[a >> 2] | 0;
                                if (b >>> 0 < (c[5332] | 0) >>> 0)
                                    za();
                                else {
                                    l = a;
                                    m = b;
                                }
                            } else {
                                c[5328] = a | b;
                                l = d + 8 | 0;
                                m = d;
                            }
                            c[l >> 2] = f;
                            c[m + 12 >> 2] = f;
                            c[f + 8 >> 2] = m;
                            c[f + 12 >> 2] = d;
                        }
                        c[5330] = h;
                        c[5333] = e;
                        L = i;
                        return L | 0;
                    }
                    a = c[5329] | 0;
                    if (a) {
                        d = (a & 0 - a) + -1 | 0;
                        K = d >>> 12 & 16;
                        d = d >>> K;
                        J = d >>> 5 & 8;
                        d = d >>> J;
                        L = d >>> 2 & 4;
                        d = d >>> L;
                        b = d >>> 1 & 2;
                        d = d >>> b;
                        e = d >>> 1 & 1;
                        e = c[21616 + ((J | K | L | b | e) + (d >>> e) << 2) >> 2] | 0;
                        d = (c[e + 4 >> 2] & -8) - o | 0;
                        b = e;
                        while (1) {
                            a = c[b + 16 >> 2] | 0;
                            if (!a) {
                                a = c[b + 20 >> 2] | 0;
                                if (!a) {
                                    j = e;
                                    break;
                                }
                            }
                            b = (c[a + 4 >> 2] & -8) - o | 0;
                            L = b >>> 0 < d >>> 0;
                            d = L ? b : d;
                            b = a;
                            e = L ? a : e;
                        }
                        g = c[5332] | 0;
                        if (j >>> 0 < g >>> 0)
                            za();
                        i = j + o | 0;
                        if (j >>> 0 >= i >>> 0)
                            za();
                        h = c[j + 24 >> 2] | 0;
                        e = c[j + 12 >> 2] | 0;
                        do
                            if ((e | 0) == (j | 0)) {
                                b = j + 20 | 0;
                                a = c[b >> 2] | 0;
                                if (!a) {
                                    b = j + 16 | 0;
                                    a = c[b >> 2] | 0;
                                    if (!a) {
                                        n = 0;
                                        break;
                                    }
                                }
                                while (1) {
                                    e = a + 20 | 0;
                                    f = c[e >> 2] | 0;
                                    if (f | 0) {
                                        a = f;
                                        b = e;
                                        continue;
                                    }
                                    e = a + 16 | 0;
                                    f = c[e >> 2] | 0;
                                    if (!f)
                                        break;
                                    else {
                                        a = f;
                                        b = e;
                                    }
                                }
                                if (b >>> 0 < g >>> 0)
                                    za();
                                else {
                                    c[b >> 2] = 0;
                                    n = a;
                                    break;
                                }
                            } else {
                                f = c[j + 8 >> 2] | 0;
                                if (f >>> 0 < g >>> 0)
                                    za();
                                a = f + 12 | 0;
                                if ((c[a >> 2] | 0) != (j | 0))
                                    za();
                                b = e + 8 | 0;
                                if ((c[b >> 2] | 0) == (j | 0)) {
                                    c[a >> 2] = e;
                                    c[b >> 2] = f;
                                    n = e;
                                    break;
                                } else
                                    za();
                            }
                        while (0);
                        do
                            if (h | 0) {
                                a = c[j + 28 >> 2] | 0;
                                b = 21616 + (a << 2) | 0;
                                if ((j | 0) == (c[b >> 2] | 0)) {
                                    c[b >> 2] = n;
                                    if (!n) {
                                        c[5329] = c[5329] & ~(1 << a);
                                        break;
                                    }
                                } else {
                                    if (h >>> 0 < (c[5332] | 0) >>> 0)
                                        za();
                                    a = h + 16 | 0;
                                    if ((c[a >> 2] | 0) == (j | 0))
                                        c[a >> 2] = n;
                                    else
                                        c[h + 20 >> 2] = n;
                                    if (!n)
                                        break;
                                }
                                b = c[5332] | 0;
                                if (n >>> 0 < b >>> 0)
                                    za();
                                c[n + 24 >> 2] = h;
                                a = c[j + 16 >> 2] | 0;
                                do
                                    if (a | 0)
                                        if (a >>> 0 < b >>> 0)
                                            za();
                                        else {
                                            c[n + 16 >> 2] = a;
                                            c[a + 24 >> 2] = n;
                                            break;
                                        }
                                while (0);
                                a = c[j + 20 >> 2] | 0;
                                if (a | 0)
                                    if (a >>> 0 < (c[5332] | 0) >>> 0)
                                        za();
                                    else {
                                        c[n + 20 >> 2] = a;
                                        c[a + 24 >> 2] = n;
                                        break;
                                    }
                            }
                        while (0);
                        if (d >>> 0 < 16) {
                            L = d + o | 0;
                            c[j + 4 >> 2] = L | 3;
                            L = j + L + 4 | 0;
                            c[L >> 2] = c[L >> 2] | 1;
                        } else {
                            c[j + 4 >> 2] = o | 3;
                            c[i + 4 >> 2] = d | 1;
                            c[i + d >> 2] = d;
                            a = c[5330] | 0;
                            if (a | 0) {
                                f = c[5333] | 0;
                                b = a >>> 3;
                                e = 21352 + (b << 1 << 2) | 0;
                                a = c[5328] | 0;
                                b = 1 << b;
                                if (a & b) {
                                    a = e + 8 | 0;
                                    b = c[a >> 2] | 0;
                                    if (b >>> 0 < (c[5332] | 0) >>> 0)
                                        za();
                                    else {
                                        p = a;
                                        q = b;
                                    }
                                } else {
                                    c[5328] = a | b;
                                    p = e + 8 | 0;
                                    q = e;
                                }
                                c[p >> 2] = f;
                                c[q + 12 >> 2] = f;
                                c[f + 8 >> 2] = q;
                                c[f + 12 >> 2] = e;
                            }
                            c[5330] = d;
                            c[5333] = i;
                        }
                        L = j + 8 | 0;
                        return L | 0;
                    }
                }
            } else if (a >>> 0 <= 4294967231) {
                a = a + 11 | 0;
                o = a & -8;
                j = c[5329] | 0;
                if (j) {
                    d = 0 - o | 0;
                    a = a >>> 8;
                    if (a)
                        if (o >>> 0 > 16777215)
                            i = 31;
                        else {
                            q = (a + 1048320 | 0) >>> 16 & 8;
                            E = a << q;
                            p = (E + 520192 | 0) >>> 16 & 4;
                            E = E << p;
                            i = (E + 245760 | 0) >>> 16 & 2;
                            i = 14 - (p | q | i) + (E << i >>> 15) | 0;
                            i = o >>> (i + 7 | 0) & 1 | i << 1;
                        }
                    else
                        i = 0;
                    b = c[21616 + (i << 2) >> 2] | 0;
                    a:
                        do
                            if (!b) {
                                a = 0;
                                b = 0;
                                E = 86;
                            } else {
                                f = d;
                                a = 0;
                                g = o << ((i | 0) == 31 ? 0 : 25 - (i >>> 1) | 0);
                                h = b;
                                b = 0;
                                while (1) {
                                    e = c[h + 4 >> 2] & -8;
                                    d = e - o | 0;
                                    if (d >>> 0 < f >>> 0)
                                        if ((e | 0) == (o | 0)) {
                                            a = h;
                                            b = h;
                                            E = 90;
                                            break a;
                                        } else
                                            b = h;
                                    else
                                        d = f;
                                    e = c[h + 20 >> 2] | 0;
                                    h = c[h + 16 + (g >>> 31 << 2) >> 2] | 0;
                                    a = (e | 0) == 0 | (e | 0) == (h | 0) ? a : e;
                                    e = (h | 0) == 0;
                                    if (e) {
                                        E = 86;
                                        break;
                                    } else {
                                        f = d;
                                        g = g << (e & 1 ^ 1);
                                    }
                                }
                            }
                        while (0);
                    if ((E | 0) == 86) {
                        if ((a | 0) == 0 & (b | 0) == 0) {
                            a = 2 << i;
                            a = j & (a | 0 - a);
                            if (!a)
                                break;
                            q = (a & 0 - a) + -1 | 0;
                            m = q >>> 12 & 16;
                            q = q >>> m;
                            l = q >>> 5 & 8;
                            q = q >>> l;
                            n = q >>> 2 & 4;
                            q = q >>> n;
                            p = q >>> 1 & 2;
                            q = q >>> p;
                            a = q >>> 1 & 1;
                            a = c[21616 + ((l | m | n | p | a) + (q >>> a) << 2) >> 2] | 0;
                        }
                        if (!a) {
                            i = d;
                            j = b;
                        } else
                            E = 90;
                    }
                    if ((E | 0) == 90)
                        while (1) {
                            E = 0;
                            q = (c[a + 4 >> 2] & -8) - o | 0;
                            e = q >>> 0 < d >>> 0;
                            d = e ? q : d;
                            b = e ? a : b;
                            e = c[a + 16 >> 2] | 0;
                            if (e | 0) {
                                a = e;
                                E = 90;
                                continue;
                            }
                            a = c[a + 20 >> 2] | 0;
                            if (!a) {
                                i = d;
                                j = b;
                                break;
                            } else
                                E = 90;
                        }
                    if ((j | 0) != 0 ? i >>> 0 < ((c[5330] | 0) - o | 0) >>> 0 : 0) {
                        f = c[5332] | 0;
                        if (j >>> 0 < f >>> 0)
                            za();
                        h = j + o | 0;
                        if (j >>> 0 >= h >>> 0)
                            za();
                        g = c[j + 24 >> 2] | 0;
                        d = c[j + 12 >> 2] | 0;
                        do
                            if ((d | 0) == (j | 0)) {
                                b = j + 20 | 0;
                                a = c[b >> 2] | 0;
                                if (!a) {
                                    b = j + 16 | 0;
                                    a = c[b >> 2] | 0;
                                    if (!a) {
                                        s = 0;
                                        break;
                                    }
                                }
                                while (1) {
                                    d = a + 20 | 0;
                                    e = c[d >> 2] | 0;
                                    if (e | 0) {
                                        a = e;
                                        b = d;
                                        continue;
                                    }
                                    d = a + 16 | 0;
                                    e = c[d >> 2] | 0;
                                    if (!e)
                                        break;
                                    else {
                                        a = e;
                                        b = d;
                                    }
                                }
                                if (b >>> 0 < f >>> 0)
                                    za();
                                else {
                                    c[b >> 2] = 0;
                                    s = a;
                                    break;
                                }
                            } else {
                                e = c[j + 8 >> 2] | 0;
                                if (e >>> 0 < f >>> 0)
                                    za();
                                a = e + 12 | 0;
                                if ((c[a >> 2] | 0) != (j | 0))
                                    za();
                                b = d + 8 | 0;
                                if ((c[b >> 2] | 0) == (j | 0)) {
                                    c[a >> 2] = d;
                                    c[b >> 2] = e;
                                    s = d;
                                    break;
                                } else
                                    za();
                            }
                        while (0);
                        do
                            if (g | 0) {
                                a = c[j + 28 >> 2] | 0;
                                b = 21616 + (a << 2) | 0;
                                if ((j | 0) == (c[b >> 2] | 0)) {
                                    c[b >> 2] = s;
                                    if (!s) {
                                        c[5329] = c[5329] & ~(1 << a);
                                        break;
                                    }
                                } else {
                                    if (g >>> 0 < (c[5332] | 0) >>> 0)
                                        za();
                                    a = g + 16 | 0;
                                    if ((c[a >> 2] | 0) == (j | 0))
                                        c[a >> 2] = s;
                                    else
                                        c[g + 20 >> 2] = s;
                                    if (!s)
                                        break;
                                }
                                b = c[5332] | 0;
                                if (s >>> 0 < b >>> 0)
                                    za();
                                c[s + 24 >> 2] = g;
                                a = c[j + 16 >> 2] | 0;
                                do
                                    if (a | 0)
                                        if (a >>> 0 < b >>> 0)
                                            za();
                                        else {
                                            c[s + 16 >> 2] = a;
                                            c[a + 24 >> 2] = s;
                                            break;
                                        }
                                while (0);
                                a = c[j + 20 >> 2] | 0;
                                if (a | 0)
                                    if (a >>> 0 < (c[5332] | 0) >>> 0)
                                        za();
                                    else {
                                        c[s + 20 >> 2] = a;
                                        c[a + 24 >> 2] = s;
                                        break;
                                    }
                            }
                        while (0);
                        do
                            if (i >>> 0 >= 16) {
                                c[j + 4 >> 2] = o | 3;
                                c[h + 4 >> 2] = i | 1;
                                c[h + i >> 2] = i;
                                a = i >>> 3;
                                if (i >>> 0 < 256) {
                                    d = 21352 + (a << 1 << 2) | 0;
                                    b = c[5328] | 0;
                                    a = 1 << a;
                                    if (b & a) {
                                        a = d + 8 | 0;
                                        b = c[a >> 2] | 0;
                                        if (b >>> 0 < (c[5332] | 0) >>> 0)
                                            za();
                                        else {
                                            u = a;
                                            v = b;
                                        }
                                    } else {
                                        c[5328] = b | a;
                                        u = d + 8 | 0;
                                        v = d;
                                    }
                                    c[u >> 2] = h;
                                    c[v + 12 >> 2] = h;
                                    c[h + 8 >> 2] = v;
                                    c[h + 12 >> 2] = d;
                                    break;
                                }
                                a = i >>> 8;
                                if (a)
                                    if (i >>> 0 > 16777215)
                                        d = 31;
                                    else {
                                        K = (a + 1048320 | 0) >>> 16 & 8;
                                        L = a << K;
                                        J = (L + 520192 | 0) >>> 16 & 4;
                                        L = L << J;
                                        d = (L + 245760 | 0) >>> 16 & 2;
                                        d = 14 - (J | K | d) + (L << d >>> 15) | 0;
                                        d = i >>> (d + 7 | 0) & 1 | d << 1;
                                    }
                                else
                                    d = 0;
                                e = 21616 + (d << 2) | 0;
                                c[h + 28 >> 2] = d;
                                a = h + 16 | 0;
                                c[a + 4 >> 2] = 0;
                                c[a >> 2] = 0;
                                a = c[5329] | 0;
                                b = 1 << d;
                                if (!(a & b)) {
                                    c[5329] = a | b;
                                    c[e >> 2] = h;
                                    c[h + 24 >> 2] = e;
                                    c[h + 12 >> 2] = h;
                                    c[h + 8 >> 2] = h;
                                    break;
                                }
                                f = i << ((d | 0) == 31 ? 0 : 25 - (d >>> 1) | 0);
                                a = c[e >> 2] | 0;
                                while (1) {
                                    if ((c[a + 4 >> 2] & -8 | 0) == (i | 0)) {
                                        d = a;
                                        E = 148;
                                        break;
                                    }
                                    b = a + 16 + (f >>> 31 << 2) | 0;
                                    d = c[b >> 2] | 0;
                                    if (!d) {
                                        E = 145;
                                        break;
                                    } else {
                                        f = f << 1;
                                        a = d;
                                    }
                                }
                                if ((E | 0) == 145)
                                    if (b >>> 0 < (c[5332] | 0) >>> 0)
                                        za();
                                    else {
                                        c[b >> 2] = h;
                                        c[h + 24 >> 2] = a;
                                        c[h + 12 >> 2] = h;
                                        c[h + 8 >> 2] = h;
                                        break;
                                    }
                                else if ((E | 0) == 148) {
                                    a = d + 8 | 0;
                                    b = c[a >> 2] | 0;
                                    L = c[5332] | 0;
                                    if (b >>> 0 >= L >>> 0 & d >>> 0 >= L >>> 0) {
                                        c[b + 12 >> 2] = h;
                                        c[a >> 2] = h;
                                        c[h + 8 >> 2] = b;
                                        c[h + 12 >> 2] = d;
                                        c[h + 24 >> 2] = 0;
                                        break;
                                    } else
                                        za();
                                }
                            } else {
                                L = i + o | 0;
                                c[j + 4 >> 2] = L | 3;
                                L = j + L + 4 | 0;
                                c[L >> 2] = c[L >> 2] | 1;
                            }
                        while (0);
                        L = j + 8 | 0;
                        return L | 0;
                    }
                }
            } else
                o = -1;
        while (0);
        d = c[5330] | 0;
        if (d >>> 0 >= o >>> 0) {
            a = d - o | 0;
            b = c[5333] | 0;
            if (a >>> 0 > 15) {
                L = b + o | 0;
                c[5333] = L;
                c[5330] = a;
                c[L + 4 >> 2] = a | 1;
                c[L + a >> 2] = a;
                c[b + 4 >> 2] = o | 3;
            } else {
                c[5330] = 0;
                c[5333] = 0;
                c[b + 4 >> 2] = d | 3;
                L = b + d + 4 | 0;
                c[L >> 2] = c[L >> 2] | 1;
            }
            L = b + 8 | 0;
            return L | 0;
        }
        a = c[5331] | 0;
        if (a >>> 0 > o >>> 0) {
            J = a - o | 0;
            c[5331] = J;
            L = c[5334] | 0;
            K = L + o | 0;
            c[5334] = K;
            c[K + 4 >> 2] = J | 1;
            c[L + 4 >> 2] = o | 3;
            L = L + 8 | 0;
            return L | 0;
        }
        do
            if (!(c[5446] | 0)) {
                a = xa(30) | 0;
                if (!(a + -1 & a)) {
                    c[5448] = a;
                    c[5447] = a;
                    c[5449] = -1;
                    c[5450] = -1;
                    c[5451] = 0;
                    c[5439] = 0;
                    c[5446] = (Ca(0) | 0) & -16 ^ 1431655768;
                    break;
                } else
                    za();
            }
        while (0);
        h = o + 48 | 0;
        g = c[5448] | 0;
        i = o + 47 | 0;
        f = g + i | 0;
        g = 0 - g | 0;
        j = f & g;
        if (j >>> 0 <= o >>> 0) {
            L = 0;
            return L | 0;
        }
        a = c[5438] | 0;
        if (a | 0 ? (u = c[5436] | 0, v = u + j | 0, v >>> 0 <= u >>> 0 | v >>> 0 > a >>> 0) : 0) {
            L = 0;
            return L | 0;
        }
        b:
            do
                if (!(c[5439] & 4)) {
                    a = c[5334] | 0;
                    c:
                        do
                            if (a) {
                                d = 21760;
                                while (1) {
                                    b = c[d >> 2] | 0;
                                    if (b >>> 0 <= a >>> 0 ? (r = d + 4 | 0, (b + (c[r >> 2] | 0) | 0) >>> 0 > a >>> 0) : 0) {
                                        e = d;
                                        d = r;
                                        break;
                                    }
                                    d = c[d + 8 >> 2] | 0;
                                    if (!d) {
                                        E = 173;
                                        break c;
                                    }
                                }
                                a = f - (c[5331] | 0) & g;
                                if (a >>> 0 < 2147483647) {
                                    b = pa(a | 0) | 0;
                                    if ((b | 0) == ((c[e >> 2] | 0) + (c[d >> 2] | 0) | 0)) {
                                        if ((b | 0) != (-1 | 0)) {
                                            h = b;
                                            f = a;
                                            E = 193;
                                            break b;
                                        }
                                    } else
                                        E = 183;
                                }
                            } else
                                E = 173;
                        while (0);
                    do
                        if ((E | 0) == 173 ? (t = pa(0) | 0, (t | 0) != (-1 | 0)) : 0) {
                            a = t;
                            b = c[5447] | 0;
                            d = b + -1 | 0;
                            if (!(d & a))
                                a = j;
                            else
                                a = j - a + (d + a & 0 - b) | 0;
                            b = c[5436] | 0;
                            d = b + a | 0;
                            if (a >>> 0 > o >>> 0 & a >>> 0 < 2147483647) {
                                v = c[5438] | 0;
                                if (v | 0 ? d >>> 0 <= b >>> 0 | d >>> 0 > v >>> 0 : 0)
                                    break;
                                b = pa(a | 0) | 0;
                                if ((b | 0) == (t | 0)) {
                                    h = t;
                                    f = a;
                                    E = 193;
                                    break b;
                                } else
                                    E = 183;
                            }
                        }
                    while (0);
                    d:
                        do
                            if ((E | 0) == 183) {
                                d = 0 - a | 0;
                                do
                                    if (h >>> 0 > a >>> 0 & (a >>> 0 < 2147483647 & (b | 0) != (-1 | 0)) ? (w = c[5448] | 0, w = i - a + w & 0 - w, w >>> 0 < 2147483647) : 0)
                                        if ((pa(w | 0) | 0) == (-1 | 0)) {
                                            pa(d | 0) | 0;
                                            break d;
                                        } else {
                                            a = w + a | 0;
                                            break;
                                        }
                                while (0);
                                if ((b | 0) != (-1 | 0)) {
                                    h = b;
                                    f = a;
                                    E = 193;
                                    break b;
                                }
                            }
                        while (0);
                    c[5439] = c[5439] | 4;
                    E = 190;
                } else
                    E = 190;
            while (0);
        if ((((E | 0) == 190 ? j >>> 0 < 2147483647 : 0) ? (x = pa(j | 0) | 0, y = pa(0) | 0, x >>> 0 < y >>> 0 & ((x | 0) != (-1 | 0) & (y | 0) != (-1 | 0))) : 0) ? (z = y - x | 0, z >>> 0 > (o + 40 | 0) >>> 0) : 0) {
            h = x;
            f = z;
            E = 193;
        }
        if ((E | 0) == 193) {
            a = (c[5436] | 0) + f | 0;
            c[5436] = a;
            if (a >>> 0 > (c[5437] | 0) >>> 0)
                c[5437] = a;
            i = c[5334] | 0;
            do
                if (i) {
                    e = 21760;
                    do {
                        a = c[e >> 2] | 0;
                        b = e + 4 | 0;
                        d = c[b >> 2] | 0;
                        if ((h | 0) == (a + d | 0)) {
                            A = a;
                            B = b;
                            C = d;
                            D = e;
                            E = 203;
                            break;
                        }
                        e = c[e + 8 >> 2] | 0;
                    } while ((e | 0) != 0);
                    if (((E | 0) == 203 ? (c[D + 12 >> 2] & 8 | 0) == 0 : 0) ? i >>> 0 < h >>> 0 & i >>> 0 >= A >>> 0 : 0) {
                        c[B >> 2] = C + f;
                        L = i + 8 | 0;
                        L = (L & 7 | 0) == 0 ? 0 : 0 - L & 7;
                        K = i + L | 0;
                        L = f - L + (c[5331] | 0) | 0;
                        c[5334] = K;
                        c[5331] = L;
                        c[K + 4 >> 2] = L | 1;
                        c[K + L + 4 >> 2] = 40;
                        c[5335] = c[5450];
                        break;
                    }
                    a = c[5332] | 0;
                    if (h >>> 0 < a >>> 0) {
                        c[5332] = h;
                        j = h;
                    } else
                        j = a;
                    d = h + f | 0;
                    a = 21760;
                    while (1) {
                        if ((c[a >> 2] | 0) == (d | 0)) {
                            b = a;
                            E = 211;
                            break;
                        }
                        a = c[a + 8 >> 2] | 0;
                        if (!a) {
                            b = 21760;
                            break;
                        }
                    }
                    if ((E | 0) == 211)
                        if (!(c[a + 12 >> 2] & 8)) {
                            c[b >> 2] = h;
                            l = a + 4 | 0;
                            c[l >> 2] = (c[l >> 2] | 0) + f;
                            l = h + 8 | 0;
                            l = h + ((l & 7 | 0) == 0 ? 0 : 0 - l & 7) | 0;
                            a = d + 8 | 0;
                            a = d + ((a & 7 | 0) == 0 ? 0 : 0 - a & 7) | 0;
                            k = l + o | 0;
                            g = a - l - o | 0;
                            c[l + 4 >> 2] = o | 3;
                            do
                                if ((a | 0) != (i | 0)) {
                                    if ((a | 0) == (c[5333] | 0)) {
                                        L = (c[5330] | 0) + g | 0;
                                        c[5330] = L;
                                        c[5333] = k;
                                        c[k + 4 >> 2] = L | 1;
                                        c[k + L >> 2] = L;
                                        break;
                                    }
                                    b = c[a + 4 >> 2] | 0;
                                    if ((b & 3 | 0) == 1) {
                                        i = b & -8;
                                        f = b >>> 3;
                                        e:
                                            do
                                                if (b >>> 0 >= 256) {
                                                    h = c[a + 24 >> 2] | 0;
                                                    e = c[a + 12 >> 2] | 0;
                                                    do
                                                        if ((e | 0) == (a | 0)) {
                                                            d = a + 16 | 0;
                                                            e = d + 4 | 0;
                                                            b = c[e >> 2] | 0;
                                                            if (!b) {
                                                                b = c[d >> 2] | 0;
                                                                if (!b) {
                                                                    J = 0;
                                                                    break;
                                                                }
                                                            } else
                                                                d = e;
                                                            while (1) {
                                                                e = b + 20 | 0;
                                                                f = c[e >> 2] | 0;
                                                                if (f | 0) {
                                                                    b = f;
                                                                    d = e;
                                                                    continue;
                                                                }
                                                                e = b + 16 | 0;
                                                                f = c[e >> 2] | 0;
                                                                if (!f)
                                                                    break;
                                                                else {
                                                                    b = f;
                                                                    d = e;
                                                                }
                                                            }
                                                            if (d >>> 0 < j >>> 0)
                                                                za();
                                                            else {
                                                                c[d >> 2] = 0;
                                                                J = b;
                                                                break;
                                                            }
                                                        } else {
                                                            f = c[a + 8 >> 2] | 0;
                                                            if (f >>> 0 < j >>> 0)
                                                                za();
                                                            b = f + 12 | 0;
                                                            if ((c[b >> 2] | 0) != (a | 0))
                                                                za();
                                                            d = e + 8 | 0;
                                                            if ((c[d >> 2] | 0) == (a | 0)) {
                                                                c[b >> 2] = e;
                                                                c[d >> 2] = f;
                                                                J = e;
                                                                break;
                                                            } else
                                                                za();
                                                        }
                                                    while (0);
                                                    if (!h)
                                                        break;
                                                    b = c[a + 28 >> 2] | 0;
                                                    d = 21616 + (b << 2) | 0;
                                                    do
                                                        if ((a | 0) != (c[d >> 2] | 0)) {
                                                            if (h >>> 0 < (c[5332] | 0) >>> 0)
                                                                za();
                                                            b = h + 16 | 0;
                                                            if ((c[b >> 2] | 0) == (a | 0))
                                                                c[b >> 2] = J;
                                                            else
                                                                c[h + 20 >> 2] = J;
                                                            if (!J)
                                                                break e;
                                                        } else {
                                                            c[d >> 2] = J;
                                                            if (J | 0)
                                                                break;
                                                            c[5329] = c[5329] & ~(1 << b);
                                                            break e;
                                                        }
                                                    while (0);
                                                    e = c[5332] | 0;
                                                    if (J >>> 0 < e >>> 0)
                                                        za();
                                                    c[J + 24 >> 2] = h;
                                                    b = a + 16 | 0;
                                                    d = c[b >> 2] | 0;
                                                    do
                                                        if (d | 0)
                                                            if (d >>> 0 < e >>> 0)
                                                                za();
                                                            else {
                                                                c[J + 16 >> 2] = d;
                                                                c[d + 24 >> 2] = J;
                                                                break;
                                                            }
                                                    while (0);
                                                    b = c[b + 4 >> 2] | 0;
                                                    if (!b)
                                                        break;
                                                    if (b >>> 0 < (c[5332] | 0) >>> 0)
                                                        za();
                                                    else {
                                                        c[J + 20 >> 2] = b;
                                                        c[b + 24 >> 2] = J;
                                                        break;
                                                    }
                                                } else {
                                                    d = c[a + 8 >> 2] | 0;
                                                    e = c[a + 12 >> 2] | 0;
                                                    b = 21352 + (f << 1 << 2) | 0;
                                                    do
                                                        if ((d | 0) != (b | 0)) {
                                                            if (d >>> 0 < j >>> 0)
                                                                za();
                                                            if ((c[d + 12 >> 2] | 0) == (a | 0))
                                                                break;
                                                            za();
                                                        }
                                                    while (0);
                                                    if ((e | 0) == (d | 0)) {
                                                        c[5328] = c[5328] & ~(1 << f);
                                                        break;
                                                    }
                                                    do
                                                        if ((e | 0) == (b | 0))
                                                            G = e + 8 | 0;
                                                        else {
                                                            if (e >>> 0 < j >>> 0)
                                                                za();
                                                            b = e + 8 | 0;
                                                            if ((c[b >> 2] | 0) == (a | 0)) {
                                                                G = b;
                                                                break;
                                                            }
                                                            za();
                                                        }
                                                    while (0);
                                                    c[d + 12 >> 2] = e;
                                                    c[G >> 2] = d;
                                                }
                                            while (0);
                                        a = a + i | 0;
                                        g = i + g | 0;
                                    }
                                    a = a + 4 | 0;
                                    c[a >> 2] = c[a >> 2] & -2;
                                    c[k + 4 >> 2] = g | 1;
                                    c[k + g >> 2] = g;
                                    a = g >>> 3;
                                    if (g >>> 0 < 256) {
                                        d = 21352 + (a << 1 << 2) | 0;
                                        b = c[5328] | 0;
                                        a = 1 << a;
                                        do
                                            if (!(b & a)) {
                                                c[5328] = b | a;
                                                K = d + 8 | 0;
                                                L = d;
                                            } else {
                                                a = d + 8 | 0;
                                                b = c[a >> 2] | 0;
                                                if (b >>> 0 >= (c[5332] | 0) >>> 0) {
                                                    K = a;
                                                    L = b;
                                                    break;
                                                }
                                                za();
                                            }
                                        while (0);
                                        c[K >> 2] = k;
                                        c[L + 12 >> 2] = k;
                                        c[k + 8 >> 2] = L;
                                        c[k + 12 >> 2] = d;
                                        break;
                                    }
                                    a = g >>> 8;
                                    do
                                        if (!a)
                                            d = 0;
                                        else {
                                            if (g >>> 0 > 16777215) {
                                                d = 31;
                                                break;
                                            }
                                            K = (a + 1048320 | 0) >>> 16 & 8;
                                            L = a << K;
                                            J = (L + 520192 | 0) >>> 16 & 4;
                                            L = L << J;
                                            d = (L + 245760 | 0) >>> 16 & 2;
                                            d = 14 - (J | K | d) + (L << d >>> 15) | 0;
                                            d = g >>> (d + 7 | 0) & 1 | d << 1;
                                        }
                                    while (0);
                                    e = 21616 + (d << 2) | 0;
                                    c[k + 28 >> 2] = d;
                                    a = k + 16 | 0;
                                    c[a + 4 >> 2] = 0;
                                    c[a >> 2] = 0;
                                    a = c[5329] | 0;
                                    b = 1 << d;
                                    if (!(a & b)) {
                                        c[5329] = a | b;
                                        c[e >> 2] = k;
                                        c[k + 24 >> 2] = e;
                                        c[k + 12 >> 2] = k;
                                        c[k + 8 >> 2] = k;
                                        break;
                                    }
                                    f = g << ((d | 0) == 31 ? 0 : 25 - (d >>> 1) | 0);
                                    a = c[e >> 2] | 0;
                                    while (1) {
                                        if ((c[a + 4 >> 2] & -8 | 0) == (g | 0)) {
                                            d = a;
                                            E = 281;
                                            break;
                                        }
                                        b = a + 16 + (f >>> 31 << 2) | 0;
                                        d = c[b >> 2] | 0;
                                        if (!d) {
                                            E = 278;
                                            break;
                                        } else {
                                            f = f << 1;
                                            a = d;
                                        }
                                    }
                                    if ((E | 0) == 278)
                                        if (b >>> 0 < (c[5332] | 0) >>> 0)
                                            za();
                                        else {
                                            c[b >> 2] = k;
                                            c[k + 24 >> 2] = a;
                                            c[k + 12 >> 2] = k;
                                            c[k + 8 >> 2] = k;
                                            break;
                                        }
                                    else if ((E | 0) == 281) {
                                        a = d + 8 | 0;
                                        b = c[a >> 2] | 0;
                                        L = c[5332] | 0;
                                        if (b >>> 0 >= L >>> 0 & d >>> 0 >= L >>> 0) {
                                            c[b + 12 >> 2] = k;
                                            c[a >> 2] = k;
                                            c[k + 8 >> 2] = b;
                                            c[k + 12 >> 2] = d;
                                            c[k + 24 >> 2] = 0;
                                            break;
                                        } else
                                            za();
                                    }
                                } else {
                                    L = (c[5331] | 0) + g | 0;
                                    c[5331] = L;
                                    c[5334] = k;
                                    c[k + 4 >> 2] = L | 1;
                                }
                            while (0);
                            L = l + 8 | 0;
                            return L | 0;
                        } else
                            b = 21760;
                    while (1) {
                        a = c[b >> 2] | 0;
                        if (a >>> 0 <= i >>> 0 ? (F = a + (c[b + 4 >> 2] | 0) | 0, F >>> 0 > i >>> 0) : 0) {
                            b = F;
                            break;
                        }
                        b = c[b + 8 >> 2] | 0;
                    }
                    g = b + -47 | 0;
                    d = g + 8 | 0;
                    d = g + ((d & 7 | 0) == 0 ? 0 : 0 - d & 7) | 0;
                    g = i + 16 | 0;
                    d = d >>> 0 < g >>> 0 ? i : d;
                    a = d + 8 | 0;
                    e = h + 8 | 0;
                    e = (e & 7 | 0) == 0 ? 0 : 0 - e & 7;
                    L = h + e | 0;
                    e = f + -40 - e | 0;
                    c[5334] = L;
                    c[5331] = e;
                    c[L + 4 >> 2] = e | 1;
                    c[L + e + 4 >> 2] = 40;
                    c[5335] = c[5450];
                    e = d + 4 | 0;
                    c[e >> 2] = 27;
                    c[a >> 2] = c[5440];
                    c[a + 4 >> 2] = c[5441];
                    c[a + 8 >> 2] = c[5442];
                    c[a + 12 >> 2] = c[5443];
                    c[5440] = h;
                    c[5441] = f;
                    c[5443] = 0;
                    c[5442] = a;
                    a = d + 24 | 0;
                    do {
                        a = a + 4 | 0;
                        c[a >> 2] = 7;
                    } while ((a + 4 | 0) >>> 0 < b >>> 0);
                    if ((d | 0) != (i | 0)) {
                        h = d - i | 0;
                        c[e >> 2] = c[e >> 2] & -2;
                        c[i + 4 >> 2] = h | 1;
                        c[d >> 2] = h;
                        a = h >>> 3;
                        if (h >>> 0 < 256) {
                            d = 21352 + (a << 1 << 2) | 0;
                            b = c[5328] | 0;
                            a = 1 << a;
                            if (b & a) {
                                a = d + 8 | 0;
                                b = c[a >> 2] | 0;
                                if (b >>> 0 < (c[5332] | 0) >>> 0)
                                    za();
                                else {
                                    H = a;
                                    I = b;
                                }
                            } else {
                                c[5328] = b | a;
                                H = d + 8 | 0;
                                I = d;
                            }
                            c[H >> 2] = i;
                            c[I + 12 >> 2] = i;
                            c[i + 8 >> 2] = I;
                            c[i + 12 >> 2] = d;
                            break;
                        }
                        a = h >>> 8;
                        if (a)
                            if (h >>> 0 > 16777215)
                                d = 31;
                            else {
                                K = (a + 1048320 | 0) >>> 16 & 8;
                                L = a << K;
                                J = (L + 520192 | 0) >>> 16 & 4;
                                L = L << J;
                                d = (L + 245760 | 0) >>> 16 & 2;
                                d = 14 - (J | K | d) + (L << d >>> 15) | 0;
                                d = h >>> (d + 7 | 0) & 1 | d << 1;
                            }
                        else
                            d = 0;
                        f = 21616 + (d << 2) | 0;
                        c[i + 28 >> 2] = d;
                        c[i + 20 >> 2] = 0;
                        c[g >> 2] = 0;
                        a = c[5329] | 0;
                        b = 1 << d;
                        if (!(a & b)) {
                            c[5329] = a | b;
                            c[f >> 2] = i;
                            c[i + 24 >> 2] = f;
                            c[i + 12 >> 2] = i;
                            c[i + 8 >> 2] = i;
                            break;
                        }
                        e = h << ((d | 0) == 31 ? 0 : 25 - (d >>> 1) | 0);
                        a = c[f >> 2] | 0;
                        while (1) {
                            if ((c[a + 4 >> 2] & -8 | 0) == (h | 0)) {
                                d = a;
                                E = 307;
                                break;
                            }
                            b = a + 16 + (e >>> 31 << 2) | 0;
                            d = c[b >> 2] | 0;
                            if (!d) {
                                E = 304;
                                break;
                            } else {
                                e = e << 1;
                                a = d;
                            }
                        }
                        if ((E | 0) == 304)
                            if (b >>> 0 < (c[5332] | 0) >>> 0)
                                za();
                            else {
                                c[b >> 2] = i;
                                c[i + 24 >> 2] = a;
                                c[i + 12 >> 2] = i;
                                c[i + 8 >> 2] = i;
                                break;
                            }
                        else if ((E | 0) == 307) {
                            a = d + 8 | 0;
                            b = c[a >> 2] | 0;
                            L = c[5332] | 0;
                            if (b >>> 0 >= L >>> 0 & d >>> 0 >= L >>> 0) {
                                c[b + 12 >> 2] = i;
                                c[a >> 2] = i;
                                c[i + 8 >> 2] = b;
                                c[i + 12 >> 2] = d;
                                c[i + 24 >> 2] = 0;
                                break;
                            } else
                                za();
                        }
                    }
                } else {
                    L = c[5332] | 0;
                    if ((L | 0) == 0 | h >>> 0 < L >>> 0)
                        c[5332] = h;
                    c[5440] = h;
                    c[5441] = f;
                    c[5443] = 0;
                    c[5337] = c[5446];
                    c[5336] = -1;
                    a = 0;
                    do {
                        L = 21352 + (a << 1 << 2) | 0;
                        c[L + 12 >> 2] = L;
                        c[L + 8 >> 2] = L;
                        a = a + 1 | 0;
                    } while ((a | 0) != 32);
                    L = h + 8 | 0;
                    L = (L & 7 | 0) == 0 ? 0 : 0 - L & 7;
                    K = h + L | 0;
                    L = f + -40 - L | 0;
                    c[5334] = K;
                    c[5331] = L;
                    c[K + 4 >> 2] = L | 1;
                    c[K + L + 4 >> 2] = 40;
                    c[5335] = c[5450];
                }
            while (0);
            a = c[5331] | 0;
            if (a >>> 0 > o >>> 0) {
                J = a - o | 0;
                c[5331] = J;
                L = c[5334] | 0;
                K = L + o | 0;
                c[5334] = K;
                c[K + 4 >> 2] = J | 1;
                c[L + 4 >> 2] = o | 3;
                L = L + 8 | 0;
                return L | 0;
            }
        }
        c[(Jc() | 0) >> 2] = 12;
        L = 0;
        return L | 0;
    }
    function Vd(a) {
        a = a | 0;
        var b = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0;
        if (!a)
            return;
        d = a + -8 | 0;
        h = c[5332] | 0;
        if (d >>> 0 < h >>> 0)
            za();
        a = c[a + -4 >> 2] | 0;
        b = a & 3;
        if ((b | 0) == 1)
            za();
        e = a & -8;
        m = d + e | 0;
        do
            if (!(a & 1)) {
                a = c[d >> 2] | 0;
                if (!b)
                    return;
                k = d + (0 - a) | 0;
                j = a + e | 0;
                if (k >>> 0 < h >>> 0)
                    za();
                if ((k | 0) == (c[5333] | 0)) {
                    a = m + 4 | 0;
                    b = c[a >> 2] | 0;
                    if ((b & 3 | 0) != 3) {
                        q = k;
                        g = j;
                        break;
                    }
                    c[5330] = j;
                    c[a >> 2] = b & -2;
                    c[k + 4 >> 2] = j | 1;
                    c[k + j >> 2] = j;
                    return;
                }
                e = a >>> 3;
                if (a >>> 0 < 256) {
                    b = c[k + 8 >> 2] | 0;
                    d = c[k + 12 >> 2] | 0;
                    a = 21352 + (e << 1 << 2) | 0;
                    if ((b | 0) != (a | 0)) {
                        if (b >>> 0 < h >>> 0)
                            za();
                        if ((c[b + 12 >> 2] | 0) != (k | 0))
                            za();
                    }
                    if ((d | 0) == (b | 0)) {
                        c[5328] = c[5328] & ~(1 << e);
                        q = k;
                        g = j;
                        break;
                    }
                    if ((d | 0) != (a | 0)) {
                        if (d >>> 0 < h >>> 0)
                            za();
                        a = d + 8 | 0;
                        if ((c[a >> 2] | 0) == (k | 0))
                            f = a;
                        else
                            za();
                    } else
                        f = d + 8 | 0;
                    c[b + 12 >> 2] = d;
                    c[f >> 2] = b;
                    q = k;
                    g = j;
                    break;
                }
                f = c[k + 24 >> 2] | 0;
                d = c[k + 12 >> 2] | 0;
                do
                    if ((d | 0) == (k | 0)) {
                        b = k + 16 | 0;
                        d = b + 4 | 0;
                        a = c[d >> 2] | 0;
                        if (!a) {
                            a = c[b >> 2] | 0;
                            if (!a) {
                                i = 0;
                                break;
                            }
                        } else
                            b = d;
                        while (1) {
                            d = a + 20 | 0;
                            e = c[d >> 2] | 0;
                            if (e | 0) {
                                a = e;
                                b = d;
                                continue;
                            }
                            d = a + 16 | 0;
                            e = c[d >> 2] | 0;
                            if (!e)
                                break;
                            else {
                                a = e;
                                b = d;
                            }
                        }
                        if (b >>> 0 < h >>> 0)
                            za();
                        else {
                            c[b >> 2] = 0;
                            i = a;
                            break;
                        }
                    } else {
                        e = c[k + 8 >> 2] | 0;
                        if (e >>> 0 < h >>> 0)
                            za();
                        a = e + 12 | 0;
                        if ((c[a >> 2] | 0) != (k | 0))
                            za();
                        b = d + 8 | 0;
                        if ((c[b >> 2] | 0) == (k | 0)) {
                            c[a >> 2] = d;
                            c[b >> 2] = e;
                            i = d;
                            break;
                        } else
                            za();
                    }
                while (0);
                if (f) {
                    a = c[k + 28 >> 2] | 0;
                    b = 21616 + (a << 2) | 0;
                    if ((k | 0) == (c[b >> 2] | 0)) {
                        c[b >> 2] = i;
                        if (!i) {
                            c[5329] = c[5329] & ~(1 << a);
                            q = k;
                            g = j;
                            break;
                        }
                    } else {
                        if (f >>> 0 < (c[5332] | 0) >>> 0)
                            za();
                        a = f + 16 | 0;
                        if ((c[a >> 2] | 0) == (k | 0))
                            c[a >> 2] = i;
                        else
                            c[f + 20 >> 2] = i;
                        if (!i) {
                            q = k;
                            g = j;
                            break;
                        }
                    }
                    d = c[5332] | 0;
                    if (i >>> 0 < d >>> 0)
                        za();
                    c[i + 24 >> 2] = f;
                    a = k + 16 | 0;
                    b = c[a >> 2] | 0;
                    do
                        if (b | 0)
                            if (b >>> 0 < d >>> 0)
                                za();
                            else {
                                c[i + 16 >> 2] = b;
                                c[b + 24 >> 2] = i;
                                break;
                            }
                    while (0);
                    a = c[a + 4 >> 2] | 0;
                    if (a)
                        if (a >>> 0 < (c[5332] | 0) >>> 0)
                            za();
                        else {
                            c[i + 20 >> 2] = a;
                            c[a + 24 >> 2] = i;
                            q = k;
                            g = j;
                            break;
                        }
                    else {
                        q = k;
                        g = j;
                    }
                } else {
                    q = k;
                    g = j;
                }
            } else {
                q = d;
                g = e;
            }
        while (0);
        if (q >>> 0 >= m >>> 0)
            za();
        a = m + 4 | 0;
        b = c[a >> 2] | 0;
        if (!(b & 1))
            za();
        if (!(b & 2)) {
            if ((m | 0) == (c[5334] | 0)) {
                p = (c[5331] | 0) + g | 0;
                c[5331] = p;
                c[5334] = q;
                c[q + 4 >> 2] = p | 1;
                if ((q | 0) != (c[5333] | 0))
                    return;
                c[5333] = 0;
                c[5330] = 0;
                return;
            }
            if ((m | 0) == (c[5333] | 0)) {
                p = (c[5330] | 0) + g | 0;
                c[5330] = p;
                c[5333] = q;
                c[q + 4 >> 2] = p | 1;
                c[q + p >> 2] = p;
                return;
            }
            g = (b & -8) + g | 0;
            e = b >>> 3;
            do
                if (b >>> 0 >= 256) {
                    f = c[m + 24 >> 2] | 0;
                    a = c[m + 12 >> 2] | 0;
                    do
                        if ((a | 0) == (m | 0)) {
                            b = m + 16 | 0;
                            d = b + 4 | 0;
                            a = c[d >> 2] | 0;
                            if (!a) {
                                a = c[b >> 2] | 0;
                                if (!a) {
                                    n = 0;
                                    break;
                                }
                            } else
                                b = d;
                            while (1) {
                                d = a + 20 | 0;
                                e = c[d >> 2] | 0;
                                if (e | 0) {
                                    a = e;
                                    b = d;
                                    continue;
                                }
                                d = a + 16 | 0;
                                e = c[d >> 2] | 0;
                                if (!e)
                                    break;
                                else {
                                    a = e;
                                    b = d;
                                }
                            }
                            if (b >>> 0 < (c[5332] | 0) >>> 0)
                                za();
                            else {
                                c[b >> 2] = 0;
                                n = a;
                                break;
                            }
                        } else {
                            b = c[m + 8 >> 2] | 0;
                            if (b >>> 0 < (c[5332] | 0) >>> 0)
                                za();
                            d = b + 12 | 0;
                            if ((c[d >> 2] | 0) != (m | 0))
                                za();
                            e = a + 8 | 0;
                            if ((c[e >> 2] | 0) == (m | 0)) {
                                c[d >> 2] = a;
                                c[e >> 2] = b;
                                n = a;
                                break;
                            } else
                                za();
                        }
                    while (0);
                    if (f | 0) {
                        a = c[m + 28 >> 2] | 0;
                        b = 21616 + (a << 2) | 0;
                        if ((m | 0) == (c[b >> 2] | 0)) {
                            c[b >> 2] = n;
                            if (!n) {
                                c[5329] = c[5329] & ~(1 << a);
                                break;
                            }
                        } else {
                            if (f >>> 0 < (c[5332] | 0) >>> 0)
                                za();
                            a = f + 16 | 0;
                            if ((c[a >> 2] | 0) == (m | 0))
                                c[a >> 2] = n;
                            else
                                c[f + 20 >> 2] = n;
                            if (!n)
                                break;
                        }
                        d = c[5332] | 0;
                        if (n >>> 0 < d >>> 0)
                            za();
                        c[n + 24 >> 2] = f;
                        a = m + 16 | 0;
                        b = c[a >> 2] | 0;
                        do
                            if (b | 0)
                                if (b >>> 0 < d >>> 0)
                                    za();
                                else {
                                    c[n + 16 >> 2] = b;
                                    c[b + 24 >> 2] = n;
                                    break;
                                }
                        while (0);
                        a = c[a + 4 >> 2] | 0;
                        if (a | 0)
                            if (a >>> 0 < (c[5332] | 0) >>> 0)
                                za();
                            else {
                                c[n + 20 >> 2] = a;
                                c[a + 24 >> 2] = n;
                                break;
                            }
                    }
                } else {
                    b = c[m + 8 >> 2] | 0;
                    d = c[m + 12 >> 2] | 0;
                    a = 21352 + (e << 1 << 2) | 0;
                    if ((b | 0) != (a | 0)) {
                        if (b >>> 0 < (c[5332] | 0) >>> 0)
                            za();
                        if ((c[b + 12 >> 2] | 0) != (m | 0))
                            za();
                    }
                    if ((d | 0) == (b | 0)) {
                        c[5328] = c[5328] & ~(1 << e);
                        break;
                    }
                    if ((d | 0) != (a | 0)) {
                        if (d >>> 0 < (c[5332] | 0) >>> 0)
                            za();
                        a = d + 8 | 0;
                        if ((c[a >> 2] | 0) == (m | 0))
                            l = a;
                        else
                            za();
                    } else
                        l = d + 8 | 0;
                    c[b + 12 >> 2] = d;
                    c[l >> 2] = b;
                }
            while (0);
            c[q + 4 >> 2] = g | 1;
            c[q + g >> 2] = g;
            if ((q | 0) == (c[5333] | 0)) {
                c[5330] = g;
                return;
            }
        } else {
            c[a >> 2] = b & -2;
            c[q + 4 >> 2] = g | 1;
            c[q + g >> 2] = g;
        }
        a = g >>> 3;
        if (g >>> 0 < 256) {
            d = 21352 + (a << 1 << 2) | 0;
            b = c[5328] | 0;
            a = 1 << a;
            if (b & a) {
                a = d + 8 | 0;
                b = c[a >> 2] | 0;
                if (b >>> 0 < (c[5332] | 0) >>> 0)
                    za();
                else {
                    o = a;
                    p = b;
                }
            } else {
                c[5328] = b | a;
                o = d + 8 | 0;
                p = d;
            }
            c[o >> 2] = q;
            c[p + 12 >> 2] = q;
            c[q + 8 >> 2] = p;
            c[q + 12 >> 2] = d;
            return;
        }
        a = g >>> 8;
        if (a)
            if (g >>> 0 > 16777215)
                d = 31;
            else {
                o = (a + 1048320 | 0) >>> 16 & 8;
                p = a << o;
                n = (p + 520192 | 0) >>> 16 & 4;
                p = p << n;
                d = (p + 245760 | 0) >>> 16 & 2;
                d = 14 - (n | o | d) + (p << d >>> 15) | 0;
                d = g >>> (d + 7 | 0) & 1 | d << 1;
            }
        else
            d = 0;
        e = 21616 + (d << 2) | 0;
        c[q + 28 >> 2] = d;
        c[q + 20 >> 2] = 0;
        c[q + 16 >> 2] = 0;
        a = c[5329] | 0;
        b = 1 << d;
        do
            if (a & b) {
                f = g << ((d | 0) == 31 ? 0 : 25 - (d >>> 1) | 0);
                a = c[e >> 2] | 0;
                while (1) {
                    if ((c[a + 4 >> 2] & -8 | 0) == (g | 0)) {
                        d = a;
                        e = 130;
                        break;
                    }
                    b = a + 16 + (f >>> 31 << 2) | 0;
                    d = c[b >> 2] | 0;
                    if (!d) {
                        e = 127;
                        break;
                    } else {
                        f = f << 1;
                        a = d;
                    }
                }
                if ((e | 0) == 127)
                    if (b >>> 0 < (c[5332] | 0) >>> 0)
                        za();
                    else {
                        c[b >> 2] = q;
                        c[q + 24 >> 2] = a;
                        c[q + 12 >> 2] = q;
                        c[q + 8 >> 2] = q;
                        break;
                    }
                else if ((e | 0) == 130) {
                    a = d + 8 | 0;
                    b = c[a >> 2] | 0;
                    p = c[5332] | 0;
                    if (b >>> 0 >= p >>> 0 & d >>> 0 >= p >>> 0) {
                        c[b + 12 >> 2] = q;
                        c[a >> 2] = q;
                        c[q + 8 >> 2] = b;
                        c[q + 12 >> 2] = d;
                        c[q + 24 >> 2] = 0;
                        break;
                    } else
                        za();
                }
            } else {
                c[5329] = a | b;
                c[e >> 2] = q;
                c[q + 24 >> 2] = e;
                c[q + 12 >> 2] = q;
                c[q + 8 >> 2] = q;
            }
        while (0);
        q = (c[5336] | 0) + -1 | 0;
        c[5336] = q;
        if (!q)
            a = 21768;
        else
            return;
        while (1) {
            a = c[a >> 2] | 0;
            if (!a)
                break;
            else
                a = a + 8 | 0;
        }
        c[5336] = -1;
        return;
    }
    function Wd(a, b) {
        a = a | 0;
        b = b | 0;
        var d = 0, e = 0;
        if (!a) {
            a = Ud(b) | 0;
            return a | 0;
        }
        if (b >>> 0 > 4294967231) {
            c[(Jc() | 0) >> 2] = 12;
            a = 0;
            return a | 0;
        }
        d = Xd(a + -8 | 0, b >>> 0 < 11 ? 16 : b + 11 & -8) | 0;
        if (d | 0) {
            a = d + 8 | 0;
            return a | 0;
        }
        d = Ud(b) | 0;
        if (!d) {
            a = 0;
            return a | 0;
        }
        e = c[a + -4 >> 2] | 0;
        e = (e & -8) - ((e & 3 | 0) == 0 ? 8 : 4) | 0;
        de(d | 0, a | 0, (e >>> 0 < b >>> 0 ? e : b) | 0) | 0;
        Vd(a);
        a = d;
        return a | 0;
    }
    function Xd(a, b) {
        a = a | 0;
        b = b | 0;
        var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0;
        n = a + 4 | 0;
        o = c[n >> 2] | 0;
        d = o & -8;
        k = a + d | 0;
        i = c[5332] | 0;
        e = o & 3;
        if (!((e | 0) != 1 & a >>> 0 >= i >>> 0 & a >>> 0 < k >>> 0))
            za();
        f = c[k + 4 >> 2] | 0;
        if (!(f & 1))
            za();
        if (!e) {
            if (b >>> 0 < 256) {
                a = 0;
                return a | 0;
            }
            if (d >>> 0 >= (b + 4 | 0) >>> 0 ? (d - b | 0) >>> 0 <= c[5448] << 1 >>> 0 : 0)
                return a | 0;
            a = 0;
            return a | 0;
        }
        if (d >>> 0 >= b >>> 0) {
            d = d - b | 0;
            if (d >>> 0 <= 15)
                return a | 0;
            m = a + b | 0;
            c[n >> 2] = o & 1 | b | 2;
            c[m + 4 >> 2] = d | 3;
            b = m + d + 4 | 0;
            c[b >> 2] = c[b >> 2] | 1;
            Yd(m, d);
            return a | 0;
        }
        if ((k | 0) == (c[5334] | 0)) {
            d = (c[5331] | 0) + d | 0;
            if (d >>> 0 <= b >>> 0) {
                a = 0;
                return a | 0;
            }
            m = d - b | 0;
            l = a + b | 0;
            c[n >> 2] = o & 1 | b | 2;
            c[l + 4 >> 2] = m | 1;
            c[5334] = l;
            c[5331] = m;
            return a | 0;
        }
        if ((k | 0) == (c[5333] | 0)) {
            e = (c[5330] | 0) + d | 0;
            if (e >>> 0 < b >>> 0) {
                a = 0;
                return a | 0;
            }
            d = e - b | 0;
            if (d >>> 0 > 15) {
                e = a + b | 0;
                m = e + d | 0;
                c[n >> 2] = o & 1 | b | 2;
                c[e + 4 >> 2] = d | 1;
                c[m >> 2] = d;
                b = m + 4 | 0;
                c[b >> 2] = c[b >> 2] & -2;
            } else {
                c[n >> 2] = o & 1 | e | 2;
                e = a + e + 4 | 0;
                c[e >> 2] = c[e >> 2] | 1;
                e = 0;
                d = 0;
            }
            c[5330] = d;
            c[5333] = e;
            return a | 0;
        }
        if (f & 2 | 0) {
            a = 0;
            return a | 0;
        }
        l = (f & -8) + d | 0;
        if (l >>> 0 < b >>> 0) {
            a = 0;
            return a | 0;
        }
        m = l - b | 0;
        g = f >>> 3;
        do
            if (f >>> 0 >= 256) {
                h = c[k + 24 >> 2] | 0;
                f = c[k + 12 >> 2] | 0;
                do
                    if ((f | 0) == (k | 0)) {
                        e = k + 16 | 0;
                        f = e + 4 | 0;
                        d = c[f >> 2] | 0;
                        if (!d) {
                            d = c[e >> 2] | 0;
                            if (!d) {
                                j = 0;
                                break;
                            }
                        } else
                            e = f;
                        while (1) {
                            f = d + 20 | 0;
                            g = c[f >> 2] | 0;
                            if (g | 0) {
                                d = g;
                                e = f;
                                continue;
                            }
                            f = d + 16 | 0;
                            g = c[f >> 2] | 0;
                            if (!g)
                                break;
                            else {
                                d = g;
                                e = f;
                            }
                        }
                        if (e >>> 0 < i >>> 0)
                            za();
                        else {
                            c[e >> 2] = 0;
                            j = d;
                            break;
                        }
                    } else {
                        g = c[k + 8 >> 2] | 0;
                        if (g >>> 0 < i >>> 0)
                            za();
                        d = g + 12 | 0;
                        if ((c[d >> 2] | 0) != (k | 0))
                            za();
                        e = f + 8 | 0;
                        if ((c[e >> 2] | 0) == (k | 0)) {
                            c[d >> 2] = f;
                            c[e >> 2] = g;
                            j = f;
                            break;
                        } else
                            za();
                    }
                while (0);
                if (h | 0) {
                    d = c[k + 28 >> 2] | 0;
                    e = 21616 + (d << 2) | 0;
                    if ((k | 0) == (c[e >> 2] | 0)) {
                        c[e >> 2] = j;
                        if (!j) {
                            c[5329] = c[5329] & ~(1 << d);
                            break;
                        }
                    } else {
                        if (h >>> 0 < (c[5332] | 0) >>> 0)
                            za();
                        d = h + 16 | 0;
                        if ((c[d >> 2] | 0) == (k | 0))
                            c[d >> 2] = j;
                        else
                            c[h + 20 >> 2] = j;
                        if (!j)
                            break;
                    }
                    f = c[5332] | 0;
                    if (j >>> 0 < f >>> 0)
                        za();
                    c[j + 24 >> 2] = h;
                    d = k + 16 | 0;
                    e = c[d >> 2] | 0;
                    do
                        if (e | 0)
                            if (e >>> 0 < f >>> 0)
                                za();
                            else {
                                c[j + 16 >> 2] = e;
                                c[e + 24 >> 2] = j;
                                break;
                            }
                    while (0);
                    d = c[d + 4 >> 2] | 0;
                    if (d | 0)
                        if (d >>> 0 < (c[5332] | 0) >>> 0)
                            za();
                        else {
                            c[j + 20 >> 2] = d;
                            c[d + 24 >> 2] = j;
                            break;
                        }
                }
            } else {
                e = c[k + 8 >> 2] | 0;
                f = c[k + 12 >> 2] | 0;
                d = 21352 + (g << 1 << 2) | 0;
                if ((e | 0) != (d | 0)) {
                    if (e >>> 0 < i >>> 0)
                        za();
                    if ((c[e + 12 >> 2] | 0) != (k | 0))
                        za();
                }
                if ((f | 0) == (e | 0)) {
                    c[5328] = c[5328] & ~(1 << g);
                    break;
                }
                if ((f | 0) != (d | 0)) {
                    if (f >>> 0 < i >>> 0)
                        za();
                    d = f + 8 | 0;
                    if ((c[d >> 2] | 0) == (k | 0))
                        h = d;
                    else
                        za();
                } else
                    h = f + 8 | 0;
                c[e + 12 >> 2] = f;
                c[h >> 2] = e;
            }
        while (0);
        if (m >>> 0 < 16) {
            c[n >> 2] = l | o & 1 | 2;
            b = a + l + 4 | 0;
            c[b >> 2] = c[b >> 2] | 1;
            return a | 0;
        } else {
            l = a + b | 0;
            c[n >> 2] = o & 1 | b | 2;
            c[l + 4 >> 2] = m | 3;
            b = l + m + 4 | 0;
            c[b >> 2] = c[b >> 2] | 1;
            Yd(l, m);
            return a | 0;
        }
        return 0;
    }
    function Yd(a, b) {
        a = a | 0;
        b = b | 0;
        var d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0, q = 0, r = 0;
        o = a + b | 0;
        d = c[a + 4 >> 2] | 0;
        do
            if (!(d & 1)) {
                f = c[a >> 2] | 0;
                if (!(d & 3))
                    return;
                l = a + (0 - f) | 0;
                k = f + b | 0;
                i = c[5332] | 0;
                if (l >>> 0 < i >>> 0)
                    za();
                if ((l | 0) == (c[5333] | 0)) {
                    a = o + 4 | 0;
                    d = c[a >> 2] | 0;
                    if ((d & 3 | 0) != 3) {
                        r = l;
                        g = k;
                        break;
                    }
                    c[5330] = k;
                    c[a >> 2] = d & -2;
                    c[l + 4 >> 2] = k | 1;
                    c[l + k >> 2] = k;
                    return;
                }
                e = f >>> 3;
                if (f >>> 0 < 256) {
                    a = c[l + 8 >> 2] | 0;
                    b = c[l + 12 >> 2] | 0;
                    d = 21352 + (e << 1 << 2) | 0;
                    if ((a | 0) != (d | 0)) {
                        if (a >>> 0 < i >>> 0)
                            za();
                        if ((c[a + 12 >> 2] | 0) != (l | 0))
                            za();
                    }
                    if ((b | 0) == (a | 0)) {
                        c[5328] = c[5328] & ~(1 << e);
                        r = l;
                        g = k;
                        break;
                    }
                    if ((b | 0) != (d | 0)) {
                        if (b >>> 0 < i >>> 0)
                            za();
                        d = b + 8 | 0;
                        if ((c[d >> 2] | 0) == (l | 0))
                            h = d;
                        else
                            za();
                    } else
                        h = b + 8 | 0;
                    c[a + 12 >> 2] = b;
                    c[h >> 2] = a;
                    r = l;
                    g = k;
                    break;
                }
                f = c[l + 24 >> 2] | 0;
                b = c[l + 12 >> 2] | 0;
                do
                    if ((b | 0) == (l | 0)) {
                        a = l + 16 | 0;
                        b = a + 4 | 0;
                        d = c[b >> 2] | 0;
                        if (!d) {
                            d = c[a >> 2] | 0;
                            if (!d) {
                                j = 0;
                                break;
                            }
                        } else
                            a = b;
                        while (1) {
                            b = d + 20 | 0;
                            e = c[b >> 2] | 0;
                            if (e | 0) {
                                d = e;
                                a = b;
                                continue;
                            }
                            b = d + 16 | 0;
                            e = c[b >> 2] | 0;
                            if (!e)
                                break;
                            else {
                                d = e;
                                a = b;
                            }
                        }
                        if (a >>> 0 < i >>> 0)
                            za();
                        else {
                            c[a >> 2] = 0;
                            j = d;
                            break;
                        }
                    } else {
                        e = c[l + 8 >> 2] | 0;
                        if (e >>> 0 < i >>> 0)
                            za();
                        d = e + 12 | 0;
                        if ((c[d >> 2] | 0) != (l | 0))
                            za();
                        a = b + 8 | 0;
                        if ((c[a >> 2] | 0) == (l | 0)) {
                            c[d >> 2] = b;
                            c[a >> 2] = e;
                            j = b;
                            break;
                        } else
                            za();
                    }
                while (0);
                if (f) {
                    d = c[l + 28 >> 2] | 0;
                    a = 21616 + (d << 2) | 0;
                    if ((l | 0) == (c[a >> 2] | 0)) {
                        c[a >> 2] = j;
                        if (!j) {
                            c[5329] = c[5329] & ~(1 << d);
                            r = l;
                            g = k;
                            break;
                        }
                    } else {
                        if (f >>> 0 < (c[5332] | 0) >>> 0)
                            za();
                        d = f + 16 | 0;
                        if ((c[d >> 2] | 0) == (l | 0))
                            c[d >> 2] = j;
                        else
                            c[f + 20 >> 2] = j;
                        if (!j) {
                            r = l;
                            g = k;
                            break;
                        }
                    }
                    b = c[5332] | 0;
                    if (j >>> 0 < b >>> 0)
                        za();
                    c[j + 24 >> 2] = f;
                    d = l + 16 | 0;
                    a = c[d >> 2] | 0;
                    do
                        if (a | 0)
                            if (a >>> 0 < b >>> 0)
                                za();
                            else {
                                c[j + 16 >> 2] = a;
                                c[a + 24 >> 2] = j;
                                break;
                            }
                    while (0);
                    d = c[d + 4 >> 2] | 0;
                    if (d)
                        if (d >>> 0 < (c[5332] | 0) >>> 0)
                            za();
                        else {
                            c[j + 20 >> 2] = d;
                            c[d + 24 >> 2] = j;
                            r = l;
                            g = k;
                            break;
                        }
                    else {
                        r = l;
                        g = k;
                    }
                } else {
                    r = l;
                    g = k;
                }
            } else {
                r = a;
                g = b;
            }
        while (0);
        h = c[5332] | 0;
        if (o >>> 0 < h >>> 0)
            za();
        d = o + 4 | 0;
        a = c[d >> 2] | 0;
        if (!(a & 2)) {
            if ((o | 0) == (c[5334] | 0)) {
                q = (c[5331] | 0) + g | 0;
                c[5331] = q;
                c[5334] = r;
                c[r + 4 >> 2] = q | 1;
                if ((r | 0) != (c[5333] | 0))
                    return;
                c[5333] = 0;
                c[5330] = 0;
                return;
            }
            if ((o | 0) == (c[5333] | 0)) {
                q = (c[5330] | 0) + g | 0;
                c[5330] = q;
                c[5333] = r;
                c[r + 4 >> 2] = q | 1;
                c[r + q >> 2] = q;
                return;
            }
            g = (a & -8) + g | 0;
            e = a >>> 3;
            do
                if (a >>> 0 >= 256) {
                    f = c[o + 24 >> 2] | 0;
                    b = c[o + 12 >> 2] | 0;
                    do
                        if ((b | 0) == (o | 0)) {
                            a = o + 16 | 0;
                            b = a + 4 | 0;
                            d = c[b >> 2] | 0;
                            if (!d) {
                                d = c[a >> 2] | 0;
                                if (!d) {
                                    n = 0;
                                    break;
                                }
                            } else
                                a = b;
                            while (1) {
                                b = d + 20 | 0;
                                e = c[b >> 2] | 0;
                                if (e | 0) {
                                    d = e;
                                    a = b;
                                    continue;
                                }
                                b = d + 16 | 0;
                                e = c[b >> 2] | 0;
                                if (!e)
                                    break;
                                else {
                                    d = e;
                                    a = b;
                                }
                            }
                            if (a >>> 0 < h >>> 0)
                                za();
                            else {
                                c[a >> 2] = 0;
                                n = d;
                                break;
                            }
                        } else {
                            e = c[o + 8 >> 2] | 0;
                            if (e >>> 0 < h >>> 0)
                                za();
                            d = e + 12 | 0;
                            if ((c[d >> 2] | 0) != (o | 0))
                                za();
                            a = b + 8 | 0;
                            if ((c[a >> 2] | 0) == (o | 0)) {
                                c[d >> 2] = b;
                                c[a >> 2] = e;
                                n = b;
                                break;
                            } else
                                za();
                        }
                    while (0);
                    if (f | 0) {
                        d = c[o + 28 >> 2] | 0;
                        a = 21616 + (d << 2) | 0;
                        if ((o | 0) == (c[a >> 2] | 0)) {
                            c[a >> 2] = n;
                            if (!n) {
                                c[5329] = c[5329] & ~(1 << d);
                                break;
                            }
                        } else {
                            if (f >>> 0 < (c[5332] | 0) >>> 0)
                                za();
                            d = f + 16 | 0;
                            if ((c[d >> 2] | 0) == (o | 0))
                                c[d >> 2] = n;
                            else
                                c[f + 20 >> 2] = n;
                            if (!n)
                                break;
                        }
                        b = c[5332] | 0;
                        if (n >>> 0 < b >>> 0)
                            za();
                        c[n + 24 >> 2] = f;
                        d = o + 16 | 0;
                        a = c[d >> 2] | 0;
                        do
                            if (a | 0)
                                if (a >>> 0 < b >>> 0)
                                    za();
                                else {
                                    c[n + 16 >> 2] = a;
                                    c[a + 24 >> 2] = n;
                                    break;
                                }
                        while (0);
                        d = c[d + 4 >> 2] | 0;
                        if (d | 0)
                            if (d >>> 0 < (c[5332] | 0) >>> 0)
                                za();
                            else {
                                c[n + 20 >> 2] = d;
                                c[d + 24 >> 2] = n;
                                break;
                            }
                    }
                } else {
                    a = c[o + 8 >> 2] | 0;
                    b = c[o + 12 >> 2] | 0;
                    d = 21352 + (e << 1 << 2) | 0;
                    if ((a | 0) != (d | 0)) {
                        if (a >>> 0 < h >>> 0)
                            za();
                        if ((c[a + 12 >> 2] | 0) != (o | 0))
                            za();
                    }
                    if ((b | 0) == (a | 0)) {
                        c[5328] = c[5328] & ~(1 << e);
                        break;
                    }
                    if ((b | 0) != (d | 0)) {
                        if (b >>> 0 < h >>> 0)
                            za();
                        d = b + 8 | 0;
                        if ((c[d >> 2] | 0) == (o | 0))
                            m = d;
                        else
                            za();
                    } else
                        m = b + 8 | 0;
                    c[a + 12 >> 2] = b;
                    c[m >> 2] = a;
                }
            while (0);
            c[r + 4 >> 2] = g | 1;
            c[r + g >> 2] = g;
            if ((r | 0) == (c[5333] | 0)) {
                c[5330] = g;
                return;
            }
        } else {
            c[d >> 2] = a & -2;
            c[r + 4 >> 2] = g | 1;
            c[r + g >> 2] = g;
        }
        d = g >>> 3;
        if (g >>> 0 < 256) {
            b = 21352 + (d << 1 << 2) | 0;
            a = c[5328] | 0;
            d = 1 << d;
            if (a & d) {
                d = b + 8 | 0;
                a = c[d >> 2] | 0;
                if (a >>> 0 < (c[5332] | 0) >>> 0)
                    za();
                else {
                    p = d;
                    q = a;
                }
            } else {
                c[5328] = a | d;
                p = b + 8 | 0;
                q = b;
            }
            c[p >> 2] = r;
            c[q + 12 >> 2] = r;
            c[r + 8 >> 2] = q;
            c[r + 12 >> 2] = b;
            return;
        }
        d = g >>> 8;
        if (d)
            if (g >>> 0 > 16777215)
                b = 31;
            else {
                p = (d + 1048320 | 0) >>> 16 & 8;
                q = d << p;
                o = (q + 520192 | 0) >>> 16 & 4;
                q = q << o;
                b = (q + 245760 | 0) >>> 16 & 2;
                b = 14 - (o | p | b) + (q << b >>> 15) | 0;
                b = g >>> (b + 7 | 0) & 1 | b << 1;
            }
        else
            b = 0;
        e = 21616 + (b << 2) | 0;
        c[r + 28 >> 2] = b;
        c[r + 20 >> 2] = 0;
        c[r + 16 >> 2] = 0;
        d = c[5329] | 0;
        a = 1 << b;
        if (!(d & a)) {
            c[5329] = d | a;
            c[e >> 2] = r;
            c[r + 24 >> 2] = e;
            c[r + 12 >> 2] = r;
            c[r + 8 >> 2] = r;
            return;
        }
        f = g << ((b | 0) == 31 ? 0 : 25 - (b >>> 1) | 0);
        d = c[e >> 2] | 0;
        while (1) {
            if ((c[d + 4 >> 2] & -8 | 0) == (g | 0)) {
                b = d;
                e = 127;
                break;
            }
            a = d + 16 + (f >>> 31 << 2) | 0;
            b = c[a >> 2] | 0;
            if (!b) {
                e = 124;
                break;
            } else {
                f = f << 1;
                d = b;
            }
        }
        if ((e | 0) == 124) {
            if (a >>> 0 < (c[5332] | 0) >>> 0)
                za();
            c[a >> 2] = r;
            c[r + 24 >> 2] = d;
            c[r + 12 >> 2] = r;
            c[r + 8 >> 2] = r;
            return;
        } else if ((e | 0) == 127) {
            d = b + 8 | 0;
            a = c[d >> 2] | 0;
            q = c[5332] | 0;
            if (!(a >>> 0 >= q >>> 0 & b >>> 0 >= q >>> 0))
                za();
            c[a + 12 >> 2] = r;
            c[d >> 2] = r;
            c[r + 8 >> 2] = a;
            c[r + 12 >> 2] = b;
            c[r + 24 >> 2] = 0;
            return;
        }
    }
    function Zd() {
    }
    function _d(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        d = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
        return (C = d, a - c >>> 0 | 0) | 0;
    }
    function $d(b, d, e) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, i = 0;
        f = b + e | 0;
        if ((e | 0) >= 20) {
            d = d & 255;
            h = b & 3;
            i = d | d << 8 | d << 16 | d << 24;
            g = f & ~3;
            if (h) {
                h = b + 4 - h | 0;
                while ((b | 0) < (h | 0)) {
                    a[b >> 0] = d;
                    b = b + 1 | 0;
                }
            }
            while ((b | 0) < (g | 0)) {
                c[b >> 2] = i;
                b = b + 4 | 0;
            }
        }
        while ((b | 0) < (f | 0)) {
            a[b >> 0] = d;
            b = b + 1 | 0;
        }
        return b - e | 0;
    }
    function ae(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        if ((c | 0) < 32) {
            C = b >>> c;
            return a >>> c | (b & (1 << c) - 1) << 32 - c;
        }
        C = 0;
        return b >>> c - 32 | 0;
    }
    function be(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        if ((c | 0) < 32) {
            C = b << c | (a & (1 << c) - 1 << 32 - c) >>> 32 - c;
            return a << c;
        }
        C = a << c - 32;
        return 0;
    }
    function ce(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        c = a + c >>> 0;
        return (C = b + d + (c >>> 0 < a >>> 0 | 0) >>> 0, c | 0) | 0;
    }
    function de(b, d, e) {
        b = b | 0;
        d = d | 0;
        e = e | 0;
        var f = 0;
        if ((e | 0) >= 4096)
            return qa(b | 0, d | 0, e | 0) | 0;
        f = b | 0;
        if ((b & 3) == (d & 3)) {
            while (b & 3) {
                if (!e)
                    return f | 0;
                a[b >> 0] = a[d >> 0] | 0;
                b = b + 1 | 0;
                d = d + 1 | 0;
                e = e - 1 | 0;
            }
            while ((e | 0) >= 4) {
                c[b >> 2] = c[d >> 2];
                b = b + 4 | 0;
                d = d + 4 | 0;
                e = e - 4 | 0;
            }
        }
        while ((e | 0) > 0) {
            a[b >> 0] = a[d >> 0] | 0;
            b = b + 1 | 0;
            d = d + 1 | 0;
            e = e - 1 | 0;
        }
        return f | 0;
    }
    function ee(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        if ((c | 0) < 32) {
            C = b >> c;
            return a >>> c | (b & (1 << c) - 1) << 32 - c;
        }
        C = (b | 0) < 0 ? -1 : 0;
        return b >> c - 32 | 0;
    }
    function fe(b) {
        b = b | 0;
        var c = 0;
        c = a[m + (b & 255) >> 0] | 0;
        if ((c | 0) < 8)
            return c | 0;
        c = a[m + (b >> 8 & 255) >> 0] | 0;
        if ((c | 0) < 8)
            return c + 8 | 0;
        c = a[m + (b >> 16 & 255) >> 0] | 0;
        if ((c | 0) < 8)
            return c + 16 | 0;
        return (a[m + (b >>> 24) >> 0] | 0) + 24 | 0;
    }
    function ge(a, b) {
        a = a | 0;
        b = b | 0;
        var c = 0, d = 0, e = 0, f = 0;
        f = a & 65535;
        e = b & 65535;
        c = _(e, f) | 0;
        d = a >>> 16;
        a = (c >>> 16) + (_(e, d) | 0) | 0;
        e = b >>> 16;
        b = _(e, f) | 0;
        return (C = (a >>> 16) + (_(e, d) | 0) + (((a & 65535) + b | 0) >>> 16) | 0, a + b << 16 | c & 65535 | 0) | 0;
    }
    function he(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0, g = 0, h = 0, i = 0, j = 0;
        j = b >> 31 | ((b | 0) < 0 ? -1 : 0) << 1;
        i = ((b | 0) < 0 ? -1 : 0) >> 31 | ((b | 0) < 0 ? -1 : 0) << 1;
        f = d >> 31 | ((d | 0) < 0 ? -1 : 0) << 1;
        e = ((d | 0) < 0 ? -1 : 0) >> 31 | ((d | 0) < 0 ? -1 : 0) << 1;
        h = _d(j ^ a | 0, i ^ b | 0, j | 0, i | 0) | 0;
        g = C;
        a = f ^ j;
        b = e ^ i;
        return _d((me(h, g, _d(f ^ c | 0, e ^ d | 0, f | 0, e | 0) | 0, C, 0) | 0) ^ a | 0, C ^ b | 0, a | 0, b | 0) | 0;
    }
    function ie(a, b, d, e) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0, h = 0, j = 0, k = 0, l = 0;
        f = i;
        i = i + 16 | 0;
        j = f | 0;
        h = b >> 31 | ((b | 0) < 0 ? -1 : 0) << 1;
        g = ((b | 0) < 0 ? -1 : 0) >> 31 | ((b | 0) < 0 ? -1 : 0) << 1;
        l = e >> 31 | ((e | 0) < 0 ? -1 : 0) << 1;
        k = ((e | 0) < 0 ? -1 : 0) >> 31 | ((e | 0) < 0 ? -1 : 0) << 1;
        a = _d(h ^ a | 0, g ^ b | 0, h | 0, g | 0) | 0;
        b = C;
        me(a, b, _d(l ^ d | 0, k ^ e | 0, l | 0, k | 0) | 0, C, j) | 0;
        e = _d(c[j >> 2] ^ h | 0, c[j + 4 >> 2] ^ g | 0, h | 0, g | 0) | 0;
        d = C;
        i = f;
        return (C = d, e) | 0;
    }
    function je(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        var e = 0, f = 0;
        e = a;
        f = c;
        c = ge(e, f) | 0;
        a = C;
        return (C = (_(b, f) | 0) + (_(d, e) | 0) + a | a & 0, c | 0 | 0) | 0;
    }
    function ke(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        return me(a, b, c, d, 0) | 0;
    }
    function le(a, b, d, e) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        e = e | 0;
        var f = 0, g = 0;
        g = i;
        i = i + 16 | 0;
        f = g | 0;
        me(a, b, d, e, f) | 0;
        i = g;
        return (C = c[f + 4 >> 2] | 0, c[f >> 2] | 0) | 0;
    }
    function me(a, b, d, e, f) {
        a = a | 0;
        b = b | 0;
        d = d | 0;
        e = e | 0;
        f = f | 0;
        var g = 0, h = 0, i = 0, j = 0, k = 0, l = 0, m = 0, n = 0, o = 0, p = 0;
        l = a;
        j = b;
        k = j;
        h = d;
        n = e;
        i = n;
        if (!k) {
            g = (f | 0) != 0;
            if (!i) {
                if (g) {
                    c[f >> 2] = (l >>> 0) % (h >>> 0);
                    c[f + 4 >> 2] = 0;
                }
                n = 0;
                f = (l >>> 0) / (h >>> 0) >>> 0;
                return (C = n, f) | 0;
            } else {
                if (!g) {
                    n = 0;
                    f = 0;
                    return (C = n, f) | 0;
                }
                c[f >> 2] = a | 0;
                c[f + 4 >> 2] = b & 0;
                n = 0;
                f = 0;
                return (C = n, f) | 0;
            }
        }
        g = (i | 0) == 0;
        do
            if (h) {
                if (!g) {
                    g = (aa(i | 0) | 0) - (aa(k | 0) | 0) | 0;
                    if (g >>> 0 <= 31) {
                        m = g + 1 | 0;
                        i = 31 - g | 0;
                        b = g - 31 >> 31;
                        h = m;
                        a = l >>> (m >>> 0) & b | k << i;
                        b = k >>> (m >>> 0) & b;
                        g = 0;
                        i = l << i;
                        break;
                    }
                    if (!f) {
                        n = 0;
                        f = 0;
                        return (C = n, f) | 0;
                    }
                    c[f >> 2] = a | 0;
                    c[f + 4 >> 2] = j | b & 0;
                    n = 0;
                    f = 0;
                    return (C = n, f) | 0;
                }
                g = h - 1 | 0;
                if (g & h | 0) {
                    i = (aa(h | 0) | 0) + 33 - (aa(k | 0) | 0) | 0;
                    p = 64 - i | 0;
                    m = 32 - i | 0;
                    j = m >> 31;
                    o = i - 32 | 0;
                    b = o >> 31;
                    h = i;
                    a = m - 1 >> 31 & k >>> (o >>> 0) | (k << m | l >>> (i >>> 0)) & b;
                    b = b & k >>> (i >>> 0);
                    g = l << p & j;
                    i = (k << p | l >>> (o >>> 0)) & j | l << m & i - 33 >> 31;
                    break;
                }
                if (f | 0) {
                    c[f >> 2] = g & l;
                    c[f + 4 >> 2] = 0;
                }
                if ((h | 0) == 1) {
                    o = j | b & 0;
                    p = a | 0 | 0;
                    return (C = o, p) | 0;
                } else {
                    p = fe(h | 0) | 0;
                    o = k >>> (p >>> 0) | 0;
                    p = k << 32 - p | l >>> (p >>> 0) | 0;
                    return (C = o, p) | 0;
                }
            } else {
                if (g) {
                    if (f | 0) {
                        c[f >> 2] = (k >>> 0) % (h >>> 0);
                        c[f + 4 >> 2] = 0;
                    }
                    o = 0;
                    p = (k >>> 0) / (h >>> 0) >>> 0;
                    return (C = o, p) | 0;
                }
                if (!l) {
                    if (f | 0) {
                        c[f >> 2] = 0;
                        c[f + 4 >> 2] = (k >>> 0) % (i >>> 0);
                    }
                    o = 0;
                    p = (k >>> 0) / (i >>> 0) >>> 0;
                    return (C = o, p) | 0;
                }
                g = i - 1 | 0;
                if (!(g & i)) {
                    if (f | 0) {
                        c[f >> 2] = a | 0;
                        c[f + 4 >> 2] = g & k | b & 0;
                    }
                    o = 0;
                    p = k >>> ((fe(i | 0) | 0) >>> 0);
                    return (C = o, p) | 0;
                }
                g = (aa(i | 0) | 0) - (aa(k | 0) | 0) | 0;
                if (g >>> 0 <= 30) {
                    b = g + 1 | 0;
                    i = 31 - g | 0;
                    h = b;
                    a = k << i | l >>> (b >>> 0);
                    b = k >>> (b >>> 0);
                    g = 0;
                    i = l << i;
                    break;
                }
                if (!f) {
                    o = 0;
                    p = 0;
                    return (C = o, p) | 0;
                }
                c[f >> 2] = a | 0;
                c[f + 4 >> 2] = j | b & 0;
                o = 0;
                p = 0;
                return (C = o, p) | 0;
            }
        while (0);
        if (!h) {
            k = i;
            j = 0;
            i = 0;
        } else {
            m = d | 0 | 0;
            l = n | e & 0;
            k = ce(m | 0, l | 0, -1, -1) | 0;
            d = C;
            j = i;
            i = 0;
            do {
                e = j;
                j = g >>> 31 | j << 1;
                g = i | g << 1;
                e = a << 1 | e >>> 31 | 0;
                n = a >>> 31 | b << 1 | 0;
                _d(k | 0, d | 0, e | 0, n | 0) | 0;
                p = C;
                o = p >> 31 | ((p | 0) < 0 ? -1 : 0) << 1;
                i = o & 1;
                a = _d(e | 0, n | 0, o & m | 0, (((p | 0) < 0 ? -1 : 0) >> 31 | ((p | 0) < 0 ? -1 : 0) << 1) & l | 0) | 0;
                b = C;
                h = h - 1 | 0;
            } while ((h | 0) != 0);
            k = j;
            j = 0;
        }
        h = 0;
        if (f | 0) {
            c[f >> 2] = a;
            c[f + 4 >> 2] = b;
        }
        o = (g | 0) >>> 31 | (k | h) << 1 | (h << 1 | g >>> 31) & 0 | j;
        p = (g << 1 | 0 >>> 31) & -2 | i;
        return (C = o, p) | 0;
    }
    function* ne(a) {
        a = a | 0;
        return (yield* Ia[a & 3]()) | 0;
    }
    function oe(a, b) {
        a = a | 0;
        b = b | 0;
        return Ja[a & 1](b | 0) | 0;
    }
    function* pe(a, b, c, d) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        d = d | 0;
        return (yield* Ka[a & 7](b | 0, c | 0, d | 0)) | 0;
    }
    function* qe(a, b) {
        a = a | 0;
        b = b | 0;
        yield* La[a & 7](b | 0);
    }
    function* re() {
        ba(0);
        return 0;
    }
    function se(a) {
        a = a | 0;
        ba(1);
        return 0;
    }
    function* te(a, b, c) {
        a = a | 0;
        b = b | 0;
        c = c | 0;
        ba(2);
        return 0;
    }
    function* ue(a) {
        a = a | 0;
        ba(3);
    }
    var Ia = [
        re,
        ib,
        kb,
        re
    ];
    var Ja = [
        se,
        Hc
    ];
    var Ka = [
        te,
        Kc,
        Oc,
        Pc,
        Lc,
        cd,
        te,
        te
    ];
    var La = [
        ue,
        Xa,
        eb,
        $b,
        Mc,
        Qc,
        ue,
        ue
    ];
    return {
        _i64Subtract: _d,
        _free: Vd,
        _i64Add: ce,
        _memset: $d,
        _malloc: Ud,
        _memcpy: de,
        _bitshift64Lshr: ae,
        ___errno_location: Jc,
        _bitshift64Shl: be,
        runPostSets: Zd,
        stackAlloc: Ma,
        stackSave: Na,
        stackRestore: Oa,
        establishStackSpace: Pa,
        setThrew: Qa,
        setTempRet0: Ta,
        getTempRet0: Ua,
        dynCall_ii: oe,
        yld_export: {
            _main: Va,
            dynCall_i: ne,
            dynCall_iiii: pe,
            dynCall_vi: qe
        }
    };
}(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memset = Module["_memset"] = asm["_memset"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
Runtime.stackAlloc = asm["stackAlloc"];
Runtime.stackSave = asm["stackSave"];
Runtime.stackRestore = asm["stackRestore"];
Runtime.establishStackSpace = asm["establishStackSpace"];
Runtime.setTempRet0 = asm["setTempRet0"];
Runtime.getTempRet0 = asm["getTempRet0"];
function ExitStatus(status) {
    this.name = "ExitStatus";
    this.message = "Program terminated with exit(" + status + ")";
    this.status = status;
}
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
    if (!Module["calledRun"])
        run();
    if (!Module["calledRun"])
        dependenciesFulfilled = runCaller;
};
Module["callMain"] = Module.callMain = function callMain(args) {
    args = args || [];
    ensureInitRuntime();
    var argc = args.length + 1;
    function pad() {
        for (var i = 0; i < 4 - 1; i++) {
            argv.push(0);
        }
    }
    var argv = [allocate(intArrayFromString(Module["thisProgram"]), "i8", ALLOC_NORMAL)];
    pad();
    for (var i = 0; i < argc - 1; i = i + 1) {
        argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_NORMAL));
        pad();
    }
    argv.push(0);
    argv = allocate(argv, "i32", ALLOC_NORMAL);
    try {
        var ret = Module["_main"](argc, argv, 0);
        exit(ret, true);
    } catch (e) {
        if (e instanceof ExitStatus) {
            return;
        } else if (e == "SimulateInfiniteLoop") {
            Module["noExitRuntime"] = true;
            return;
        } else {
            if (e && typeof e === "object" && e.stack)
                Module.printErr("exception thrown: " + [
                    e,
                    e.stack
                ]);
            throw e;
        }
    } finally {
        calledMain = true;
    }
};
function run(args) {
    args = args || Module["arguments"];
    if (preloadStartTime === null)
        preloadStartTime = Date.now();
    if (runDependencies > 0) {
        return;
    }
    preRun();
    if (runDependencies > 0)
        return;
    if (Module["calledRun"])
        return;
    function doRun() {
        if (Module["calledRun"])
            return;
        Module["calledRun"] = true;
        if (ABORT)
            return;
        ensureInitRuntime();
        preMain();
        if (Module["onRuntimeInitialized"])
            Module["onRuntimeInitialized"]();
        if (Module["_main"] && shouldRunNow)
            Module["callMain"](args);
        postRun();
    }
    if (Module["setStatus"]) {
        Module["setStatus"]("Running...");
        setTimeout(function () {
            setTimeout(function () {
                Module["setStatus"]("");
            }, 1);
            doRun();
        }, 1);
    } else {
        doRun();
    }
}
Module["run"] = Module.run = run;
function exit(status, implicit) {
    if (implicit && Module["noExitRuntime"]) {
        return;
    }
    if (Module["noExitRuntime"]) {
    } else {
        ABORT = true;
        EXITSTATUS = status;
        STACKTOP = initialStackTop;
        exitRuntime();
        if (Module["onExit"])
            Module["onExit"](status);
    }
    if (ENVIRONMENT_IS_NODE) {
        process["exit"](status);
    } else if (ENVIRONMENT_IS_SHELL && typeof quit === "function") {
        quit(status);
    }
    throw new ExitStatus(status);
}
Module["exit"] = Module.exit = exit;
var abortDecorators = [];
function abort(what) {
    if (what !== undefined) {
        Module.print(what);
        Module.printErr(what);
        what = JSON.stringify(what);
    } else {
        what = "";
    }
    ABORT = true;
    EXITSTATUS = 1;
    var extra = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
    var output = "abort(" + what + ") at " + stackTrace() + extra;
    if (abortDecorators) {
        abortDecorators.forEach(function (decorator) {
            output = decorator(output, what);
        });
    }
    throw output;
}
Module["abort"] = Module.abort = abort;
if (Module["preInit"]) {
    if (typeof Module["preInit"] == "function")
        Module["preInit"] = [Module["preInit"]];
    while (Module["preInit"].length > 0) {
        Module["preInit"].pop()();
    }
}
var shouldRunNow = true;
if (Module["noInitialRun"]) {
    shouldRunNow = false;
}
Module["noExitRuntime"] = true;
run();